---
name: Create Release

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Type of release'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major
      custom_version:
        description: 'Custom version (leave empty for auto-increment)'
        required: false
        type: string
      release_notes:
        description: 'Custom release notes (leave empty for auto-generated)'
        required: false
        type: string

permissions:
  contents: write
  issues: read
  checks: read
  pull-requests: read
  packages: write

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.get_version.outputs.new_version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13.7'

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install packaging

      - name: Get version information
        id: get_version
        run: |
          # Get current version from git tags
          current_version=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "current_version=$current_version" >> $GITHUB_OUTPUT
          
          # Calculate new version
          if [ -n "${{ github.event.inputs.custom_version }}" ]; then
            new_version="${{ github.event.inputs.custom_version }}"
            if [[ ! "$new_version" =~ ^v ]]; then
              new_version="v$new_version"
            fi
          else
            # Auto-increment based on release type
            version_number=$(echo $current_version | sed 's/^v//')
            IFS='.' read -r major minor patch <<< "$version_number"
            
            case "${{ github.event.inputs.release_type }}" in
              major)
                major=$((major + 1))
                minor=0
                patch=0
                ;;
              minor)
                minor=$((minor + 1))
                patch=0
                ;;
              patch)
                patch=$((patch + 1))
                ;;
            esac
            
            new_version="v${major}.${minor}.${patch}"
          fi
          
          echo "new_version=$new_version" >> $GITHUB_OUTPUT
          echo "New version: $new_version"

      - name: Check if version already exists
        run: |
          if git tag -l | grep -q "^${{ steps.get_version.outputs.new_version }}$"; then
            echo "❌ Version ${{ steps.get_version.outputs.new_version }} already exists!"
            exit 1
          fi

      - name: Generate release notes
        id: release_notes
        run: |
          if [ -n "${{ github.event.inputs.release_notes }}" ]; then
            # Use custom release notes
            cat > release_notes.md << 'EOF'
          ${{ github.event.inputs.release_notes }}
          
          ---
          
          🤖 **Manual Release Created**
          - Version: ${{ steps.get_version.outputs.new_version }}
          - Release Type: ${{ github.event.inputs.release_type }}
          - Created by: ${{ github.actor }}
          - Triggered: Manual workflow dispatch
          
          EOF
          else
            # Auto-generate release notes
            previous_tag=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
            build_date=$(date -u '+%Y-%m-%d %H:%M:%S UTC')

            cat > release_notes.md << EOF
          ## 🚀 Network Device Upgrade System ${{ steps.get_version.outputs.new_version }}
          
          ### ✨ What's New
          
          This release includes the latest improvements and fixes to the network device upgrade system.
          
          ### 🔧 Container Image
          
          **Ready-to-use container image:**
          ```bash
          # Docker
          docker pull ghcr.io/${{ github.repository }}:${{ steps.get_version.outputs.new_version }}
          docker run --rm ghcr.io/${{ github.repository }}:${{ steps.get_version.outputs.new_version }} help
          
          # Podman (RHEL8/9 compatible)
          podman pull ghcr.io/${{ github.repository }}:${{ steps.get_version.outputs.new_version }}
          podman run --rm ghcr.io/${{ github.repository }}:${{ steps.get_version.outputs.new_version }}
          ```
          
          **Container Features:**
          - ✅ Alpine-based (minimal ~200MB)
          - ✅ Non-root execution (UID 1000)
          - ✅ RHEL8/9 podman compatible
          - ✅ Latest Ansible 12.0.0 & Python 3.13.7
          - ✅ Multi-architecture (amd64/arm64)
          
          ### 📋 System Requirements
          
          - **Ansible**: 12.0.0+ (ansible-core 2.19.2+)
          - **Python**: 3.13.7+
          - **Platform Support**: Cisco NX-OS, IOS-XE, FortiOS, Opengear, Metamako MOS
          
          ### 📦 Installation Options
          
          - 🐳 **Container**: `ghcr.io/${{ github.repository }}:${{ steps.get_version.outputs.new_version }}`
          - 📦 **Archive**: Download from release assets
          - 📖 **Manual**: See [Installation Guide](docs/installation-guide.md)
          
          ### 🛡️ Validation Status
          
          ✅ All automated tests passed:
          - Security scanning and vulnerability assessment
          - Comprehensive lint and syntax validation  
          - Unit tests across multiple scenarios
          - Integration tests with mock device environments
          - Container build and compatibility verification
          
          ---
          
          🤖 **Release Information**
          - Release Type: ${{ github.event.inputs.release_type }}
          - Previous Version: ${{ steps.get_version.outputs.current_version }}
          - Created by: ${{ github.actor }}
          - Build Date: $build_date
          
          For detailed changes, see the [commit history](https://github.com/${{ github.repository }}/compare/${{ steps.get_version.outputs.current_version }}...${{ steps.get_version.outputs.new_version }}).
          
          EOF
          fi

      - name: Create and push tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          
          git tag -a "${{ steps.get_version.outputs.new_version }}" -m "Release ${{ steps.get_version.outputs.new_version }}"
          git push origin "${{ steps.get_version.outputs.new_version }}"

      - name: Create GitHub release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create "${{ steps.get_version.outputs.new_version }}" \
            --title "Network Device Upgrade System ${{ steps.get_version.outputs.new_version }}" \
            --notes-file release_notes.md \
            --latest

      - name: Display release information
        run: |
          echo "🎉 Release created successfully!"
          echo "Version: ${{ steps.get_version.outputs.new_version }}"
          echo "Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ steps.get_version.outputs.new_version }}"
          echo "Container Image: ghcr.io/${{ github.repository }}:${{ steps.get_version.outputs.new_version }}"

  tag-existing-container:
    name: Tag Existing Container with Release Version
    needs: create-release
    runs-on: ubuntu-latest

    steps:
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Tag existing container with release version
        run: |
          # Pull the latest container (built by ansible-tests workflow)
          docker pull ghcr.io/${{ github.repository }}:latest

          # Tag it with the release version
          docker tag ghcr.io/${{ github.repository }}:latest \
            ghcr.io/${{ github.repository }}:${{ needs.create-release.outputs.new_version }}

          # Push the tagged version
          docker push ghcr.io/${{ github.repository }}:${{ needs.create-release.outputs.new_version }}

          echo "✅ Tagged existing container with version ${{ needs.create-release.outputs.new_version }}"