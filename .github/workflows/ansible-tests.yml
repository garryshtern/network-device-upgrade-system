---
name: Ansible Tests

# Cancel in-progress runs when a new workflow is triggered
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run comprehensive tests weekly on Sundays at 3:00 AM UTC
    - cron: '0 3 * * 0'
  workflow_dispatch:
    inputs:
      test_level:
        description: 'Test level to run'
        required: false
        default: 'standard'
        type: choice
        options:
          - 'standard'
          - 'comprehensive'
          - 'critical-gaps-only'

permissions:
  contents: write
  issues: read
  checks: read
  pull-requests: read
  packages: write

jobs:
  lint-and-syntax:
    name: Lint and Syntax Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.13.7"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run lint and syntax tests
        uses: ./.github/actions/lint-and-syntax
        with:
          python-version: ${{ matrix.python-version }}

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run unit tests
        uses: ./.github/actions/unit-tests

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run integration tests
        uses: ./.github/actions/integration-tests

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run security scan
        uses: ./.github/actions/security-scan

  mock-device-tests:
    name: Mock Device Framework Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run mock device tests
        uses: ./.github/actions/mock-device-tests

  container-tests:
    name: Container Functionality Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build container image for testing
        uses: docker/build-push-action@v5
        with:
          context: .
          load: true
          tags: network-device-upgrade-system:test
          cache-from: type=gha,scope=test
          cache-to: type=gha,mode=max,scope=test
          # Only build layers that changed to speed up testing
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      - name: Create test SSH keys
        run: |
          mkdir -p tests/container-tests/mockups/keys
          ssh-keygen -t rsa -b 2048 -f tests/container-tests/mockups/keys/test-cisco-key -N "" -C "test-key"
          chmod 600 tests/container-tests/mockups/keys/test-cisco-key

      - name: Make container tests executable
        run: |
          chmod +x tests/container-tests/*.sh

      - name: Run container test suite
        run: |
          cd tests/container-tests
          export CONTAINER_IMAGE="network-device-upgrade-system:test"
          echo "=== CONTAINER FUNCTIONALITY DEBUG SESSION ==="
          echo "Container functionality is REQUIRED - testing Docker and Podman compatibility"
          echo ""

          echo "=== ENVIRONMENT INFO ==="
          echo "PWD: $(pwd)"
          echo "USER: $(whoami)"
          echo "CONTAINER_IMAGE: $CONTAINER_IMAGE"
          echo ""

          echo "=== DOCKER INFO ==="
          docker --version || echo "Docker command failed"
          docker info || echo "Docker info failed"
          echo ""

          echo "=== CONTAINER IMAGES ==="
          docker images || echo "Docker images command failed"
          echo ""

          echo "=== CHECKING FOR TEST IMAGE ==="
          docker images | grep network-device-upgrade-system || echo "Test image not found"
          echo ""

          echo "=== FILE SYSTEM CHECK ==="
          ls -la . || echo "Directory listing failed"
          ls -la *.sh || echo "Shell script listing failed"
          echo ""

          echo "=== RUNNING TESTS WITH FULL DEBUG ==="
          set -x  # Enable command tracing
          bash -x ./run-all-container-tests.sh 2>&1 || {
            echo "=== CONTAINER TEST FAILED - CAPTURING ERROR STATE ==="
            echo "Exit code: $?"
            echo "=== END CONTAINER TEST FAILURE DEBUG ==="
            exit 1
          }
          set +x  # Disable command tracing
        env:
          CONTAINER_IMAGE: "network-device-upgrade-system:test"

      - name: Upload container test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: container-test-results-${{ github.run_number }}
          path: |
            tests/container-tests/results/
            tests/container-tests/reports/
            tests/container-tests/*.log
          retention-days: 30
          if-no-files-found: ignore

  molecule-tests:
    name: Molecule Tests
    runs-on: ubuntu-latest
    # Run molecule tests only for main branch pushes, PRs to main, or manual triggers
    if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event_name == 'pull_request' && github.base_ref == 'main') || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Ansible Environment with Molecule
        uses: ./.github/actions/setup-ansible
        with:
          python-version: '3.13.7'
          install-molecule: 'true'
          cache-key-suffix: 'molecule-tests'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Run molecule tests for network upgrade
        run: |
          cd tests/molecule-tests
          molecule test -s network-upgrade-test
        env:
          MOLECULE_NO_LOG: false
          MOLECULE_VERBOSITY: 1

      - name: Run default molecule tests
        run: |
          cd tests/molecule-tests
          molecule test -s default
        env:
          MOLECULE_NO_LOG: false

  critical-gap-tests:
    name: Critical Gap Test Suite
    runs-on: ubuntu-latest
    # Only run on schedule, manual trigger with critical-gaps-only, or manual comprehensive
    if: github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && (inputs.test_level == 'critical-gaps-only' || inputs.test_level == 'comprehensive'))
    strategy:
      matrix:
        python-version: ["3.13.7"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Ansible Environment
        uses: ./.github/actions/setup-ansible
        with:
          python-version: ${{ matrix.python-version }}
          cache-key-suffix: 'critical-gap-tests'

      - name: Install additional test dependencies
        run: |
          pip install psutil

      - name: Create reports directory
        run: mkdir -p tests/reports

      - name: Run Critical Gap Test Suite
        run: |
          chmod +x tests/critical-gaps/run-all-critical-gap-tests.sh
          # Set timeout to prevent infinite execution
          timeout 600 tests/critical-gaps/run-all-critical-gap-tests.sh || true

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: critical-gap-test-results-${{ matrix.python-version }}
          path: |
            tests/reports/critical-gap-*.json
            tests/reports/critical-gap-*.log
            tests/reports/*-coverage-*.json
          retention-days: 30

      - name: Display test summary
        if: always()
        run: |
          echo "=== CRITICAL GAP TEST SUMMARY ==="
          if [ -f tests/reports/critical-gap-test-summary-*.json ]; then
            latest_summary=$(ls -t tests/reports/critical-gap-test-summary-*.json | head -1)
            echo "📊 Latest test summary: $latest_summary"

            # Extract key metrics using jq if available
            if command -v jq &> /dev/null; then
              echo "📈 Success Rate: $(jq -r '.test_execution_summary.success_rate_percent' "$latest_summary")%"
              echo "✅ Passed Tests: $(jq -r '.test_execution_summary.passed_tests' "$latest_summary")"
              echo "❌ Failed Tests: $(jq -r '.test_execution_summary.failed_tests' "$latest_summary")"
              echo "💰 Business Risk Addressed: $(jq -r '.business_impact.total_risk_addressed' "$latest_summary")"
              echo "🚀 Production Readiness: $(jq -r '.business_impact.production_readiness' "$latest_summary")"
            else
              echo "📄 Raw summary:"
              cat "$latest_summary"
            fi
          else
            echo "⚠️ No test summary found - tests may not have completed successfully"
            ls -la tests/reports/ || echo "Reports directory not found"
          fi

  comprehensive-test-suite:
    name: Comprehensive Test Suite (All 14 Tests)
    runs-on: ubuntu-latest
    timeout-minutes: 30
    # Only run on schedule or manual trigger with comprehensive level
    if: github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && inputs.test_level == 'comprehensive')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Ansible Environment
        uses: ./.github/actions/setup-ansible
        with:
          python-version: '3.13.7'
          cache-key-suffix: 'comprehensive-tests'

      - name: Install additional test dependencies
        run: |
          pip install psutil

      - name: Create results directory
        run: mkdir -p tests/results

      - name: Run comprehensive test suite
        run: |
          cd tests
          chmod +x run-all-tests.sh
          ./run-all-tests.sh

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: comprehensive-test-results-${{ github.run_number }}
          path: |
            tests/results/test_report_*.txt
            tests/results/*_*.log
          retention-days: 30

      - name: Fail if any tests failed
        run: |
          # Check if comprehensive tests passed by checking that no tests failed
          if grep -q "Failed: 0" tests/results/test_report_*.txt; then
            passed_count=$(grep -o "Passed: [0-9]*" tests/results/test_report_*.txt | cut -d' ' -f2)
            echo "✅ All $passed_count test suites passed successfully"
          else
            echo "❌ Comprehensive test suite failed"
            echo "Test report contents:"
            cat tests/results/test_report_*.txt || echo "No test report found"
            exit 1
          fi

  call-container-build:
    name: Build and Push Production Container Image
    needs: [lint-and-syntax, unit-tests, integration-tests, security-scan, mock-device-tests, container-tests]
    # Only build production container on main branch pushes after all tests pass
    if: |
      github.event_name == 'push' &&
      github.ref == 'refs/heads/main' &&
      (always() && !failure() && !cancelled())
    uses: ./.github/workflows/build-container.yml
    with:
      push_image: true
      build_type: 'fast-x64'
    secrets: inherit