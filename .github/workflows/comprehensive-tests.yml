---
name: Comprehensive Test Suites

on:
  schedule:
    # Run comprehensive tests weekly on Sundays at 3:00 AM UTC
    - cron: '0 3 * * 0'
  workflow_dispatch:
    inputs:
      test_level:
        description: 'Test level to run'
        required: false
        default: 'standard'
        type: choice
        options:
        - 'standard'
        - 'comprehensive'
        - 'critical-gaps-only'

permissions:
  contents: read

jobs:
  critical-gap-tests:
    name: Critical Gap Test Suite
    runs-on: ubuntu-latest
    # Only run on schedule, manual trigger with critical-gaps-only, or manual comprehensive
    if: github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && (inputs.test_level == 'critical-gaps-only' || inputs.test_level == 'comprehensive'))
    strategy:
      matrix:
        python-version: ["3.13.7"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade ansible psutil
          pip install yamllint ansible-lint

      - name: Install Ansible collections
        run: |
          ansible-galaxy collection install \
            -r ansible-content/collections/requirements.yml \
            --force --ignore-certs

      - name: Create reports directory
        run: mkdir -p tests/reports

      - name: Run Critical Gap Test Suite
        run: |
          chmod +x tests/critical-gaps/run-all-critical-gap-tests.sh
          # Set timeout to prevent infinite execution
          timeout 600 tests/critical-gaps/run-all-critical-gap-tests.sh || true

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: critical-gap-test-results-${{ matrix.python-version }}
          path: |
            tests/reports/critical-gap-*.json
            tests/reports/critical-gap-*.log
            tests/reports/*-coverage-*.json
          retention-days: 30

      - name: Display test summary
        if: always()
        run: |
          echo "=== CRITICAL GAP TEST SUMMARY ==="
          if [ -f tests/reports/critical-gap-test-summary-*.json ]; then
            latest_summary=$(ls -t tests/reports/critical-gap-test-summary-*.json | head -1)
            echo "📊 Latest test summary: $latest_summary"

            # Extract key metrics using jq if available
            if command -v jq &> /dev/null; then
              echo "📈 Success Rate: $(jq -r '.test_execution_summary.success_rate_percent' "$latest_summary")%"
              echo "✅ Passed Tests: $(jq -r '.test_execution_summary.passed_tests' "$latest_summary")"
              echo "❌ Failed Tests: $(jq -r '.test_execution_summary.failed_tests' "$latest_summary")"
              echo "💰 Business Risk Addressed: $(jq -r '.business_impact.total_risk_addressed' "$latest_summary")"
              echo "🚀 Production Readiness: $(jq -r '.business_impact.production_readiness' "$latest_summary")"
            else
              echo "📄 Raw summary:"
              cat "$latest_summary"
            fi
          else
            echo "⚠️ No test summary found - tests may not have completed successfully"
            ls -la tests/reports/ || echo "Reports directory not found"
          fi

  comprehensive-test-suite:
    name: Comprehensive Test Suite (All 14 Tests)
    runs-on: ubuntu-latest
    timeout-minutes: 30
    # Only run on schedule or manual trigger with comprehensive level
    if: github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && inputs.test_level == 'comprehensive')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13.7'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade ansible psutil
          pip install yamllint ansible-lint

      - name: Install Ansible collections
        run: |
          ansible-galaxy collection install \
            -r ansible-content/collections/requirements.yml \
            --force --ignore-certs

      - name: Create results directory
        run: mkdir -p tests/results

      - name: Run comprehensive test suite
        run: |
          cd tests
          chmod +x run-all-tests.sh
          ./run-all-tests.sh

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: comprehensive-test-results-${{ github.run_number }}
          path: |
            tests/results/test_report_*.txt
            tests/results/*_*.log
          retention-days: 30

      - name: Fail if any tests failed
        run: |
          # Check if comprehensive tests passed by checking passed count and success rate
          if grep -q "Passed: 14" tests/results/test_report_*.txt && grep -q "Failed: 0" tests/results/test_report_*.txt; then
            echo "✅ All 14 test suites passed successfully"
          else
            echo "❌ Comprehensive test suite failed"
            echo "Test report contents:"
            cat tests/results/test_report_*.txt || echo "No test report found"
            exit 1
          fi