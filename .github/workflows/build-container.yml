---
name: Build Container Image

# Concurrency control disabled for workflow_call to prevent deadlocks with calling workflows
# Manual/release triggers don't need concurrency control due to infrequent usage
# concurrency:
#   group: ${{ github.workflow }}-${{ github.ref }}
#   cancel-in-progress: true

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      push_image:
        description: 'Push image to registry'
        required: false
        default: 'true'
        type: boolean
      build_type:
        description: 'Container build type'
        required: false
        default: 'fast-x64'
        type: choice
        options:
        - 'fast-x64'
        - 'arm64-only'
        - 'multi-platform'
      platforms:
        description: 'Custom platforms (advanced users only)'
        required: false
        default: ''
        type: string
      image_tag:
        description: 'Custom image tag (leave empty for auto)'
        required: false
        type: string
  
  workflow_call:
    inputs:
      push_image:
        description: 'Push image to registry'
        required: false
        default: true
        type: boolean
      build_type:
        description: 'Container build type'
        required: false
        default: 'fast-x64'
        type: string
      platforms:
        description: 'Custom platforms override'
        required: false
        default: ''
        type: string
      image_tag:
        description: 'Custom image tag'
        required: false
        type: string
    outputs:
      image-digest:
        description: "Container image digest"
        value: ${{ jobs.build-container.outputs.digest }}
      image-tags:
        description: "Container image tags"
        value: ${{ jobs.build-container.outputs.tags }}

permissions:
  contents: read
  packages: write

jobs:
  build-container:
    name: Build Container Image
    runs-on: ubuntu-latest
    outputs:
      digest: ${{ steps.build.outputs.digest }}
      tags: ${{ steps.meta.outputs.tags }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch,enable=${{ github.ref == 'refs/heads/main' }}
            type=ref,event=pr,enable=false
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,prefix={{branch}}-,format=short,enable=${{ github.event_name != 'workflow_dispatch' }}
            type=raw,value=${{ inputs.image_tag }},enable=${{ inputs.image_tag != '' }}
          labels: |
            org.opencontainers.image.title=Network Device Upgrade System
            org.opencontainers.image.description=Automated network device firmware upgrade system using Ansible. Supports Cisco NX-OS/IOS-XE, FortiOS, Opengear, and Metamako with comprehensive validation and rollback.
            org.opencontainers.image.vendor=Network Operations
            org.opencontainers.image.documentation=https://github.com/${{ github.repository }}/tree/main/docs
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.licenses=MIT
            org.opencontainers.image.url=https://github.com/${{ github.repository }}
          annotations: |
            org.opencontainers.image.description=Automated network device firmware upgrade system using Ansible. Supports Cisco NX-OS/IOS-XE, FortiOS, Opengear, and Metamako with comprehensive validation and rollback.
            org.opencontainers.image.title=Network Device Upgrade System
          flavor: |
            latest=auto

      - name: Verify metadata generation
        run: |
          echo "üè∑Ô∏è  Generated tags:"
          echo '${{ steps.meta.outputs.tags }}' | sed 's/^/  - /'
          echo ""
          echo "üè∑Ô∏è  Generated labels:"
          echo '${{ steps.meta.outputs.labels }}' | sed 's/^/  /'
          echo ""
          echo "üìù Generated annotations:"
          echo '${{ steps.meta.outputs.annotations }}' | sed 's/^/  /'
          echo ""
          echo "üìã Metadata JSON:"
          echo '${{ steps.meta.outputs.json }}' | jq '.'

      - name: Determine build platforms
        id: platforms
        run: |
          BUILD_TYPE="${{ inputs.build_type || 'fast-x64' }}"
          CUSTOM_PLATFORMS="${{ inputs.platforms }}"

          # Use custom platforms if provided, otherwise map build_type
          if [ -n "$CUSTOM_PLATFORMS" ]; then
            PLATFORMS="$CUSTOM_PLATFORMS"
            echo "Using custom platforms: $PLATFORMS"
          else
            case "$BUILD_TYPE" in
              "fast-x64")
                PLATFORMS="linux/amd64"
                echo "üöÄ Fast x64-only build selected (faster for development/testing)"
                ;;
              "arm64-only")
                PLATFORMS="linux/arm64"
                echo "üîß ARM64-only build selected (for ARM-based systems)"
                ;;
              "multi-platform")
                PLATFORMS="linux/amd64,linux/arm64"
                echo "üåç Multi-platform build selected (production deployment)"
                ;;
              *)
                PLATFORMS="linux/amd64"
                echo "‚ö†Ô∏è  Unknown build type '$BUILD_TYPE', defaulting to x64-only"
                ;;
            esac
          fi

          echo "platforms=$PLATFORMS" >> $GITHUB_OUTPUT
          echo "Final platforms: $PLATFORMS"

      - name: Build and push container image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: ${{ steps.platforms.outputs.platforms }}
          push: ${{ inputs.push_image }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false
          sbom: false
          build-args: |
            BUILDTIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
            REVISION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}

      - name: Verify container metadata
        if: inputs.push_image
        run: |
          echo "üîç Verifying container metadata was applied correctly..."

          # Get the first tag for inspection
          IMAGE_TAG=$(echo '${{ steps.meta.outputs.tags }}' | head -1)
          echo "Target image: $IMAGE_TAG"

          # Pull the image for local inspection (required for multi-platform builds)
          echo "üì• Pulling image for verification..."
          docker pull "$IMAGE_TAG"

          # Verify image was pulled successfully
          if ! docker image inspect "$IMAGE_TAG" >/dev/null 2>&1; then
            echo "‚ùå ERROR: Failed to pull image for verification"
            exit 1
          fi

          # Inspect image labels
          echo "üìã Container Labels:"
          docker inspect "$IMAGE_TAG" --format='{{range $k, $v := .Config.Labels}}{{printf "%s=%s\n" $k $v}}{{end}}' | sort

          # Verify key labels exist
          DESCRIPTION=$(docker inspect "$IMAGE_TAG" --format='{{index .Config.Labels "org.opencontainers.image.description"}}')
          TITLE=$(docker inspect "$IMAGE_TAG" --format='{{index .Config.Labels "org.opencontainers.image.title"}}')

          if [ -z "$DESCRIPTION" ] || [ "$DESCRIPTION" = "<no value>" ]; then
            echo "‚ùå ERROR: Description label missing or empty"
            exit 1
          fi

          if [ -z "$TITLE" ] || [ "$TITLE" = "<no value>" ]; then
            echo "‚ùå ERROR: Title label missing or empty"
            exit 1
          fi

          echo "‚úÖ SUCCESS: All required metadata labels are present"
          echo "üìÑ Description: $DESCRIPTION"
          echo "üè∑Ô∏è  Title: $TITLE"

          # Display all labels for GitHub Container Registry troubleshooting
          echo "üîç All container labels:"
          docker inspect "$IMAGE_TAG" --format='{{range $k, $v := .Config.Labels}}{{printf "%s=%s\n" $k $v}}{{end}}' | grep "org.opencontainers.image" | sort

      - name: Generate container SBOM
        if: inputs.push_image && github.event_name != 'pull_request'
        uses: anchore/sbom-action@v0
        with:
          image: ${{ fromJSON(steps.meta.outputs.json).tags[0] }}
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Upload SBOM artifact
        if: inputs.push_image && github.event_name != 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: container-sbom-${{ github.run_number }}
          path: sbom.spdx.json

      - name: Test container functionality
        if: inputs.push_image
        run: |
          echo "Testing container functionality..."

          # Get the first tag for testing
          IMAGE_TAG=$(echo '${{ steps.meta.outputs.tags }}' | head -1)

          echo "Testing container with image: $IMAGE_TAG"

          # Test syntax-check (default command)
          echo "::group::Testing container syntax-check"
          docker run --rm "$IMAGE_TAG"
          echo "::endgroup::"

          # Test help command and verify comprehensive content
          echo "::group::Testing container help comprehensiveness"
          help_output=$(docker run --rm "$IMAGE_TAG" help)
          echo "$help_output"

          # Verify help contains key sections
          echo "Verifying help contains all required sections..."
          if ! echo "$help_output" | grep -q "ENVIRONMENT VARIABLES"; then
            echo "‚ùå Help missing ENVIRONMENT VARIABLES section"
            exit 1
          fi
          if ! echo "$help_output" | grep -q "SSH Key Authentication"; then
            echo "‚ùå Help missing SSH Key Authentication section"
            exit 1
          fi
          if ! echo "$help_output" | grep -q "API Token Authentication"; then
            echo "‚ùå Help missing API Token Authentication section"
            exit 1
          fi
          if ! echo "$help_output" | grep -q "AUTHENTICATION PRIORITY ORDER"; then
            echo "‚ùå Help missing AUTHENTICATION PRIORITY ORDER section"
            exit 1
          fi
          if ! echo "$help_output" | grep -q "PLATFORM SUPPORT"; then
            echo "‚ùå Help missing PLATFORM SUPPORT section"
            exit 1
          fi
          if ! echo "$help_output" | grep -q "TROUBLESHOOTING"; then
            echo "‚ùå Help missing TROUBLESHOOTING section"
            exit 1
          fi
          if ! echo "$help_output" | grep -q "SECURITY BEST PRACTICES"; then
            echo "‚ùå Help missing SECURITY BEST PRACTICES section"
            exit 1
          fi
          echo "‚úÖ Help contains all required comprehensive sections"
          echo "::endgroup::"

          # Test version information
          echo "::group::Testing container environment"
          docker run --rm "$IMAGE_TAG" shell -c "ansible --version && python3 --version"
          echo "::endgroup::"

          # Test container test suite
          echo "::group::Testing container test command"
          docker run --rm "$IMAGE_TAG" test
          echo "::endgroup::"

          # Test all commands are available
          echo "::group::Testing all container commands"

          # Test syntax-check command
          echo "Testing command: syntax-check"
          docker run --rm "$IMAGE_TAG" syntax-check || {
            echo "‚ùå Command syntax-check failed"
            exit 1
          }

          # Test dry-run command with required variables
          echo "Testing command: dry-run"
          docker run --rm \
            -e TARGET_FIRMWARE="test-firmware.bin" \
            -e TARGET_HOSTS="test-device" \
            "$IMAGE_TAG" dry-run || {
            echo "‚ùå Command dry-run failed"
            exit 1
          }

          # Test test command
          echo "Testing command: test"
          docker run --rm "$IMAGE_TAG" test || {
            echo "‚ùå Command test failed"
            exit 1
          }

          echo "::endgroup::"

          echo "‚úÖ Container functionality tests completed successfully"

      - name: Test podman compatibility
        if: inputs.push_image && runner.os == 'Linux'
        run: |
          echo "Testing podman compatibility..."

          # Install podman 4.9.4 for compatibility testing
          echo "Installing Podman 4.9.4..."
          sudo apt-get update

          # Install dependencies
          sudo apt-get install -y curl wget gpg lsb-release

          # Add Kubic repository for latest Podman
          # Use Ubuntu 22.04 repo for Ubuntu 24.04 compatibility since 24.04 specific repo may not be available
          UBUNTU_VERSION=$(lsb_release -rs)
          if [ "$UBUNTU_VERSION" = "24.04" ]; then
            REPO_VERSION="22.04"
          else
            REPO_VERSION="$UBUNTU_VERSION"
          fi

          echo "deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_${REPO_VERSION}/ /" | sudo tee /etc/apt/sources.list.d/devel:kubic:libcontainers:stable.list
          curl -fsSL "https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_${REPO_VERSION}/Release.key" | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/kubic-libcontainers.gpg > /dev/null

          sudo apt-get update
          sudo apt-get install -y podman

          # Verify Podman version
          podman --version
          echo "‚úÖ Podman installation completed"

          # Get the first tag for testing
          IMAGE_TAG=$(echo '${{ steps.meta.outputs.tags }}' | head -1)

          # Wait for manifest list to propagate
          echo "Waiting for multi-architecture manifest to propagate..."
          sleep 10
          
          echo "::group::Testing with podman (rootless simulation)"
          # Test manifest inspection first
          echo "Inspecting image manifest with podman..."
          podman manifest inspect "$IMAGE_TAG" || echo "‚ö†Ô∏è  Manifest inspect failed, trying direct run..."

          # Test podman pull and run
          echo "Testing podman pull and run..."
          if ! podman run --rm "$IMAGE_TAG"; then
            echo "‚ö†Ô∏è  Multi-arch manifest run failed, trying platform-specific..."
            podman run --rm --platform linux/amd64 "$IMAGE_TAG"
          fi
          echo "::endgroup::"
          
          echo "‚úÖ Podman compatibility test completed successfully"

      - name: Display build results
        run: |
          echo "üéâ Container build completed successfully!"
          echo "üìã Build Details:"
          echo "  - Build type: ${{ inputs.build_type || 'fast-x64' }}"
          echo "  - Platforms: ${{ steps.platforms.outputs.platforms }}"
          echo "  - Push to registry: ${{ inputs.push_image }}"
          echo "  - Image digest: ${{ steps.build.outputs.digest }}"
          echo ""
          echo "üè∑Ô∏è Image Tags:"
          echo '${{ steps.meta.outputs.tags }}' | sed 's/^/  - /'
          echo ""
          if [ "${{ inputs.push_image }}" = "true" ]; then
            echo "üì¶ Usage Examples:"
            IMAGE_TAG=$(echo '${{ steps.meta.outputs.tags }}' | head -1)
            echo "  # Docker"
            echo "  docker pull $IMAGE_TAG"
            echo "  docker run --rm $IMAGE_TAG help"
            echo ""
            echo "  # Podman (RHEL8/9 compatible)"
            echo "  podman pull $IMAGE_TAG"
            echo "  podman run --rm $IMAGE_TAG"
          fi