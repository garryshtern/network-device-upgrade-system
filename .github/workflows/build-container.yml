---
name: Build Container Image

on:
  workflow_dispatch:
    inputs:
      push_image:
        description: 'Push image to registry'
        required: false
        default: 'true'
        type: boolean
      platforms:
        description: 'Target platforms'
        required: false
        default: 'linux/amd64'
        type: choice
        options:
        - 'linux/amd64'
        - 'linux/amd64,linux/arm64'
      image_tag:
        description: 'Custom image tag (leave empty for auto)'
        required: false
        type: string
  
  workflow_call:
    inputs:
      push_image:
        description: 'Push image to registry'
        required: false
        default: true
        type: boolean
      platforms:
        description: 'Target platforms'
        required: false
        default: 'linux/amd64'
        type: string
      image_tag:
        description: 'Custom image tag'
        required: false
        type: string
    outputs:
      image-digest:
        description: "Container image digest"
        value: ${{ jobs.build-container.outputs.digest }}
      image-tags:
        description: "Container image tags"
        value: ${{ jobs.build-container.outputs.tags }}

permissions:
  contents: read
  packages: write

jobs:
  build-container:
    name: Build Container Image
    runs-on: ubuntu-latest
    outputs:
      digest: ${{ steps.build.outputs.digest }}
      tags: ${{ steps.meta.outputs.tags }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,prefix={{branch}}-,format=short
            type=raw,value=${{ inputs.image_tag }},enable=${{ inputs.image_tag != '' }}
          labels: |
            org.opencontainers.image.title=Network Device Upgrade System
            org.opencontainers.image.description=Automated network device firmware upgrade system using Ansible
            org.opencontainers.image.vendor=Network Operations
            org.opencontainers.image.documentation=https://github.com/${{ github.repository }}
            org.opencontainers.image.source=https://github.com/${{ github.repository }}

      - name: Build and push container image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: ${{ inputs.platforms || 'linux/amd64' }}
          push: ${{ inputs.push_image }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDTIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
            REVISION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}

      - name: Generate container SBOM
        if: inputs.push_image && github.event_name != 'pull_request'
        uses: anchore/sbom-action@v0
        with:
          image: ${{ fromJSON(steps.meta.outputs.json).tags[0] }}
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Upload SBOM artifact
        if: inputs.push_image && github.event_name != 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: container-sbom-${{ github.run_number }}
          path: sbom.spdx.json

      - name: Test container functionality
        if: inputs.push_image
        run: |
          echo "Testing container functionality..."
          
          # Get the first tag for testing
          IMAGE_TAG=$(echo '${{ steps.meta.outputs.tags }}' | head -1)
          
          echo "Testing container with image: $IMAGE_TAG"
          
          # Test syntax-check (default command)
          echo "::group::Testing container syntax-check"
          docker run --rm "$IMAGE_TAG"
          echo "::endgroup::"
          
          # Test help command
          echo "::group::Testing container help"
          docker run --rm "$IMAGE_TAG" help
          echo "::endgroup::"
          
          # Test version information
          echo "::group::Testing container environment"
          docker run --rm "$IMAGE_TAG" shell -c "ansible --version && python3 --version"
          echo "::endgroup::"
          
          echo "‚úÖ Container functionality tests completed successfully"

      - name: Test podman compatibility
        if: inputs.push_image && runner.os == 'Linux'
        run: |
          echo "Testing podman compatibility..."

          # Install podman 4.9.4 for compatibility testing
          echo "Installing Podman 4.9.4..."
          sudo apt-get update

          # Install dependencies
          sudo apt-get install -y curl wget gpg lsb-release

          # Add Kubic repository for latest Podman
          # Use Ubuntu 22.04 repo for Ubuntu 24.04 compatibility since 24.04 specific repo may not be available
          UBUNTU_VERSION=$(lsb_release -rs)
          if [ "$UBUNTU_VERSION" = "24.04" ]; then
            REPO_VERSION="22.04"
          else
            REPO_VERSION="$UBUNTU_VERSION"
          fi

          echo "deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_${REPO_VERSION}/ /" | sudo tee /etc/apt/sources.list.d/devel:kubic:libcontainers:stable.list
          curl -fsSL "https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_${REPO_VERSION}/Release.key" | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/kubic-libcontainers.gpg > /dev/null

          sudo apt-get update
          sudo apt-get install -y podman

          # Verify Podman version
          podman --version
          echo "‚úÖ Podman installation completed"

          # Get the first tag for testing
          IMAGE_TAG=$(echo '${{ steps.meta.outputs.tags }}' | head -1)

          # Wait for manifest list to propagate
          echo "Waiting for multi-architecture manifest to propagate..."
          sleep 10
          
          echo "::group::Testing with podman (rootless simulation)"
          # Test manifest inspection first
          echo "Inspecting image manifest with podman..."
          podman manifest inspect "$IMAGE_TAG" || echo "‚ö†Ô∏è  Manifest inspect failed, trying direct run..."

          # Test podman pull and run
          echo "Testing podman pull and run..."
          if ! podman run --rm "$IMAGE_TAG"; then
            echo "‚ö†Ô∏è  Multi-arch manifest run failed, trying platform-specific..."
            podman run --rm --platform linux/amd64 "$IMAGE_TAG"
          fi
          echo "::endgroup::"
          
          echo "‚úÖ Podman compatibility test completed successfully"

      - name: Display build results
        run: |
          echo "üéâ Container build completed successfully!"
          echo "üìã Build Details:"
          echo "  - Platforms: ${{ inputs.platforms || 'linux/amd64' }}"
          echo "  - Push to registry: ${{ inputs.push_image }}"
          echo "  - Image digest: ${{ steps.build.outputs.digest }}"
          echo ""
          echo "üè∑Ô∏è Image Tags:"
          echo '${{ steps.meta.outputs.tags }}' | sed 's/^/  - /'
          echo ""
          if [ "${{ inputs.push_image }}" = "true" ]; then
            echo "üì¶ Usage Examples:"
            IMAGE_TAG=$(echo '${{ steps.meta.outputs.tags }}' | head -1)
            echo "  # Docker"
            echo "  docker pull $IMAGE_TAG"
            echo "  docker run --rm $IMAGE_TAG help"
            echo ""
            echo "  # Podman (RHEL8/9 compatible)"
            echo "  podman pull $IMAGE_TAG"
            echo "  podman run --rm $IMAGE_TAG"
          fi