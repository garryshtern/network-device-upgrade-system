---
name: Build Container Image

# Concurrency control disabled for workflow_call to prevent deadlocks with calling workflows
# Manual/release triggers don't need concurrency control due to infrequent usage
# concurrency:
#   group: ${{ github.workflow }}-${{ github.ref }}
#   cancel-in-progress: true

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      push_image:
        description: 'Push image to registry'
        required: false
        default: 'true'
        type: boolean
      build_type:
        description: 'Container build type'
        required: false
        default: 'fast-x64'
        type: choice
        options:
        - 'fast-x64'
        - 'arm64-only'
        - 'multi-platform'
      platforms:
        description: 'Custom platforms (advanced users only)'
        required: false
        default: ''
        type: string
      image_tag:
        description: 'Custom image tag (leave empty for auto)'
        required: false
        type: string
  
  workflow_call:
    inputs:
      push_image:
        description: 'Push image to registry'
        required: false
        default: true
        type: boolean
      build_type:
        description: 'Container build type'
        required: false
        default: 'fast-x64'
        type: string
      platforms:
        description: 'Custom platforms override'
        required: false
        default: ''
        type: string
      image_tag:
        description: 'Custom image tag'
        required: false
        type: string
    outputs:
      image-digest:
        description: "Container image digest"
        value: ${{ jobs.build-container.outputs.digest }}
      image-tags:
        description: "Container image tags"
        value: ${{ jobs.build-container.outputs.tags }}

permissions:
  contents: read
  packages: write

jobs:
  build-container:
    name: Build Container Image (${{ matrix.platform.name }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        platform:
          - name: "AMD64"
            platforms: "linux/amd64"
            suffix: "amd64"
            primary: true
          - name: "ARM64"
            platforms: "linux/arm64"
            suffix: "arm64"
            primary: false
          - name: "Multi-Platform"
            platforms: "linux/amd64,linux/arm64"
            suffix: "multi"
            primary: false
    outputs:
      digest: ${{ steps.build.outputs.digest }}
      tags: ${{ steps.meta.outputs.tags }}
      primary-digest: ${{ matrix.platform.primary && steps.build.outputs.digest || '' }}
      primary-tags: ${{ matrix.platform.primary && steps.meta.outputs.tags || '' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch,enable=${{ github.ref == 'refs/heads/main' && matrix.platform.primary }},suffix=-${{ matrix.platform.suffix }}
            type=ref,event=branch,enable=${{ github.ref == 'refs/heads/main' && matrix.platform.primary }}
            type=ref,event=pr,enable=false
            type=semver,pattern={{version}},suffix=-${{ matrix.platform.suffix }}
            type=semver,pattern={{version}},enable=${{ matrix.platform.primary }}
            type=semver,pattern={{major}}.{{minor}},suffix=-${{ matrix.platform.suffix }}
            type=semver,pattern={{major}}.{{minor}},enable=${{ matrix.platform.primary }}
            type=raw,value=latest-${{ matrix.platform.suffix }},enable=${{ github.ref == 'refs/heads/main' }}
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' && matrix.platform.primary }}
            type=sha,prefix={{branch}}-${{ matrix.platform.suffix }}-,format=short,enable=${{ github.event_name != 'workflow_dispatch' }}
            type=raw,value=${{ inputs.image_tag }}-${{ matrix.platform.suffix }},enable=${{ inputs.image_tag != '' }}
          labels: |
            org.opencontainers.image.title=Network Device Upgrade System
            org.opencontainers.image.description=Automated network device firmware upgrade system using Ansible. Supports Cisco NX-OS/IOS-XE, FortiOS, Opengear, and Metamako with comprehensive validation and rollback.
            org.opencontainers.image.vendor=Network Operations
            org.opencontainers.image.documentation=https://github.com/${{ github.repository }}/tree/main/docs
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.licenses=MIT
            org.opencontainers.image.url=https://github.com/${{ github.repository }}
          annotations: |
            org.opencontainers.image.description=Automated network device firmware upgrade system using Ansible. Supports Cisco NX-OS/IOS-XE, FortiOS, Opengear, and Metamako with comprehensive validation and rollback.
            org.opencontainers.image.title=Network Device Upgrade System
          flavor: |
            latest=auto

      - name: Verify metadata generation
        run: |
          echo "üè∑Ô∏è  Generated tags:"
          echo '${{ steps.meta.outputs.tags }}' | sed 's/^/  - /'
          echo ""
          echo "üè∑Ô∏è  Generated labels:"
          echo '${{ steps.meta.outputs.labels }}' | sed 's/^/  /'
          echo ""
          echo "üìù Generated annotations:"
          echo '${{ steps.meta.outputs.annotations }}' | sed 's/^/  /'
          echo ""
          echo "üìã Metadata JSON:"
          echo '${{ steps.meta.outputs.json }}' | jq '.'

      - name: Set platform configuration
        id: platforms
        run: |
          PLATFORMS="${{ matrix.platform.platforms }}"
          echo "üèóÔ∏è  Building for platform: ${{ matrix.platform.name }}"
          echo "üì¶ Target platforms: $PLATFORMS"
          echo "platforms=$PLATFORMS" >> $GITHUB_OUTPUT

      - name: Build and push container image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: ${{ steps.platforms.outputs.platforms }}
          push: ${{ inputs.push_image }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false
          sbom: false
          build-args: |
            BUILDTIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
            REVISION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}

      - name: Verify container metadata
        if: inputs.push_image
        run: |
          echo "üîç Verifying container metadata was applied correctly..."

          # Get the first tag for inspection
          IMAGE_TAG=$(echo '${{ steps.meta.outputs.tags }}' | head -1)
          echo "Target image: $IMAGE_TAG"

          # Pull the image for local inspection (required for multi-platform builds)
          echo "üì• Pulling image for verification..."
          docker pull "$IMAGE_TAG"

          # Verify image was pulled successfully
          if ! docker image inspect "$IMAGE_TAG" >/dev/null 2>&1; then
            echo "‚ùå ERROR: Failed to pull image for verification"
            exit 1
          fi

          # Inspect image labels
          echo "üìã Container Labels:"
          docker inspect "$IMAGE_TAG" --format='{{range $k, $v := .Config.Labels}}{{printf "%s=%s\n" $k $v}}{{end}}' | sort

          # Verify key labels exist
          DESCRIPTION=$(docker inspect "$IMAGE_TAG" --format='{{index .Config.Labels "org.opencontainers.image.description"}}')
          TITLE=$(docker inspect "$IMAGE_TAG" --format='{{index .Config.Labels "org.opencontainers.image.title"}}')

          if [ -z "$DESCRIPTION" ] || [ "$DESCRIPTION" = "<no value>" ]; then
            echo "‚ùå ERROR: Description label missing or empty"
            exit 1
          fi

          if [ -z "$TITLE" ] || [ "$TITLE" = "<no value>" ]; then
            echo "‚ùå ERROR: Title label missing or empty"
            exit 1
          fi

          echo "‚úÖ SUCCESS: All required metadata labels are present"
          echo "üìÑ Description: $DESCRIPTION"
          echo "üè∑Ô∏è  Title: $TITLE"

          # Display all labels for GitHub Container Registry troubleshooting
          echo "üîç All container labels:"
          docker inspect "$IMAGE_TAG" --format='{{range $k, $v := .Config.Labels}}{{printf "%s=%s\n" $k $v}}{{end}}' | grep "org.opencontainers.image" | sort

      - name: Generate container SBOM
        if: inputs.push_image && github.event_name != 'pull_request'
        uses: anchore/sbom-action@v0
        with:
          image: ${{ fromJSON(steps.meta.outputs.json).tags[0] }}
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Upload SBOM artifact
        if: inputs.push_image && github.event_name != 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: container-sbom-${{ matrix.platform.suffix }}-${{ github.run_number }}
          path: sbom.spdx.json

      - name: Test container functionality
        if: inputs.push_image
        run: |
          echo "Testing container functionality for ${{ matrix.platform.name }}..."

          # Get the first tag for testing
          IMAGE_TAG=$(echo '${{ steps.meta.outputs.tags }}' | head -1)

          echo "Testing ${{ matrix.platform.name }} container with image: $IMAGE_TAG"
          echo "Platform configuration: ${{ matrix.platform.platforms }}"

          # Skip cross-platform execution for ARM64 on AMD64 hosts to avoid exec format errors
          if [[ "${{ matrix.platform.platforms }}" == "linux/arm64" ]]; then
            echo "‚ö†Ô∏è  Skipping direct execution testing for ARM64 on AMD64 host"
            echo "‚úÖ ARM64 container build completed successfully - execution testing skipped"
          else
            # Test syntax-check (default command) for compatible platforms
            echo "::group::Testing container syntax-check"
            docker run --rm "$IMAGE_TAG"
            echo "::endgroup::"
          fi

          # Test help command and verify comprehensive content (skip for ARM64)
          if [[ "${{ matrix.platform.platforms }}" != "linux/arm64" ]]; then
            echo "::group::Testing container help comprehensiveness"
            help_output=$(docker run --rm "$IMAGE_TAG" help)
            echo "$help_output"

            # Verify help contains key sections
            echo "Verifying help contains all required sections..."
            if ! echo "$help_output" | grep -q "ENVIRONMENT VARIABLES"; then
              echo "‚ùå Help missing ENVIRONMENT VARIABLES section"
              exit 1
            fi
            if ! echo "$help_output" | grep -q "SSH Key Authentication"; then
              echo "‚ùå Help missing SSH Key Authentication section"
              exit 1
            fi
            if ! echo "$help_output" | grep -q "API Token Authentication"; then
              echo "‚ùå Help missing API Token Authentication section"
              exit 1
            fi
            if ! echo "$help_output" | grep -q "AUTHENTICATION PRIORITY ORDER"; then
              echo "‚ùå Help missing AUTHENTICATION PRIORITY ORDER section"
              exit 1
            fi
            if ! echo "$help_output" | grep -q "PLATFORM SUPPORT"; then
              echo "‚ùå Help missing PLATFORM SUPPORT section"
              exit 1
            fi
            if ! echo "$help_output" | grep -q "TROUBLESHOOTING"; then
              echo "‚ùå Help missing TROUBLESHOOTING section"
              exit 1
            fi
            if ! echo "$help_output" | grep -q "SECURITY BEST PRACTICES"; then
              echo "‚ùå Help missing SECURITY BEST PRACTICES section"
              exit 1
            fi
            echo "‚úÖ Help contains all required comprehensive sections"
            echo "::endgroup::"

            # Test version information
            echo "::group::Testing container environment"
            docker run --rm "$IMAGE_TAG" shell -c "ansible --version && python3 --version"
            echo "::endgroup::"

            # Test container test suite
            echo "::group::Testing container test command"
            docker run --rm "$IMAGE_TAG" test
            echo "::endgroup::"
          else
            echo "‚ö†Ô∏è  Skipping help and environment testing for ARM64 on AMD64 host"
          fi

          # Test all commands are available (skip for ARM64)
          if [[ "${{ matrix.platform.platforms }}" != "linux/arm64" ]]; then
            echo "::group::Testing all container commands"

            # Test syntax-check command
            echo "Testing command: syntax-check"
            docker run --rm "$IMAGE_TAG" syntax-check || {
              echo "‚ùå Command syntax-check failed"
              exit 1
            }

            # Test dry-run command with required variables
            echo "Testing command: dry-run"
            docker run --rm \
              -e TARGET_FIRMWARE="test-firmware.bin" \
              -e TARGET_HOSTS="test-device" \
              "$IMAGE_TAG" dry-run || {
              echo "‚ùå Command dry-run failed"
              exit 1
            }

            # Test test command
            echo "Testing command: test"
            docker run --rm "$IMAGE_TAG" test || {
              echo "‚ùå Command test failed"
              exit 1
            }

            echo "::endgroup::"
            echo "‚úÖ Container functionality tests completed successfully"
          else
            echo "‚ö†Ô∏è  Skipping command testing for ARM64 on AMD64 host"
            echo "‚úÖ ARM64 container build and metadata validation completed"
          fi

      - name: Test podman compatibility
        if: inputs.push_image && runner.os == 'Linux' && matrix.platform.name != 'ARM64'
        run: |
          echo "Testing podman compatibility for ${{ matrix.platform.name }}..."

          # Install podman 4.9.4 for compatibility testing
          echo "Installing Podman 4.9.4..."
          sudo apt-get update

          # Install dependencies
          sudo apt-get install -y curl wget gpg lsb-release

          # Add Kubic repository for latest Podman
          # Use Ubuntu 22.04 repo for Ubuntu 24.04 compatibility since 24.04 specific repo may not be available
          UBUNTU_VERSION=$(lsb_release -rs)
          if [ "$UBUNTU_VERSION" = "24.04" ]; then
            REPO_VERSION="22.04"
          else
            REPO_VERSION="$UBUNTU_VERSION"
          fi

          echo "deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_${REPO_VERSION}/ /" | sudo tee /etc/apt/sources.list.d/devel:kubic:libcontainers:stable.list
          curl -fsSL "https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_${REPO_VERSION}/Release.key" | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/kubic-libcontainers.gpg > /dev/null

          sudo apt-get update
          sudo apt-get install -y podman

          # Verify Podman version
          podman --version
          echo "‚úÖ Podman installation completed"

          # Get the first tag for testing
          IMAGE_TAG=$(echo '${{ steps.meta.outputs.tags }}' | head -1)

          # Wait for manifest list to propagate
          echo "Waiting for multi-architecture manifest to propagate..."
          sleep 10
          
          echo "::group::Testing with podman (rootless simulation)"
          # Test manifest inspection first
          echo "Inspecting image manifest with podman..."
          podman manifest inspect "$IMAGE_TAG" || echo "‚ö†Ô∏è  Manifest inspect failed, trying direct run..."

          # Test podman pull and run
          echo "Testing podman pull and run..."
          if ! podman run --rm "$IMAGE_TAG"; then
            echo "‚ö†Ô∏è  Multi-arch manifest run failed, trying platform-specific..."
            podman run --rm --platform linux/amd64 "$IMAGE_TAG"
          fi
          echo "::endgroup::"
          
          echo "‚úÖ Podman compatibility test completed successfully"

      - name: Test ARM64 emulation compatibility
        if: inputs.push_image && matrix.platform.name == 'ARM64'
        run: |
          echo "Testing ARM64 container with emulation..."

          # Get the first tag for testing
          IMAGE_TAG=$(echo '${{ steps.meta.outputs.tags }}' | head -1)

          echo "Testing ARM64 image: $IMAGE_TAG"

          # Test ARM64 container with platform specification
          echo "::group::Testing ARM64 container with emulation"
          docker run --platform linux/arm64 --rm "$IMAGE_TAG" --version || {
            echo "‚ö†Ô∏è  ARM64 emulation test failed - expected on x86 runners"
            echo "This is normal and will work on ARM64 hosts"
          }
          echo "::endgroup::"

          echo "‚úÖ ARM64 emulation test completed"

      - name: Display build results
        run: |
          echo "üéâ ${{ matrix.platform.name }} container build completed successfully!"
          echo "üìã Build Details:"
          echo "  - Platform: ${{ matrix.platform.name }}"
          echo "  - Target platforms: ${{ matrix.platform.platforms }}"
          echo "  - Platform suffix: ${{ matrix.platform.suffix }}"
          echo "  - Primary build: ${{ matrix.platform.primary }}"
          echo "  - Push to registry: ${{ inputs.push_image }}"
          echo "  - Image digest: ${{ steps.build.outputs.digest }}"
          echo ""
          echo "üè∑Ô∏è Image Tags:"
          echo '${{ steps.meta.outputs.tags }}' | sed 's/^/  - /'
          echo ""
          if [ "${{ inputs.push_image }}" = "true" ]; then
            echo "üì¶ Usage Examples for ${{ matrix.platform.name }}:"
            IMAGE_TAG=$(echo '${{ steps.meta.outputs.tags }}' | head -1)
            echo "  # Docker"
            echo "  docker pull $IMAGE_TAG"
            if [ "${{ matrix.platform.name }}" = "Multi-Platform" ]; then
              echo "  docker run --rm $IMAGE_TAG help  # Auto-selects platform"
              echo "  docker run --platform linux/amd64 --rm $IMAGE_TAG help"
              echo "  docker run --platform linux/arm64 --rm $IMAGE_TAG help"
            else
              echo "  docker run --rm $IMAGE_TAG help"
            fi
            echo ""
            echo "  # Podman (RHEL8/9 compatible)"
            echo "  podman pull $IMAGE_TAG"
            echo "  podman run --rm $IMAGE_TAG"
          fi

  build-summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: build-container
    if: always()
    steps:
      - name: Build Results Summary
        run: |
          echo "üèóÔ∏è Multi-Platform Container Build Summary"
          echo "========================================"
          echo ""

          # Check build status for each platform
          AMD64_STATUS="${{ needs.build-container.outputs.amd64-status || 'unknown' }}"
          ARM64_STATUS="${{ needs.build-container.outputs.arm64-status || 'unknown' }}"
          MULTI_STATUS="${{ needs.build-container.outputs.multi-status || 'unknown' }}"

          echo "üìä Platform Build Results:"
          echo "  - AMD64 (x86_64): ${{ needs.build-container.result }}"
          echo "  - ARM64 (aarch64): ${{ needs.build-container.result }}"
          echo "  - Multi-Platform: ${{ needs.build-container.result }}"
          echo ""

          # Display primary build information
          if [ -n "${{ needs.build-container.outputs.primary-digest }}" ]; then
            echo "üéØ Primary Build (AMD64):"
            echo "  - Digest: ${{ needs.build-container.outputs.primary-digest }}"
            echo "  - Tags: ${{ needs.build-container.outputs.primary-tags }}"
            echo ""
          fi

          # Overall status
          if [ "${{ needs.build-container.result }}" = "success" ]; then
            echo "‚úÖ All platform builds completed successfully!"
            echo ""
            echo "üöÄ Available Images:"
            echo "  - ghcr.io/${{ github.repository }}:latest-amd64"
            echo "  - ghcr.io/${{ github.repository }}:latest-arm64"
            echo "  - ghcr.io/${{ github.repository }}:latest-multi"
            if [ "${{ github.ref }}" = "refs/heads/main" ]; then
              echo "  - ghcr.io/${{ github.repository }}:latest (primary)"
              echo "  - ghcr.io/${{ github.repository }}:main (primary)"
            fi
          else
            echo "‚ùå Some platform builds failed. Check individual job logs for details."
            exit 1
          fi