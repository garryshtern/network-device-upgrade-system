---
name: Cleanup Container Packages

# Cancel in-progress runs when a new workflow is triggered
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  workflow_dispatch:
    inputs:
      confirm_deletion:
        description: 'Type "DELETE" to confirm package cleanup'
        required: true
        type: string
      keep_latest:
        description: 'Keep latest and main tagged versions'
        required: false
        default: true
        type: boolean
      max_deletions:
        description: 'Maximum number of versions to delete (safety limit)'
        required: false
        default: '50'
        type: string
      days_to_keep:
        description: 'Keep versions newer than this many days (0 = age ignored)'
        required: false
        default: '7'
        type: string
      aggressive_sha_cleanup:
        description: 'Aggressively remove SHA-only tagged images (older than 1 day)'
        required: false
        default: false
        type: boolean
      dry_run:
        description: 'Preview deletions without actually removing packages'
        required: false
        default: false
        type: boolean
  schedule:
    # Run automatic cleanup weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'

permissions:
  packages: write
  contents: read

jobs:
  cleanup-packages:
    name: Delete Non-Release Container Versions
    runs-on: ubuntu-latest

    steps:
      - name: Validate confirmation
        run: |
          if [ "${{ github.event_name }}" = "schedule" ]; then
            echo "‚úÖ Scheduled cleanup run - auto-approved"
          elif [ "${{ github.event.inputs.confirm_deletion }}" != "DELETE" ]; then
            echo "‚ùå Confirmation failed. You must type 'DELETE' to proceed."
            exit 1
          else
            echo "‚úÖ Manual confirmation validated"
          fi

      - name: Cleanup container package versions
        run: |
          echo "üóëÔ∏è  Starting container package cleanup..."

          PACKAGE_NAME="network-device-upgrade-system"
          KEEP_LATEST="${{ github.event.inputs.keep_latest || 'true' }}"
          MAX_LIMIT="${{ github.event.inputs.max_deletions || '20' }}"
          DAYS_TO_KEEP="${{ github.event.inputs.days_to_keep || '7' }}"
          DRY_RUN="${{ github.event.inputs.dry_run || 'false' }}"
          AGGRESSIVE_SHA="${{ github.event.inputs.aggressive_sha_cleanup || 'false' }}"

          if [ "$DRY_RUN" = "true" ]; then
            echo "üîç DRY RUN MODE: Will preview deletions without removing packages"
          fi

          # Get all package versions with creation dates
          echo "üìã Fetching package versions..."
          gh api "user/packages/container/$PACKAGE_NAME/versions" \
            --jq '.[] | {id: .id, tags: .metadata.container.tags, created_at: .created_at}' > /tmp/package_versions.json

          if [ ! -s /tmp/package_versions.json ]; then
            echo "üì≠ No package versions found"
            exit 0
          fi

          echo "üì¶ Analyzing package versions..."

          # Create deletion list (exclude release versions and latest/main if requested)
          DELETED=0
          SKIPPED=0

          while read -r version_data; do
            if [ -n "$version_data" ]; then
              VERSION_ID=$(echo "$version_data" | jq -r '.id')
              TAGS=$(echo "$version_data" | jq -r '.tags[]?' 2>/dev/null || echo "")
              CREATED_AT=$(echo "$version_data" | jq -r '.created_at')

              SKIP_VERSION=false

              # Skip if it has release tags (semantic versions)
              if echo "$TAGS" | grep -qE '^v[0-9]+\.[0-9]+\.[0-9]+'; then
                echo "üè∑Ô∏è  Skipping release version: $VERSION_ID (tags: $(echo $TAGS | tr '\n' ' '))"
                SKIPPED=$((SKIPPED + 1))
                SKIP_VERSION=true
              fi

              # Skip if keeping latest/main and this version has those tags
              if [ "$KEEP_LATEST" = "true" ] && echo "$TAGS" | grep -qE '^(latest|main|stable|prod|production)$'; then
                echo "üìå Keeping important tagged version: $VERSION_ID (tags: $(echo $TAGS | tr '\n' ' '))"
                SKIPPED=$((SKIPPED + 1))
                SKIP_VERSION=true
              fi

              # Aggressive SHA cleanup - delete SHA-only images older than 1 day
              if [ "$AGGRESSIVE_SHA" = "true" ] && [ "$SKIP_VERSION" = "false" ]; then
                # Check if this is a SHA-only tag (like main-abc1234)
                if echo "$TAGS" | grep -qE '^[a-zA-Z]+-[a-f0-9]{7,}$' && ! echo "$TAGS" | grep -qE '^(latest|main|v[0-9])'; then
                  SHA_CUTOFF_DATE=$(date -d "1 day ago" --iso-8601)
                  if [ "$CREATED_AT" \> "$SHA_CUTOFF_DATE" ]; then
                    echo "‚è∞ Keeping recent SHA version: $VERSION_ID (created: $CREATED_AT)"
                    SKIPPED=$((SKIPPED + 1))
                    SKIP_VERSION=true
                  else
                    echo "üî• Aggressive SHA cleanup target: $VERSION_ID (tags: $(echo $TAGS | tr '\n' ' '))"
                  fi
                fi
              fi

              # Skip if version is newer than DAYS_TO_KEEP (normal cleanup)
              if [ "$DAYS_TO_KEEP" -gt 0 ] && [ "$SKIP_VERSION" = "false" ] && [ "$AGGRESSIVE_SHA" = "false" ]; then
                CUTOFF_DATE=$(date -d "$DAYS_TO_KEEP days ago" --iso-8601)
                if [ "$CREATED_AT" \> "$CUTOFF_DATE" ]; then
                  echo "‚è∞ Keeping recent version: $VERSION_ID (created: $CREATED_AT)"
                  SKIPPED=$((SKIPPED + 1))
                  SKIP_VERSION=true
                fi
              fi

              # Check deletion limit first to avoid stopping on labeled packages
              if [ "$DELETED" -ge "$MAX_LIMIT" ]; then
                echo "‚ö†Ô∏è  Reached deletion limit ($MAX_LIMIT), stopping"
                break
              fi

              # Delete if not skipped and under limit
              if [ "$SKIP_VERSION" = "false" ]; then
                TAGS_DISPLAY=$(echo $TAGS | tr '\n' ' ' | sed 's/^$/untagged/')

                if [ "$DRY_RUN" = "true" ]; then
                  echo "üîç Would delete version $VERSION_ID ($TAGS_DISPLAY)"
                  DELETED=$((DELETED + 1))
                else
                  echo -n "üóëÔ∏è  Deleting version $VERSION_ID ($TAGS_DISPLAY)... "
                  if gh api --method DELETE "user/packages/container/$PACKAGE_NAME/versions/$VERSION_ID" --silent; then
                    echo "‚úÖ Deleted"
                    DELETED=$((DELETED + 1))
                  else
                    echo "‚ùå Failed"
                  fi
                fi
              fi
            fi
          done < /tmp/package_versions.json

          echo ""
          if [ "$DRY_RUN" = "true" ]; then
            echo "üîç Dry run completed!"
            echo "   Versions would be deleted: $DELETED"
            echo "   Versions would be kept: $SKIPPED"
          else
            echo "üéâ Package cleanup completed!"
            echo "   Versions deleted: $DELETED"
            echo "   Versions kept: $SKIPPED"
          fi

          # Clean up temp files
          rm -f /tmp/package_versions.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Summary
        run: |
          echo "### üßπ Container Package Cleanup Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ github.event.inputs.dry_run }}" = "true" ]; then
            echo "üîç **Dry run completed successfully** - No packages were actually deleted" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚úÖ **Package cleanup completed successfully**" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Cleanup Rules Applied:**" >> $GITHUB_STEP_SUMMARY
          echo "- Deleted non-release container package versions" >> $GITHUB_STEP_SUMMARY
          echo "- Kept semantic version releases (v1.0.0, etc.)" >> $GITHUB_STEP_SUMMARY
          if [ "${{ github.event.inputs.keep_latest }}" = "true" ]; then
            echo "- Kept latest and main tagged versions" >> $GITHUB_STEP_SUMMARY
          fi
          if [ "${{ github.event.inputs.days_to_keep }}" != "0" ]; then
            echo "- Kept versions newer than ${{ github.event.inputs.days_to_keep }} days" >> $GITHUB_STEP_SUMMARY
          fi
          echo "- Limited deletions to maximum of ${{ github.event.inputs.max_deletions }} versions" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Future builds will create fresh development versions as needed." >> $GITHUB_STEP_SUMMARY