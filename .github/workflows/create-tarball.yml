---
name: Create Release Tarball
'on':
  push:
    branches:
      - main
  workflow_dispatch:  # Allows manual triggering

jobs:
  create-tarball:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for accurate git archive

      - name: Set up environment variables
        run: |
          echo "REPO_NAME=$(basename ${{ github.repository }})" >> $GITHUB_ENV
          echo "SHORT_SHA=${GITHUB_SHA:0:8}" >> $GITHUB_ENV
          echo "TIMESTAMP=$(date +%Y%m%d_%H%M%S)" >> $GITHUB_ENV

      - name: Create tarball with git archive
        run: |
          TARBALL_NAME="${{ env.REPO_NAME }}-${{ env.SHORT_SHA }}"
          TARBALL_NAME="${TARBALL_NAME}-${{ env.TIMESTAMP }}.tar.gz"
          echo "Creating tarball: $TARBALL_NAME"
          git archive --format=tar.gz \
            --prefix="${{ env.REPO_NAME }}/" \
            --output "$TARBALL_NAME" \
            HEAD
          echo "TARBALL_NAME=$TARBALL_NAME" >> $GITHUB_ENV

      - name: Validate tarball creation
        run: |
          if [ ! -f "${{ env.TARBALL_NAME }}" ]; then
            echo "❌ Error: Tarball was not created successfully"
            exit 1
          fi

          # Verify tarball contents
          echo "✅ Tarball created successfully: ${{ env.TARBALL_NAME }}"
          SIZE=$(ls -lh ${{ env.TARBALL_NAME }} | awk '{print $5}')
          echo "📊 Tarball size: $SIZE"
          echo "📋 Tarball contents preview:"
          tar -tzf "${{ env.TARBALL_NAME }}" | head -20

      - name: Generate tarball metadata
        run: |
          cat > tarball-metadata.txt << EOF
          # Network Device Upgrade System - Release Archive

          **Repository**: ${{ github.repository }}
          **Commit SHA**: ${{ github.sha }}
          **Short SHA**: ${{ env.SHORT_SHA }}
          **Branch**: ${{ github.ref_name }}
          **Timestamp**: ${{ env.TIMESTAMP }}
          **Tarball**: ${{ env.TARBALL_NAME }}
          **Size**: $(ls -lh ${{ env.TARBALL_NAME }} | awk '{print $5}')
          **Created**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")

          ## Commit Information
          **Author**: ${{ github.actor }}
          **Message**: ${{ github.event.head_commit.message }}

          ## Installation
          \`\`\`bash
          # Download and extract
          tar -xzf ${{ env.TARBALL_NAME }}
          cd ${{ env.REPO_NAME }}

          # Follow installation guide
          ./install/setup-system.sh
          \`\`\`
          EOF

      - name: Upload tarball and metadata (Artifacts)
        uses: actions/upload-artifact@v4
        with:
          name: network-upgrade-system-release-${{ env.SHORT_SHA }}
          path: |
            ${{ env.TARBALL_NAME }}
            tarball-metadata.txt
          retention-days: 90

      - name: Create GitHub Release with tarball (for direct URLs)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          RELEASE_TAG="release-${{ env.SHORT_SHA }}"
          RELEASE_TITLE="Network Upgrade System - ${{ env.SHORT_SHA }}"

          # Create release notes
          cat > release-notes.md << EOF
          # Network Device Upgrade System - Release ${{ env.SHORT_SHA }}

          **Commit**: ${{ github.sha }}
          **Branch**: ${{ github.ref_name }}
          **Author**: ${{ github.actor }}
          **Created**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")

          ## 🚀 Direct Download
          \`\`\`bash
          # Download and extract
          REPO_URL="https://github.com/${{ github.repository }}"
          BASE_DL="${REPO_URL}/releases/download"
          DOWNLOAD_URL="${BASE_DL}/${RELEASE_TAG}/${{ env.TARBALL_NAME }}"
          wget "\$DOWNLOAD_URL"
          tar -xzf ${{ env.TARBALL_NAME }}
          cd network-device-upgrade-system/
          ./install/setup-system.sh
          \`\`\`

          ## 🔒 Security Features
          - ✅ Server-initiated PUSH transfers only
          - ✅ Zero device-initiated operations
          - ✅ SSH key authentication priority
          - ✅ 100% security compliance validated

          ## 📊 What's Included
          - Complete Ansible automation framework
          - 5 vendor platform support (Cisco, FortiOS, Metamako, Opengear)
          - Comprehensive testing framework
          - Native systemd service deployment
          - Grafana dashboard automation
          EOF

          # Create release and upload tarball
          gh release create "$RELEASE_TAG" \
            --title "$RELEASE_TITLE" \
            --notes-file release-notes.md \
            "${{ env.TARBALL_NAME }}"

          # Output direct URL
          BASE_URL="https://github.com/${{ github.repository }}"
          BASE_URL="${BASE_URL}/releases/download"
          DIRECT_URL="${BASE_URL}/${RELEASE_TAG}/${{ env.TARBALL_NAME }}"
          echo "DIRECT_URL=$DIRECT_URL" >> $GITHUB_ENV
          echo "✅ Direct download URL: $DIRECT_URL"

      - name: Summary
        run: |
          echo "## 🎉 Tarball Creation Successful" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|--------|" >> $GITHUB_STEP_SUMMARY
          NAME_ENTRY="| **Tarball Name** | \`${{ env.TARBALL_NAME }}\` |"
          echo "$NAME_ENTRY" >> $GITHUB_STEP_SUMMARY
          SIZE=$(ls -lh ${{ env.TARBALL_NAME }} | awk '{print $5}')
          echo "| **Size** | $SIZE |" >> $GITHUB_STEP_SUMMARY
          SHA_ENTRY="| **Commit SHA** | \`${{ env.SHORT_SHA }}\` |"
          echo "$SHA_ENTRY" >> $GITHUB_STEP_SUMMARY
          TIME_ENTRY="| **Timestamp** | ${{ env.TIMESTAMP }} |"
          echo "$TIME_ENTRY" >> $GITHUB_STEP_SUMMARY
          URL_ENTRY="| **Direct URL** |"
          URL_LINK=" [${{ env.TARBALL_NAME }}](${{ env.DIRECT_URL }}) |"
          URL_ENTRY="${URL_ENTRY}${URL_LINK}"
          echo "$URL_ENTRY" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📥 Quick Download" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "wget ${{ env.DIRECT_URL }}" >> $GITHUB_STEP_SUMMARY
          echo "tar -xzf ${{ env.TARBALL_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "cd network-device-upgrade-system/" >> $GITHUB_STEP_SUMMARY
          echo "./install/setup-system.sh" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          READY_MSG="✅ **Ready for deployment**"
          READY_MSG="${READY_MSG} - Complete network upgrade system"
          echo "$READY_MSG" >> $GITHUB_STEP_SUMMARY
