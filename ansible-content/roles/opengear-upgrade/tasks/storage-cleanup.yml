---
# Opengear Storage Cleanup Tasks
# Safely removes obsolete firmware images and files

- name: Get current firmware version and storage information
  ansible.builtin.raw: >
    "df -h /tmp && echo '---VERSION---' && config -g config.version"
  register: opengear_storage_version
  changed_when: false

- name: Parse storage and version information
  ansible.builtin.set_fact:
    opengear_storage_info: >
      "{{ opengear_storage_version.stdout.split('---VERSION---')[0] }}"
    opengear_current_version: >
      "{{ opengear_storage_version.stdout.split('---VERSION---')[1] | trim }}"

- name: Extract storage metrics from df output
  ansible.builtin.set_fact:
    tmp_total_size: >
      "{{ opengear_storage_info |
        regex_search('/tmp\\s+(\\S+)', '\\1') | first }}"
    tmp_used_size: >
      "{{ opengear_storage_info |
        regex_search('/tmp\\s+\\S+\\s+(\\S+)', '\\1') | first }}"
    tmp_available_size: >
      "{{ opengear_storage_info |
        regex_search('/tmp\\s+\\S+\\s+\\S+\\s+(\\S+)', '\\1') | first }}"
    tmp_usage_percent: >
      "{{ opengear_storage_info |
        regex_search('/tmp\\s+\\S+\\s+\\S+\\s+\\S+\\s+(\\d+)%', '\\1') | first }}"

- name: Convert storage sizes to GB
  ansible.builtin.set_fact:
    current_free_gb: >
      "{{ (tmp_available_size | regex_replace('[KMG]', '') | float * (0.000001
        if 'K' in tmp_available_size else (0.001 if 'M' in tmp_available_size
      else 1))) | round(2) }}"
    total_storage_gb: >
      "{{ (tmp_total_size | regex_replace('[KMG]', '') | float * (0.000001
        if 'K' in tmp_total_size else (0.001 if 'M' in tmp_total_size else 1)))
      | round(2) }}"

- name: List firmware image files in /tmp
  ansible.builtin.raw: >
    "ls -la /tmp/*.img /tmp/*.bin 2>/dev/null || echo 'No firmware files found'"
  register: firmware_files_list
  changed_when: false

- name: List temporary upgrade files
  ansible.builtin.raw: >
    "ls -la /tmp/upgrade_* /tmp/opengear_*
      2>/dev/null || echo 'No temporary files found'"
  register: temp_files_list
  changed_when: false

- name: Parse firmware file information
  ansible.builtin.set_fact:
    firmware_images: >
"{{ firmware_files_list.stdout_lines |
        select('match', '.*(img|bin)$') | map('regex_replace', '.* ([^/]+\\.(img|bin))$', '\\1') | list }}"
    temp_files: >
"{{ temp_files_list.stdout_lines |
        select('match', '.*(upgrade_|opengear_).*') | map('regex_replace', '.* ([^/]+)$', '\\1') | list }}"

- name: Identify current running firmware
  ansible.builtin.set_fact:
    running_firmware: "opengear-{{ opengear_current_version }}.img"

- name: Identify cleanup candidates (excluding running firmware)
  ansible.builtin.set_fact:
    cleanup_candidates: >
"{{ (firmware_images + temp_files) |
        difference([running_firmware]) | list }}"

- name: Check if cleanup is needed
  ansible.builtin.set_fact:
    cleanup_needed: "{{ current_free_gb < (target_free_space | default(4)) }}"

- name: Remove obsolete firmware files (if cleanup needed and safe)
  ansible.builtin.raw: "rm -f /tmp/{{ item }}"
  loop: "{{ cleanup_candidates }}"
  when:
    - cleanup_needed
    - item != running_firmware
    - cleanup_candidates | length > 0
  register: cleanup_result
  failed_when: false

- name: Verify storage space after cleanup
  ansible.builtin.raw: "df -h /tmp"
  register: post_cleanup_storage
  changed_when: false

- name: Parse post-cleanup storage information
  ansible.builtin.set_fact:
    post_cleanup_available: >
"{{ post_cleanup_storage.stdout |
        regex_search('/tmp\\s+\\S+\\s+\\S+\\s+(\\S+)', '\\1') | first }}"
    post_cleanup_free_gb: >
      "{{ (post_cleanup_available | regex_replace('[KMG]', '') | float * (0.000001
        if 'K' in post_cleanup_available else (0.001 if 'M' in post_cleanup_available
      else 1))) | round(2) }}"

- name: Set storage cleanup results
  ansible.builtin.set_fact:
    storage_cleanup_results:
      platform: "opengear"
      files_removed: >
        "{{ cleanup_result.results | selectattr('changed',
          'equalto', true) | list | length }}"
      space_freed_gb: >
        "{{ (post_cleanup_free_gb - current_free_gb) | round(2) }}"
      final_free_space_gb: "{{ post_cleanup_free_gb }}"
      cleanup_successful: >
        "{{ post_cleanup_free_gb >= (target_free_space | default(4)) }}"
