---
# Image Installation for Opengear Devices
# Handles firmware installation and device reboot

- name: Pre-installation validation
  block:
    - name: Authenticate to Opengear API (refresh token)
      ansible.builtin.uri:
        url: "https://{{ ansible_host }}/api/v1/auth/refresh"
        method: POST
        headers:
          Authorization: "Token {{ opengear_api_token }}"
        validate_certs: false
      register: token_refresh
      failed_when: false
      
    - name: Update API token if refreshed
      set_fact:
        opengear_api_token: "{{ token_refresh.json.token if token_refresh.json is defined else opengear_api_token }}"
        
    - name: Verify firmware image is ready for installation
      ansible.builtin.uri:
        url: "https://{{ ansible_host }}/api/v1/system/firmware/list"
        method: GET
        headers:
          Authorization: "Token {{ opengear_api_token }}"
        validate_certs: false
      register: pre_install_firmware_list
      
    - name: Confirm target firmware availability
      set_fact:
        target_firmware_ready: "{{ pre_install_firmware_list.json | selectattr('filename', 'equalto', target_firmware_filename) | selectattr('status', 'equalto', 'ready') | list | length > 0 }}"
        
    - name: Validate firmware is ready
      ansible.builtin.assert:
        that:
          - target_firmware_ready
        fail_msg: "Target firmware is not ready for installation"

- name: Console server preparation (if applicable)
  block:
    - name: Notify active console sessions
      include_tasks: serial-management.yml
      when: opengear_upgrade_state.device_type == "console_server"
      
    - name: Set console server to maintenance mode
      ansible.builtin.uri:
        url: "https://{{ ansible_host }}/api/v1/system/maintenance"
        method: POST
        headers:
          Authorization: "Token {{ opengear_api_token }}"
          Content-Type: "application/json"
        body_format: json
        body:
          enabled: true
          message: "Firmware upgrade in progress - console access temporarily unavailable"
        validate_certs: false
      register: maintenance_mode
      when: opengear_upgrade_state.device_type == "console_server"

- name: Smart PDU preparation (if applicable)
  block:
    - name: Check critical power loads
      ansible.builtin.uri:
        url: "https://{{ ansible_host }}/api/v1/power/outlets/critical"
        method: GET
        headers:
          Authorization: "Token {{ opengear_api_token }}"
        validate_certs: false
      register: critical_power_check
      when: opengear_upgrade_state.device_type == "smart_pdu"
      failed_when: false
      
    - name: Warn about critical power outlets
      ansible.builtin.debug:
        msg: |
          WARNING: {{ critical_power_check.json | length if critical_power_check.json is defined else 0 }} critical power outlets detected.
          Firmware upgrade may cause brief power interruption.
      when: opengear_upgrade_state.device_type == "smart_pdu" and critical_power_check.json is defined

- name: Execute firmware installation
  block:
    - name: Create configuration backup before installation
      ansible.builtin.uri:
        url: "https://{{ ansible_host }}/api/v1/system/config/backup"
        method: POST
        headers:
          Authorization: "Token {{ opengear_api_token }}"
          Content-Type: "application/json"
        body_format: json
        body:
          description: "Pre-upgrade backup - {{ lookup("pipe", "date -u +%Y-%m-%dT%H:%M:%SZ") }}"
        validate_certs: false
      register: config_backup
      
    - name: Initiate firmware installation
      ansible.builtin.uri:
        url: "https://{{ ansible_host }}/api/v1/system/firmware/install"
        method: POST
        headers:
          Authorization: "Token {{ opengear_api_token }}"
          Content-Type: "application/json"
        body_format: json
        body:
          filename: "{{ target_firmware_filename }}"
          reboot: true
          preserve_config: true
          backup_id: "{{ config_backup.json.backup_id if config_backup.json is defined else omit }}"
        validate_certs: false
      register: firmware_install
      
    - name: Monitor installation progress (before reboot)
      ansible.builtin.uri:
        url: "https://{{ ansible_host }}/api/v1/system/firmware/install/{{ firmware_install.json.install_id }}/status"
        method: GET
        headers:
          Authorization: "Token {{ opengear_api_token }}"
        validate_certs: false
      register: install_progress
      until: install_progress.json.status in ['installing', 'rebooting', 'completed', 'failed']
      retries: 30
      delay: 10
      failed_when: install_progress.json.status == 'failed'

- name: Handle device reboot and recovery
  block:
    - name: Wait for device reboot to start
      ansible.builtin.pause:
        seconds: 30
        
    - name: Wait for device to become unreachable (reboot confirmation)
      ansible.builtin.wait_for:
        host: "{{ ansible_host }}"
        port: 443
        state: stopped
        timeout: 300
        delay: 10
      delegate_to: localhost
      
    - name: Wait for device to come back online
      ansible.builtin.wait_for:
        host: "{{ ansible_host }}"
        port: 443
        state: started
        timeout: 900
        delay: 30
      delegate_to: localhost
      
    - name: Wait for web services to fully initialize
      ansible.builtin.pause:
        seconds: 60

- name: Post-installation validation
  block:
    - name: Re-authenticate after reboot
      ansible.builtin.uri:
        url: "https://{{ ansible_host }}/api/v1/auth/login"
        method: POST
        headers:
          Content-Type: "application/json"
        body_format: json
        body:
          username: "{{ opengear_username }}"
          password: "{{ opengear_password }}"
        validate_certs: false
      register: post_reboot_auth
      retries: 5
      delay: 30
      
    - name: Update API token for post-reboot operations
      set_fact:
        opengear_api_token: "{{ post_reboot_auth.json.token }}"
        
    - name: Verify new firmware version is active
      ansible.builtin.uri:
        url: "https://{{ ansible_host }}/api/v1/system/info"
        method: GET
        headers:
          Authorization: "Token {{ opengear_api_token }}"
        validate_certs: false
      register: post_install_info
      
    - name: Confirm target firmware version
      ansible.builtin.assert:
        that:
          - opengear_upgrade_state.target_version in post_install_info.json.version
        fail_msg: "Installation completed but target version not active: {{ post_install_info.json.version }}"
        
    - name: Verify system health after installation
      ansible.builtin.uri:
        url: "https://{{ ansible_host }}/api/v1/system/health"
        method: GET
        headers:
          Authorization: "Token {{ opengear_api_token }}"
        validate_certs: false
      register: post_install_health
      
    - name: Validate system health status
      ansible.builtin.assert:
        that:
          - post_install_health.json.status in ['healthy', 'ok', 'normal']
        fail_msg: "System health check failed after installation"

- name: Post-installation device-specific validation
  block:
    - name: Validate console server functionality
      block:
        - name: Check serial port status after upgrade
          ansible.builtin.uri:
            url: "https://{{ ansible_host }}/api/v1/serialports/status"
            method: GET
            headers:
              Authorization: "Token {{ opengear_api_token }}"
            validate_certs: false
          register: post_serial_status
          
        - name: Disable maintenance mode
          ansible.builtin.uri:
            url: "https://{{ ansible_host }}/api/v1/system/maintenance"
            method: POST
            headers:
              Authorization: "Token {{ opengear_api_token }}"
              Content-Type: "application/json"
            body_format: json
            body:
              enabled: false
            validate_certs: false
      when: opengear_upgrade_state.device_type == "console_server"
      
    - name: Validate smart PDU functionality
      block:
        - name: Check power outlet status after upgrade
          ansible.builtin.uri:
            url: "https://{{ ansible_host }}/api/v1/power/outlets/status"
            method: GET
            headers:
              Authorization: "Token {{ opengear_api_token }}"
            validate_certs: false
          register: post_power_status
          
        - name: Verify power management is operational
          ansible.builtin.assert:
            that:
              - post_power_status.json | length > 0
            fail_msg: "Power management not operational after upgrade"
      when: opengear_upgrade_state.device_type == "smart_pdu"

- name: Log installation completion
  ansible.builtin.debug:
    msg: |
      Opengear Installation Completed Successfully:
      - Device Model: {{ opengear_upgrade_state.device_model }}
      - Device Type: {{ opengear_upgrade_state.device_type | title }}
      - Previous Version: {{ opengear_upgrade_state.current_version }}
      - New Version: {{ post_install_info.json.version }}
      - Installation Method: Web API
      - Config Backup: {{ config_backup.json.backup_id if config_backup.json is defined else 'Not Created' }}
      - System Health: {{ post_install_health.json.status if post_install_health.json is defined else 'Not Checked' }}
      - Serial Ports: {{ post_serial_status.json | length if post_serial_status is defined else 'N/A' }} operational
      - Power Outlets: {{ post_power_status.json | length if post_power_status is defined else 'N/A' }} operational
      - Status: SUCCESS