---
# Legacy Opengear Image Loading (CLI-based)
# For OM2200 and CM7100 models without REST API

- name: Pre-upload validation (Legacy)
  block:
    - name: Check available storage space via CLI
      ansible.builtin.raw: |
        echo "show disk usage" | /bin/cli
      register: disk_usage_check
      delegate_to: "{{ inventory_hostname }}"

    - name: Parse available space
      ansible.builtin.set_fact:
        available_space_mb: "{{ disk_usage_check.stdout | regex_search('Available:\\s+(\\d+)', '\\1') | first | int }}"
        required_space_mb: "{{ (ansible_stat_firmware.size / 1024 / 1024) | int + 50 }}" # Add 50MB buffer
      when: disk_usage_check.stdout is defined

    - name: Validate sufficient storage space
      ansible.builtin.assert:
        that:
          - available_space_mb | int > required_space_mb | int
        fail_msg: "Insufficient storage space. Available: {{ available_space_mb }}MB, Required: {{ required_space_mb }}MB"

- name: Firmware transfer preparation
  block:
    - name: Check if firmware already exists
      ansible.builtin.raw: |
        ls /usr/local/upgrade/{{ target_firmware_filename }}
      register: existing_firmware
      delegate_to: "{{ inventory_hostname }}"
      failed_when: false

    - name: Remove existing firmware if present
      ansible.builtin.raw: |
        rm -f /usr/local/upgrade/{{ target_firmware_filename }}
      delegate_to: "{{ inventory_hostname }}"
      when: existing_firmware.rc == 0

    - name: Ensure upgrade directory exists
      ansible.builtin.raw: |
        mkdir -p /usr/local/upgrade
      delegate_to: "{{ inventory_hostname }}"

- name: Transfer firmware image via SCP
  block:
    - name: Start firmware transfer
      ansible.builtin.copy:
        src: "{{ local_firmware_path }}/{{ target_firmware_filename }}"
        dest: "/usr/local/upgrade/{{ target_firmware_filename }}"
      delegate_to: "{{ inventory_hostname }}"
      register: firmware_transfer

    - name: Log transfer completion
      ansible.builtin.debug:
        msg: |
          Firmware transfer completed:
          - Source: {{ local_firmware_path }}/{{ target_firmware_filename }}
          - Destination: /usr/local/upgrade/{{ target_firmware_filename }}
          - Size: {{ firmware_transfer.size if firmware_transfer.size is defined else 'Unknown' }} bytes

- name: Verify firmware integrity (Legacy)
  block:
    - name: Calculate firmware checksum on device
      ansible.builtin.raw: |
        sha512sum /usr/local/upgrade/{{ target_firmware_filename }} | awk '{print $1}'
      register: device_checksum
      delegate_to: "{{ inventory_hostname }}"

    - name: Read expected checksum from local file
      ansible.builtin.slurp:
        src: "{{ local_firmware_path }}/{{ target_firmware_filename }}.sha512"
      register: expected_checksum_file
      delegate_to: localhost

    - name: Parse expected checksum
      ansible.builtin.set_fact:
        expected_checksum: "{{ expected_checksum_file.content | b64decode | trim | split(' ') | first }}"
        device_calculated_checksum: "{{ device_checksum.stdout | trim }}"

    - name: Validate checksum match
      ansible.builtin.assert:
        that:
          - expected_checksum == device_calculated_checksum
        fail_msg: |
          Checksum verification failed!
          Expected: {{ expected_checksum }}
          Calculated: {{ device_calculated_checksum }}

    - name: Log successful checksum verification
      ansible.builtin.debug:
        msg: |
          Firmware integrity verified successfully:
          - Expected SHA512: {{ expected_checksum }}
          - Device SHA512: {{ device_calculated_checksum }}
          - Status: VERIFIED

- name: Prepare firmware for installation (Legacy)
  block:
    - name: Set firmware permissions
      ansible.builtin.raw: |
        chmod 644 /usr/local/upgrade/{{ target_firmware_filename }}
      delegate_to: "{{ inventory_hostname }}"

    - name: Create firmware staging marker
      ansible.builtin.raw: |
        echo "Firmware staged: {{ lookup('pipe', 'date -u +%Y-%m-%dT%H:%M:%SZ') }}" > /usr/local/upgrade/.{{ target_firmware_filename }}.staged
        echo "Source checksum: {{ expected_checksum }}" >> /usr/local/upgrade/.{{ target_firmware_filename }}.staged
        echo "Device checksum: {{ device_calculated_checksum }}" >> /usr/local/upgrade/.{{ target_firmware_filename }}.staged
      delegate_to: "{{ inventory_hostname }}"

- name: Legacy device configuration backup
  block:
    - name: Create configuration backup
      ansible.builtin.raw: |
        echo "backup config /usr/local/upgrade/config-backup-$(date +%Y%m%d-%H%M%S).txt" | /bin/cli
      register: config_backup_result
      delegate_to: "{{ inventory_hostname }}"

    - name: Log backup completion
      ansible.builtin.debug:
        msg: |
          Configuration backup completed:
          - Backup Location: /usr/local/upgrade/
          - Backup Time: {{ lookup('pipe', 'date -u +%Y-%m-%dT%H:%M:%SZ') }}
          - CLI Result: {{ config_backup_result.stdout | default('Success') }}

- name: Log legacy image loading completion
  ansible.builtin.debug:
    msg: |-
      Legacy Opengear Image Loading Completed:
      - Device: {{ inventory_hostname }}
      - Model: {{ opengear_upgrade_state.device_model }}
      - Architecture: Legacy CLI
      - Firmware File: {{ target_firmware_filename }}
      - Transfer Method: SCP
      - Checksum Status: VERIFIED
      - Staging Location: /usr/local/upgrade/
      - Ready for Installation: YES
