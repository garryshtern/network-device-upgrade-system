---
# Console Server Specific Checks for Opengear
# Validate serial port configurations and connectivity

- name: Get serial port configuration (Modern API)
  ansible.builtin.uri:
    url: "https://{{ ansible_host }}/api/v1/serialports"
    method: GET
    headers:
      Authorization: "Token {{ opengear_api_token }}"
    validate_certs: false
  register: serial_ports_info_api
  when: api_available

- name: Get serial port configuration (Legacy CLI)
  ansible.builtin.raw: |
    echo "show serial" | /bin/cli
  register: serial_ports_info_cli
  delegate_to: "{{ inventory_hostname }}"
  when: not api_available

- name: Parse serial port information (API)
  ansible.builtin.set_fact:
    opengear_upgrade_state: >
      "{{ opengear_upgrade_state | combine({'serial_ports':
        serial_ports_info_api.json}) }}"
  when: api_available and serial_ports_info_api.json is defined

- name: Parse serial port information (CLI)
  ansible.builtin.set_fact:
    opengear_upgrade_state: >
      "{{ opengear_upgrade_state | combine({'serial_ports':
        serial_ports_info_cli.stdout | regex_findall('Serial\\d+') | list}) }}"
  when: not api_available and serial_ports_info_cli.stdout is defined

- name: Check active serial connections (Modern API)
  ansible.builtin.uri:
    url: "https://{{ ansible_host }}/api/v1/serialports/{{ item.id }}/status"
    method: GET
    headers:
      Authorization: "Token {{ opengear_api_token }}"
    validate_certs: false
  register: port_status_api
  loop: "{{ opengear_upgrade_state.serial_ports }}"
  when: api_available and opengear_upgrade_state.serial_ports | length > 0

- name: Check active serial connections (Legacy CLI)
  ansible.builtin.raw: |
    echo "show serial" | /bin/cli | grep -c "Connected"
  register: port_status_cli
  delegate_to: "{{ inventory_hostname }}"
  when: not api_available
  failed_when: false

- name: Validate console server readiness
  block:
    - name: Check for active console sessions (API)
      ansible.builtin.set_fact:
        active_sessions: >
          "{{ port_status_api.results | selectattr('json.connected',
            'equalto', true) | list | length | default(0) }}"
      when: api_available and port_status_api is defined

    - name: Check for active console sessions (CLI)
      ansible.builtin.set_fact:
        active_sessions: "{{ port_status_cli.stdout | default('0') | int }}"
      when: not api_available and port_status_cli is defined

    - name: Warn about active sessions
      ansible.builtin.debug:
        msg: |
          WARNING: >
            {{ active_sessions | default(0) }} active console sessions detected.
          These may be disconnected during the upgrade process.
      when: active_sessions | default(0) | int > 0

- name: Check network connectivity to managed devices
  ansible.builtin.uri:
    url: "https://{{ ansible_host }}/api/v1/ping/{{ item.target_ip }}"
    method: POST
    headers:
      Authorization: "Token {{ opengear_api_token }}"
    validate_certs: false
    body_format: json
    body:
      count: 3
  register: connectivity_check
  loop: "{{ console_targets | default([]) }}"
  failed_when: false
  when: console_targets is defined

- name: Log console server assessment
  ansible.builtin.debug:
    msg: |-
      Console Server Assessment:
      - Model: {{ opengear_upgrade_state.device_model }}
      - Architecture: {{ opengear_upgrade_state.architecture | title }}
      - Detection Method: {{ 'API' if api_available else 'CLI' }}
      - Serial Ports: {{ opengear_upgrade_state.serial_ports | length }}
      - Active Sessions: {{ active_sessions | default(0) }}
      - >
Ready for Upgrade: {{ 'Yes' if active_sessions |
          default(0) | int == 0 else 'Caution - Active Sessions' }}
