---
# Validation Tasks for FortiOS Devices
# Comprehensive firewall functionality and security validation

- name: Basic system validation
  block:
    - name: Verify system responsiveness
      fortinet.fortios.fortios_monitor_fact:
        vdom: "root"
        selector: "system_status"
      register: fortios_system_status

    - name: Verify target version is active
      ansible.builtin.assert:
        that:
          - >-
            fortios_upgrade_state.target_version in
            fortios_system_status.meta.results.version
        fail_msg: >-
          Target firmware version not active:
          {{ fortios_system_status.meta.results.version }}

    - name: Check system uptime and stability
      fortinet.fortios.fortios_monitor_fact:
        vdom: "root"
        selector: "system_resource_usage"
      register: fortios_system_resources

- name: Firewall policy validation
  block:
    - name: Check firewall policy status
      fortinet.fortios.fortios_monitor_fact:
        vdom: "root"
        selector: "firewall_policy_stats"
      register: fortios_policy_stats

    - name: Verify security policies are active
      ansible.builtin.assert:
        that:
          - fortios_policy_stats.meta.results.total_policies | int > 0
        fail_msg: "No active firewall policies found"

    - name: Check policy hit counts
      fortinet.fortios.fortios_monitor_fact:
        vdom: "root"
        selector: "firewall_policy_lookup"
      register: fortios_policy_hits
      failed_when: false

    - name: Validate policy functionality
      ansible.builtin.debug:
        msg: |
          Firewall Policy Status:
          - Total Policies: >
            {{ fortios_policy_stats.meta.results.total_policies }}
          - Active Policies: >
            {{ fortios_policy_stats.meta.results.active_policies |
            default('N/A') }}
          - Policy Hits: >
            {{ 'Available' if fortios_policy_hits.meta is defined
            else 'Limited Data' }}

- name: Network interface validation
  block:
    - name: Check physical interface status
      fortinet.fortios.fortios_monitor_fact:
        vdom: "root"
        selector: "system_interface_physical"
      register: fortios_interfaces

    - name: Validate critical interfaces are operational
      ansible.builtin.assert:
        that:
          - >
            fortios_interfaces.meta.results | selectattr('status',
              'equalto', 'up') | list | length > 0
        fail_msg: "No interfaces are in 'up' state"

    - name: Check VLAN interface status
      fortinet.fortios.fortios_monitor_fact:
        vdom: "root"
        selector: "system_interface"
      register: fortios_all_interfaces
      failed_when: false

    - name: Validate network connectivity
      ansible.builtin.debug:
        msg: |
          Interface Status:
          - >
            Physical Interfaces Up: >
{{ fortios_interfaces.meta.results |
                selectattr('status', 'equalto', 'up') | list | length }}
          - >
            Total Interfaces: >
{{ fortios_all_interfaces.meta.results |
                length if fortios_all_interfaces.meta is defined else 'Unknown' }}

- name: Routing validation
  block:
    - name: Check routing table
      fortinet.fortios.fortios_monitor_fact:
        vdom: "root"
        selector: "router_info_routing_table_all"
      register: fortios_routing_table
      failed_when: false

    - name: Check default route
      fortinet.fortios.fortios_monitor_fact:
        vdom: "root"
        selector: "router_info_routing_table_details"
        params:
          destination: "0.0.0.0/0"
      register: fortios_default_route
      failed_when: false

    - name: Validate routing functionality
      ansible.builtin.debug:
        msg: |
          Routing Status:
          - >
            Routing Table Entries: >
{{ fortios_routing_table.meta.results |
                length if fortios_routing_table.meta is defined else 'Unknown' }}
          - >
            Default Route: >
{{ 'Present' if fortios_default_route.meta is defined else
                'Check Required' }}

- name: VPN functionality validation
  block:
    - name: Check SSL VPN status
      fortinet.fortios.fortios_monitor_fact:
        vdom: "root"
        selector: "vpn_ssl_stats"
      register: fortios_ssl_vpn
      failed_when: false

    - name: Check IPSec VPN status
      fortinet.fortios.fortios_monitor_fact:
        vdom: "root"
        selector: "vpn_ipsec_stats"
      register: fortios_ipsec_vpn
      failed_when: false

    - name: Validate VPN functionality
      ansible.builtin.debug:
        msg: |
          VPN Status:
          - >
            SSL VPN Sessions: >
              {{ fortios_ssl_vpn.meta.results.active_sessions | default(0) }}
          - >
            IPSec Tunnels: {{ fortios_ipsec_vpn.meta.results.tunnel_count | default(0) }}
          - >
            VPN Services: >
{{ 'Operational' if fortios_ssl_vpn.meta is defined or
                fortios_ipsec_vpn.meta is defined else 'Not Configured' }}

- name: HA cluster validation (if applicable)
  block:
    - name: Check HA cluster status
      fortinet.fortios.fortios_monitor_fact:
        vdom: "root"
        selector: "system_ha_status"
      register: fortios_ha_status
      when: fortios_upgrade_state.ha_mode != "standalone"

    - name: Verify HA synchronization
      ansible.builtin.assert:
        that:
          - fortios_ha_status.meta.results.sync_status == "synchronized"
        fail_msg: >
          "HA cluster not synchronized: >
            {{ fortios_ha_status.meta.results.sync_status }}"
      when: >
        fortios_upgrade_state.ha_mode != "standalone"
          and fortios_ha_status is defined

    - name: Check HA peer status
      fortinet.fortios.fortios_monitor_fact:
        vdom: "root"
        selector: "system_ha_peer"
      register: fortios_ha_peers
      when: fortios_upgrade_state.ha_mode != "standalone"
      failed_when: false

    - name: Validate HA cluster health
      ansible.builtin.debug:
        msg: |
          HA Cluster Status:
          - Mode: {{ fortios_upgrade_state.ha_mode }}
          - >
            Sync Status: >
{{ fortios_ha_status.meta.results.sync_status if
                fortios_ha_status is defined else 'N/A' }}
          - >
            Cluster Members: >
{{ fortios_ha_peers.meta.results |
                length if fortios_ha_peers.meta is defined else 'Unknown' }}
          - Role: {{ fortios_upgrade_state.ha_role }}
      when: fortios_upgrade_state.ha_mode != "standalone"

- name: Security service validation
  block:
    - name: Check antivirus engine status
      fortinet.fortios.fortios_monitor_fact:
        vdom: "root"
        selector: "antivirus_stats"
      register: fortios_antivirus
      failed_when: false

    - name: Check IPS engine status
      fortinet.fortios.fortios_monitor_fact:
        vdom: "root"
        selector: "ips_stats"
      register: fortios_ips
      failed_when: false

    - name: Check web filter status
      fortinet.fortios.fortios_monitor_fact:
        vdom: "root"
        selector: "webfilter_stats"
      register: fortios_webfilter
      failed_when: false

    - name: Validate security services
      ansible.builtin.debug:
        msg: |
          Security Services Status:
          - >
            Antivirus: >
{{ 'Active' if fortios_antivirus.meta is defined else
                'Not Available' }}
          - >
            IPS: {{ 'Active' if fortios_ips.meta is defined else 'Not Available' }}
          - >
            Web Filter: >
{{ 'Active' if fortios_webfilter.meta is defined else
                'Not Available' }}

- name: License validation
  block:
    - name: Check license status
      fortinet.fortios.fortios_monitor_fact:
        vdom: "root"
        selector: "license_status"
      register: fortios_license_check

    - name: Verify license validity
      ansible.builtin.assert:
        that:
          - fortios_license_check.meta.results.status in ["valid", "registered"]
        fail_msg: >
          "License validation failed: >
            {{ fortios_license_check.meta.results.status }}"
      when: fortios_license_check.meta is defined

    - name: Check FortiGuard services
      fortinet.fortios.fortios_monitor_fact:
        vdom: "root"
        selector: "fortiguard_service_status"
      register: fortios_fortiguard
      failed_when: false

- name: Performance validation
  block:
    - name: Check system performance
      fortinet.fortios.fortios_monitor_fact:
        vdom: "root"
        selector: "system_performance_status"
      register: fortios_performance
      failed_when: false

    - name: Validate system load
      ansible.builtin.assert:
        that:
          - fortios_system_resources.meta.results.cpu_usage | int < 80
          - fortios_system_resources.meta.results.memory_usage | int < 90
        fail_msg: "System under high load after upgrade"
      when: fortios_system_resources.meta is defined

    - name: Check session statistics
      fortinet.fortios.fortios_monitor_fact:
        vdom: "root"
        selector: "system_session_stat"
      register: fortios_sessions
      failed_when: false

- name: Log analysis validation
  block:
    - name: Check recent system logs
      fortinet.fortios.fortios_monitor_fact:
        vdom: "root"
        selector: "log_current_disk_usage"
      register: fortios_log_usage
      failed_when: false

    - name: Verify logging functionality
      ansible.builtin.debug:
        msg: |
          Logging Status:
          - >
            Log Disk Usage: >
{{ fortios_log_usage.meta.results.usage_percent |
                default('Unknown') }}%
          - >
            Log Services: >
{{ 'Operational' if fortios_log_usage.meta is defined else
                'Check Required' }}

- name: Validation summary
  ansible.builtin.debug:
    msg: |-
      FortiOS Validation Results:
      - >
        Version: >
{{ 'PASS' if fortios_upgrade_state.target_version in fortios_system_status.meta.results.version else
            'FAIL' }}
      - >
        System Health: >
{{ 'OK' if fortios_system_resources.meta.results.cpu_usage |
            int < 50 else 'High Load' }}
      - >
        Firewall Policies: >
          {{ fortios_policy_stats.meta.results.total_policies }} active
      - >
        Interfaces Up: >
{{ fortios_interfaces.meta.results |
            selectattr('status', 'equalto', 'up') | list | length }}
      - >
        Routing: >
{{ 'Operational' if fortios_routing_table.meta is defined else
            'Check Required' }}
      - >
        VPN Services: >
SSL={{ fortios_ssl_vpn.meta.results.active_sessions |
            default(0) }}, IPSec={{ fortios_ipsec_vpn.meta.results.tunnel_count | default(0) }}
      - >
        HA Status: >
{{ fortios_ha_status.meta.results.sync_status if
            fortios_ha_status is defined else 'Standalone' }}
      - Security Services: AV=
        {{ 'OK' if fortios_antivirus.meta is defined else 'N/A' }}
        , IPS=
        {{ 'OK' if fortios_ips.meta is defined else 'N/A' }}
        , Web=
        {{ 'OK' if fortios_webfilter.meta is defined else 'N/A' }}
      - >
        License: >
{{ fortios_license_check.meta.results.status if
            fortios_license_check.meta is defined else 'Unknown' }}
      - CPU Usage: {{ fortios_system_resources.meta.results.cpu_usage }}%
      - Memory Usage: {{ fortios_system_resources.meta.results.memory_usage }}%
      - >
        Overall Status: >
{{ 'VALIDATION COMPLETE' if fortios_upgrade_state.target_version in fortios_system_status.meta.results.version else
            'CHECK REQUIRED' }}
