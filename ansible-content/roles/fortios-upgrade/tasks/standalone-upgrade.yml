---
# Standalone Upgrade for FortiOS
# Single unit upgrade without HA coordination

- name: Pre-upgrade standalone validation
  block:
    - name: Check system resources
      fortinet.fortios.fortios_monitor_fact:
        vdom: "root"
        selector: "system_resource_usage"
      register: resource_usage
      
    - name: Verify system is not under high load
      ansible.builtin.assert:
        that:
          - resource_usage.meta.results.cpu_usage | int < 80
          - resource_usage.meta.results.memory_usage | int < 90
        fail_msg: "System under high load - upgrade may be risky"
        
    - name: Check active VPN tunnels
      fortinet.fortios.fortios_monitor_fact:
        vdom: "root"
        selector: "vpn_ssl_stats"
      register: vpn_tunnels
      failed_when: false

- name: Backup configuration
  block:
    - name: Create full system backup
      fortinet.fortios.fortios_monitor:
        vdom: "root"
        selector: "system_config_backup"
        params:
          scope: "global"
          vdom: "all"
      register: system_backup
      
    - name: Verify backup creation
      ansible.builtin.assert:
        that:
          - system_backup.meta.results.status == "success"
        fail_msg: "Configuration backup failed"

- name: VPN tunnel management
  block:
    - name: Notify VPN users of maintenance
      fortinet.fortios.fortios_log:
        category: "system"
        subcategory: "admin"
        level: "warning"
        msg: "Firmware upgrade in progress - VPN connections may be interrupted"
      failed_when: false
      
    - name: Gracefully close VPN sessions (optional)
      fortinet.fortios.fortios_monitor:
        vdom: "root"
        selector: "vpn_ssl_disconnect_all"
      when: force_vpn_disconnect | default(false)
      failed_when: false

- name: Execute standalone upgrade
  block:
    - name: Install new firmware
      fortinet.fortios.fortios_monitor:
        vdom: "root"
        selector: "system_firmware_upgrade"
        params:
          version: "{{ fortios_upgrade_state.target_version }}"
          source: "upload"
          reboot: true
      register: firmware_install
      
    - name: Wait for system reboot
      ansible.builtin.wait_for:
        host: "{{ ansible_host }}"
        port: 443
        delay: 90
        timeout: 1200
        
    - name: Verify system is responsive
      fortinet.fortios.fortios_monitor_fact:
        vdom: "root"
        selector: "system_status"
      register: post_reboot_status
      retries: 10
      delay: 30

- name: Post-upgrade validation
  block:
    - name: Confirm target version is active
      ansible.builtin.assert:
        that:
          - fortios_upgrade_state.target_version in post_reboot_status.meta.results.version
        fail_msg: "Standalone upgrade failed - target version not active"
        
    - name: Check system health
      fortinet.fortios.fortios_monitor_fact:
        vdom: "root"
        selector: "system_resource_usage"
      register: post_upgrade_resources
      
    - name: Verify security policies are active
      fortinet.fortios.fortios_monitor_fact:
        vdom: "root"
        selector: "firewall_policy_stats"
      register: policy_stats
      
    - name: Check interface status
      fortinet.fortios.fortios_monitor_fact:
        vdom: "root"
        selector: "system_interface_physical"
      register: interface_status
      
    - name: Validate VPN tunnel recovery
      fortinet.fortios.fortios_monitor_fact:
        vdom: "root"
        selector: "vpn_ssl_stats"
      register: post_vpn_status
      failed_when: false

- name: Log standalone upgrade completion
  ansible.builtin.debug:
    msg: |
      FortiOS Standalone Upgrade Completed:
      - Previous Version: {{ fortios_upgrade_state.current_version }}
      - New Version: {{ post_reboot_status.meta.results.version }}
      - System Health: {{ 'OK' if post_upgrade_resources.meta.results.cpu_usage | int < 50 else 'High Load' }}
      - Active Policies: {{ policy_stats.meta.results.total_policies | default(0) }}
      - Interface Status: {{ interface_status.meta.results | selectattr('status', 'equalto', 'up') | list | length }} up
      - VPN Tunnels: {{ post_vpn_status.meta.results.active_sessions | default(0) if post_vpn_status.meta is defined else 'N/A' }}
      - Upgrade Method: Standalone
      - Status: {{ 'Success' if fortios_upgrade_state.target_version in post_reboot_status.meta.results.version else 'Verification Required' }}