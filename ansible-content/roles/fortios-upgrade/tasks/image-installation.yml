---
# Image Installation for FortiOS Devices
# Handles firmware installation for standalone and HA cluster configurations

- name: Pre-installation validation
  block:
    - name: Verify firmware image is staged and ready
      fortinet.fortios.fortios_monitor_fact:
        vdom: "root"
        selector: "system_firmware"
      register: pre_install_firmware_check

    - name: Confirm target firmware is available
      ansible.builtin.assert:
        that:
          - >-
            pre_install_firmware_check.meta.results |
            selectattr('version', 'equalto',
            fortios_upgrade_state.target_version) |
            list | length > 0
        fail_msg: "Target firmware not found in staged images"

    - name: Verify system readiness
      fortinet.fortios.fortios_monitor_fact:
        vdom: "root"
        selector: "system_status"
      register: pre_install_system_status

- name: Backup configuration before installation
  block:
    - name: Create comprehensive system backup
      fortinet.fortios.fortios_monitor:
        vdom: "root"
        selector: "system_config_backup"
        params:
          scope: "global"
          vdom: "all"
          destination: "local"
      register: pre_install_backup

    - name: Verify backup completion
      ansible.builtin.assert:
        that:
          - pre_install_backup.meta.results.status == "success"
        fail_msg: "System backup failed - aborting installation"

- name: Execute firmware installation
  block:
    - name: Install firmware image
      fortinet.fortios.fortios_monitor:
        vdom: "root"
        selector: "upgrade.system.firmware"
        params:
          version: "{{ fortios_upgrade_state.target_version }}"
          source: "upload"
          format: "normal"
          reboot: true
      register: firmware_installation
      timeout: 1800

    - name: Monitor installation progress
      fortinet.fortios.fortios_monitor_fact:
        vdom: "root"
        selector: "system_status"
      register: install_progress
      until: >-
        install_progress.meta.results.status in
        ['completed', 'failed', 'rebooting']
      retries: 60
      delay: 30
      failed_when: install_progress.meta.results.status == 'failed'

    - name: Validate installation initiation
      ansible.builtin.assert:
        that:
          - >-
            install_progress.meta.results.status in
            ['completed', 'rebooting']
        fail_msg: "Firmware installation failed to complete properly"

- name: Handle system reboot and recovery
  block:
    - name: Wait for system reboot to begin
      ansible.builtin.pause:
        seconds: 60

    - name: Wait for device to become unreachable (reboot confirmation)
      ansible.builtin.wait_for:
        host: "{{ ansible_host }}"
        port: 443
        state: stopped
        timeout: 600
        delay: 30
      delegate_to: localhost

    - name: Wait for device to come back online
      ansible.builtin.wait_for:
        host: "{{ ansible_host }}"
        port: 443
        state: started
        timeout: 1200
        delay: 60
      delegate_to: localhost

    - name: Wait for FortiOS services to initialize
      ansible.builtin.pause:
        seconds: 180

- name: Post-installation validation
  block:
    - name: Verify system responsiveness
      fortinet.fortios.fortios_monitor_fact:
        vdom: "root"
        selector: "system_status"
      register: post_install_system_status
      retries: 10
      delay: 30

    - name: Confirm target firmware version is active
      ansible.builtin.assert:
        that:
          - >-
            fortios_upgrade_state.target_version in
            post_install_system_status.meta.results.version
        fail_msg: >-
          Installation completed but target version not active:
          {{ post_install_system_status.meta.results.version }}

    - name: Verify system health post-installation
      fortinet.fortios.fortios_monitor_fact:
        vdom: "root"
        selector: "system_resource_usage"
      register: post_install_health

    - name: Check critical system services
      fortinet.fortios.fortios_monitor_fact:
        vdom: "root"
        selector: "system_performance_status"
      register: post_install_performance
      failed_when: false

    - name: Log performance check failures
      ansible.builtin.debug:
        msg: "Warning: Failed to check system performance: {{ post_install_performance.msg | default('Unknown error') }}"
      when:
        - post_install_performance is defined
        - post_install_performance.failed is defined
        - post_install_performance.failed | bool

- name: Validate security functionality
  block:
    - name: Check firewall policies status
      fortinet.fortios.fortios_monitor_fact:
        vdom: "root"
        selector: "firewall_policy"
      register: post_install_policies

    - name: Verify interface operational status
      fortinet.fortios.fortios_monitor_fact:
        vdom: "root"
        selector: "system_interface"
      register: post_install_interfaces

    - name: Check VPN tunnel status (if applicable)
      fortinet.fortios.fortios_monitor_fact:
        vdom: "root"
        selector: "vpn_ssl_stats"
      register: post_install_vpn
      failed_when: false

    - name: Log VPN status check failures
      ansible.builtin.debug:
        msg: "Warning: Failed to check VPN tunnel status: {{ post_install_vpn.msg | default('Unknown error') }}"
      when:
        - post_install_vpn is defined
        - post_install_vpn.failed is defined
        - post_install_vpn.failed | bool

    - name: Verify routing table
      fortinet.fortios.fortios_monitor_fact:
        vdom: "root"
        selector: "router_info_routing_table_all"
      register: post_install_routing
      failed_when: false

    - name: Log routing table check failures
      ansible.builtin.debug:
        msg: "Warning: Failed to verify routing table: {{ post_install_routing.msg | default('Unknown error') }}"
      when:
        - post_install_routing is defined
        - post_install_routing.failed is defined
        - post_install_routing.failed | bool

- name: HA cluster specific validation
  block:
    - name: Check HA cluster synchronization
      fortinet.fortios.fortios_monitor_fact:
        vdom: "root"
        selector: "system_ha_status"
      register: post_install_ha_status
      when: fortios_upgrade_state.ha_mode != "standalone"

    - name: Verify HA cluster health
      ansible.builtin.assert:
        that:
          - post_install_ha_status.meta.results.sync_status == "synchronized"
        fail_msg: "HA cluster not synchronized after installation"
      when: >-
        fortios_upgrade_state.ha_mode != "standalone" and
        post_install_ha_status is defined

    - name: Check HA peer status
      fortinet.fortios.fortios_monitor_fact:
        vdom: "root"
        selector: "system_ha_peer"
      register: post_install_ha_peers
      when: fortios_upgrade_state.ha_mode != "standalone"
      failed_when: false

    - name: Log HA peer check failures
      ansible.builtin.debug:
        msg: "Warning: Failed to check HA peer status: {{ post_install_ha_peers.msg | default('Unknown error') }}"
      when:
        - post_install_ha_peers is defined
        - post_install_ha_peers.failed is defined
        - post_install_ha_peers.failed | bool

- name: Licensing and feature validation
  block:
    - name: Verify license status after upgrade
      fortinet.fortios.fortios_monitor_fact:
        vdom: "root"
        selector: "license_status"
      register: post_install_license

    - name: Check feature availability
      ansible.builtin.assert:
        that:
          - post_install_license.meta.results.status in ["valid", "registered"]
        fail_msg: "License validation failed after installation"
      when: post_install_license.meta is defined

- name: Installation completion logging
  ansible.builtin.debug:
    msg: |-
      FortiOS Installation Completed Successfully:
      - Device Type: >-
          {{ 'HA Cluster' if fortios_upgrade_state.ha_mode != 'standalone'
          else 'Standalone' }}
      - Previous Version: {{ fortios_upgrade_state.current_version }}
      - New Version: {{ post_install_system_status.meta.results.version }}
      - HA Mode: {{ fortios_upgrade_state.ha_mode }}
      - System Health: >-
          {{ 'OK' if post_install_health.meta.results.cpu_usage | int < 50
          else 'High Load' }}
      - Active Policies: >-
          {{ post_install_policies.meta.results.total_policies | default(0) }}
      - Interface Status: >-
          {{ post_install_interfaces.meta.results |
          selectattr('status', 'equalto', 'up') | list | length }} up
      - VPN Tunnels: >-
          {{ post_install_vpn.meta.results.active_sessions | default('N/A') }}
      - HA Sync Status: >-
          {{ post_install_ha_status.meta.results.sync_status | default('N/A') }}
      - License Status: >-
          {{ post_install_license.meta.results.status | default('Unknown') }}
      - Status: SUCCESS
