---
# Image Loading for FortiOS Devices
# Securely transfers firmware images from server to device
# SECURITY: Uses server-initiated PUSH transfers when possible

- name: Pre-load system checks
  block:
    - name: Check available disk space
      fortinet.fortios.fortios_monitor_fact:
        vdom: "root"
        selector: "system_storage"
      register: storage_info

    - name: Verify sufficient space
      ansible.builtin.assert:
        that:
          - storage_info.meta.results.available_mb | int > 1000
        fail_msg: "Insufficient disk space for firmware download"

- name: Secure local image upload (Server-Initiated PUSH ONLY)
  block:
    - name: Push firmware image from server to FortiOS device
      fortinet.fortios.fortios_monitor:
        vdom: "root"
        selector: "system_firmware_upload"
        params:
          file_content: "{{ lookup('file', local_firmware_path) | b64encode }}"
          filename: "{{ fortios_upgrade_state.target_version }}.out"
      register: secure_upload
      delegate_to: localhost
      when: local_firmware_path is defined
      vars:
        ansible_connection: local

    - name: Verify secure upload completion
      fortinet.fortios.fortios_monitor_fact:
        vdom: "root"
        selector: "system_firmware_list"
      register: firmware_list
      when: local_firmware_path is defined and secure_upload is succeeded

- name: Validate staged firmware
  block:
    - name: Get list of available firmware images
      fortinet.fortios.fortios_monitor_fact:
        vdom: "root"
        selector: "system_firmware_list"
      register: available_firmware

    - name: Verify target firmware is available
      ansible.builtin.assert:
        that:
          - >
            available_firmware.meta.results | selectattr('version', 'equalto',
              fortios_upgrade_state.target_version) | list | length > 0
        fail_msg: "Target firmware not found in available images"

    - name: Check firmware integritycon
      fortinet.fortios.fortios_monitor:
        vdom: "root"
        selector: "system_firmware_verify"
        params:
          version: "{{ fortios_upgrade_state.target_version }}"
      register: firmware_verification

    - name: Confirm firmware integrity
      ansible.builtin.assert:
        that:
          - firmware_verification.meta.results.status == "valid"
        fail_msg: "Firmware integrity check failed"

- name: Log loading completion
  ansible.builtin.debug:
    msg: |-
      Secure FortiOS Image Loading Completed:
      - Target Version: {{ fortios_upgrade_state.target_version }}
      - Transfer Method: Server-Initiated PUSH (Secure Upload)
      - >-
        File Size: {{ available_firmware.meta.results |
          selectattr('version', 'equalto',
          fortios_upgrade_state.target_version) |
          map(attribute='size_mb') | first | default('Unknown') }} MB
      - >-
        Integrity: {{ firmware_verification.meta.results.status |
          default('Not Verified') }}
      - Security: PUSH transfer from server (HIGH SECURITY)
      - Status: Ready for Installation
