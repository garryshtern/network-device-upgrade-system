---
# FortiOS Upgrade Role - Main Tasks
# Handles Fortinet firewall upgrades with HA cluster support

- name: Initialize FortiOS upgrade variables
  ansible.builtin.set_fact:
    fortios_upgrade_state:
      device: "{{ inventory_hostname }}"
      current_version: ""
      target_version: "{{ target_firmware_version }}"
      ha_mode: "standalone"
      ha_role: "master"
      cluster_member: ""
      license_status: "unknown"
      vdom_mode: false
      multi_step_required: "{{ multi_step_upgrade_required | default(false) }}"
      upgrade_path: "{{ upgrade_path | default([target_firmware_version]) }}"
      current_step: "{{ current_step | default(0) }}"

- name: Skip FortiOS upgrade in check mode
  ansible.builtin.debug:
    msg: "FortiOS upgrade skipped in check mode - requires API connectivity"
  when: ansible_check_mode

- name: FortiOS upgrade tasks
  block:
    - name: Gather FortiOS device facts
      fortinet.fortios.fortios_monitor_fact:
        vdom: "root"
        selector: "system_status"
      register: fortios_facts

    - name: Parse device information
      ansible.builtin.set_fact:
        fortios_upgrade_state: >
          "{{ fortios_upgrade_state | combine({'current_version': >
            fortios_facts.meta.results.version,
            'ha_mode': fortios_facts.meta.results.ha_mode,
          'ha_role': >
            fortios_facts.meta.results.ha_group_name
              | default('standalone'), 'vdom_mode': >
              fortios_facts.meta.results.vdom_mode == 'enable'}) }}"

    - name: Check HA cluster configuration
      ansible.builtin.include_tasks: ha-coordination.yml
      when: fortios_upgrade_state.ha_mode != "standalone"

    - name: Validate FortiCare license
      ansible.builtin.include_tasks: license-validation.yml

    - name: Display upgrade plan
      ansible.builtin.debug:
        msg: |
          FortiOS Upgrade Plan for {{ inventory_hostname }}:
          Current Version: {{ fortios_upgrade_state.current_version }}
          Target Version: {{ fortios_upgrade_state.target_version }}
          Multi-Step Required: {{ fortios_upgrade_state.multi_step_required }}
          Upgrade Path: {{ fortios_upgrade_state.upgrade_path | join(' â†’ ') }}
          Current Step: >-
            {{ fortios_upgrade_state.current_step }}/
            {{ fortios_upgrade_state.upgrade_path |
                length }}
          HA Mode: {{ fortios_upgrade_state.ha_mode }}
          HA Role: {{ fortios_upgrade_state.ha_role }}
          VDOM Mode: {{ fortios_upgrade_state.vdom_mode }}
          License: {{ fortios_upgrade_state.license_status }}

    - name: Validate upgrade path
      ansible.builtin.assert:
        that:
          - fortios_upgrade_state.current_version
            != fortios_upgrade_state.target_version
          - fortios_upgrade_state.target_version
            is match("^[0-9]+\\.[0-9]+\\.[0-9]+")
          - fortios_upgrade_state.license_status == "valid"
          - fortios_upgrade_state.upgrade_path | length > 0
          - >
            fortios_upgrade_state.current_step <
              fortios_upgrade_state.upgrade_path | length
        fail_msg: >
          "Invalid upgrade path, version format,
            license issue, or step configuration"

    - name: Execute multi-step upgrade process
      ansible.builtin.include_tasks: multi-step-upgrade.yml
      when: fortios_upgrade_state.multi_step_required | bool

    - name: Execute single-step upgrade based on HA mode
      ansible.builtin.include_tasks: "{{ upgrade_task_file }}"
      vars:
        upgrade_task_file: >-
          {{ 'ha-cluster-upgrade.yml' if fortios_upgrade_state.ha_mode !=
             'standalone' else 'standalone-upgrade.yml' }}
      when: not (fortios_upgrade_state.multi_step_required | bool)
  when: not ansible_check_mode