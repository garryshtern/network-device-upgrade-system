---
# Opengear Storage Assessment

- name: Detect Opengear storage mount points
  ansible.builtin.raw: >
    "df -h | grep -E '(/var/mnt/storage\.(usb|nvlog)|/var/nvlog)' ||
    echo '/var/mnt/storage.nvlog not mounted'"
  register: opengear_mount_check
  changed_when: false

- name: Determine primary storage location
  ansible.builtin.set_fact:
    opengear_storage_path: >-
      {%- if opengear_mount_check.stdout is defined and
             '/var/mnt/storage.nvlog' in opengear_mount_check.stdout -%}
      /var/mnt/storage.nvlog
      {%- elif opengear_mount_check.stdout is defined and
               '/var/mnt/storage.usb' in opengear_mount_check.stdout -%}
      /var/mnt/storage.usb
      {%- else -%}
      /var/nvlog
      {%- endif %}

- name: Get Opengear storage information
  ansible.builtin.raw: "df -h {{ opengear_storage_path }}"
  register: opengear_storage_info
  changed_when: false

- name: Get firmware files in storage location
  ansible.builtin.raw: >
    "ls -la {{ opengear_storage_path }}/*.flash
      {{ opengear_storage_path }}/*.raucb {{ opengear_storage_path }}/*.img
      {{ opengear_storage_path }}/*.bin
    2>/dev/null || echo 'No firmware files found'"
  register: opengear_firmware_files
  changed_when: false

- name: Get temporary files in storage location
  ansible.builtin.raw: >
    "ls -la {{ opengear_storage_path }}/upgrade_*
      {{ opengear_storage_path }}/opengear_*
      2>/dev/null || echo 'No temporary files found'"
  register: opengear_temp_files
  changed_when: false

- name: Parse storage information
  ansible.builtin.set_fact:
    opengear_total_size: >-
      {{ opengear_storage_info.stdout |
         regex_search('{{ opengear_storage_path | regex_escape }}\\s+(\\S+)', '\\1') | first
         if opengear_storage_info.stdout is defined
         else '10G' }}
    opengear_available_size: >-
      {{ opengear_storage_info.stdout |
         regex_search('{{ opengear_storage_path | regex_escape }}\\s+\\S+\\s+\\S+\\s+(\\S+)', '\\1') | first
         if opengear_storage_info.stdout is defined
         else '8G' }}
    opengear_usage_percent: >-
      {{ opengear_storage_info.stdout |
         regex_search('{{ opengear_storage_path | regex_escape }}\\s+\\S+\\s+\\S+\\s+\\S+\\s+(\\d+)%', '\\1') | first
         if opengear_storage_info.stdout is defined
         else '20' }}

- name: Parse file listings
  ansible.builtin.set_fact:
    opengear_firmware_images: >-
      {{ opengear_firmware_files.stdout_lines |
         select('match', '.*(flash|raucb|img|bin)$') |
         map('regex_replace', '.* ([^/]+\\.(flash|raucb|img|bin))$', '\\1') | list
         if opengear_firmware_files.stdout_lines is defined
         else [] }}
    opengear_temp_file_list: >-
      {{ opengear_temp_files.stdout_lines |
         select('match', '.*(upgrade_|opengear_).*') |
         map('regex_replace', '.* ([^/]+)$', '\\1') | list
         if opengear_temp_files.stdout_lines is defined
         else [] }}

- name: Initialize storage_info for opengear if not defined
  ansible.builtin.set_fact:
    storage_info: {}
  when: storage_info is not defined

- name: Convert storage sizes to GB
  ansible.builtin.set_fact:
    storage_info: >-
      {{ storage_info | combine({
        'total_space_gb': (opengear_total_size | regex_replace('[KMG]', '')
          | float * (0.000001 if 'K' in opengear_total_size
          else (0.001 if 'M' in opengear_total_size else 1))) | round(2),
        'free_space_gb': (opengear_available_size | regex_replace('[KMG]', '')
          | float * (0.000001 if 'K' in opengear_available_size
          else (0.001 if 'M' in opengear_available_size else 1))) | round(2),
        'images_found': opengear_firmware_images + opengear_temp_file_list,
        'cleanup_candidates': opengear_firmware_images + opengear_temp_file_list
      }) }}
