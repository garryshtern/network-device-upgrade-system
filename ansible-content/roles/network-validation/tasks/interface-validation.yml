---
# Interface State Validation
# Validates interface operational status, error counters, and optics
# UPDATED: Removed mgt0 checks (not connected on most devices)
# UPDATED: Removed admin_state parsing (not available in NXOS commands)
# UPDATED: Removed generic device support

- name: Gather interface information (NX-OS)
  when:
    - ansible_network_os is defined
    - ansible_network_os == "cisco.nxos.nxos"
    - not ansible_check_mode
  block:
    - name: Get interface configuration using nxos_facts
      cisco.nxos.nxos_facts:
        gather_subset:
          - '!all'
          - '!min'
        gather_network_resources:
          - interfaces
          - l3_interfaces
      register: nxos_interface_facts

    - name: Get interface operational state (error counters)
      cisco.nxos.nxos_command:
        commands:
          - show interface counters errors | json
      register: nxos_interface_errors

- name: Gather interface information (IOS-XE)
  when:
    - ansible_network_os is defined
    - ansible_network_os == "cisco.ios.ios"
    - not ansible_check_mode
  block:
    - name: Get interface status (IOS-XE)
      cisco.ios.ios_command:
        commands:
          - show ip interface brief
          - show interfaces summary
          - show interfaces counters errors
      register: ios_interface_info

- name: Parse interface status for NX-OS
  when:
    - ansible_network_os is defined
    - ansible_network_os == "cisco.nxos.nxos"
    - nxos_interface_facts is defined
    - not ansible_check_mode
  block:
    - name: Extract NX-OS interface data from facts
      ansible.builtin.set_fact:
        all_interfaces: "{{ ansible_net_resources.interfaces | default([]) }}"
        interface_errors: "{{ nxos_interface_errors.stdout[0] | from_json }}"

    - name: Parse interface states from facts
      ansible.builtin.set_fact:
        up_interfaces: >-
          {{ all_interfaces |
            selectattr('enabled', 'equalto', true) | list }}
        down_interfaces: >-
          {{ all_interfaces |
            selectattr('enabled', 'equalto', false) | list }}
      when:
        - all_interfaces | length > 0

- name: Interface operational validation (NX-OS)
  when:
    - ansible_network_os is defined
    - ansible_network_os == "cisco.nxos.nxos"
    - not ansible_check_mode
  block:
    - name: Check critical interface states
      ansible.builtin.assert:
        that:
          - up_interfaces | default([]) | length > 0
        fail_msg: "No interfaces are in 'up' state"

    - name: Check for interface errors
      ansible.builtin.debug:
        msg: |
          Interface Error Summary:
          {% for intf in interface_errors.TABLE_interface.ROW_interface
            | default([]) %}
          {% if intf.in_error | int > 0 or intf.out_error | int > 0 %}
          - >-
            {{ intf.interface }}: In Errors: {{
              intf.in_error }}, Out Errors: {{ intf.out_error }}
          {% endif %}
          {% endfor %}
      when:
        - interface_errors.TABLE_interface is defined

- name: VLAN assignment validation (NX-OS)
  when:
    - ansible_network_os is defined
    - ansible_network_os == "cisco.nxos.nxos"
    - not ansible_check_mode
  block:
    - name: Get VLAN configuration using nxos_facts
      cisco.nxos.nxos_facts:
        gather_subset:
          - '!all'
          - '!min'
        gather_network_resources:
          - vlans
      register: vlan_facts

    - name: Validate VLAN assignments
      ansible.builtin.debug:
        msg: |
          VLAN Summary:
          Active VLANs: {{ ansible_net_resources.vlans |
            selectattr('enabled', 'equalto', true) | list | length }}
          Total VLANs: {{ ansible_net_resources.vlans | length }}
      when:
        - vlan_facts is defined
        - ansible_net_resources.vlans is defined

- name: Link aggregation validation (NX-OS)
  when:
    - ansible_network_os is defined
    - ansible_network_os == "cisco.nxos.nxos"
    - not ansible_check_mode
  block:
    - name: Get port-channel configuration using nxos_facts
      cisco.nxos.nxos_facts:
        gather_subset:
          - '!all'
          - '!min'
        gather_network_resources:
          - lag_interfaces
      register: portchannel_facts
      failed_when: false

    - name: Validate port-channel states
      ansible.builtin.debug:
        msg: |
          Port-Channel Summary:
          {% for pc in ansible_net_resources.lag_interfaces | default([]) %}
          - >-
            {{ pc.name }}: {{ pc.members | length }} members
          {% endfor %}
      when:
        - portchannel_facts is defined
        - ansible_net_resources.lag_interfaces is defined

- name: Optics diagnostics validation (NX-OS)
  when:
    - ansible_network_os is defined
    - ansible_network_os == "cisco.nxos.nxos"
    - not ansible_check_mode
  block:
    - name: Get transceiver information
      cisco.nxos.nxos_command:
        commands:
          - show interface transceiver details | json
      register: transceiver_info
      failed_when: false

    - name: Check SFP/QSFP status
      ansible.builtin.debug:
        msg: |
          Transceiver Status:
          {% for intf in transceiver_info.stdout[0] | from_json |
            json_query('TABLE_interface.ROW_interface') | default([]) %}
          {% if intf.sfp is defined %}
          - >-
            {{ intf.interface }}: {{ intf.sfp }}
            ({{ intf.type | default('Unknown') }})
          {% endif %}
          {% endfor %}
      when:
        - transceiver_info is defined
        - transceiver_info is not skipped
        - transceiver_info.stdout is defined

- name: Store interface baseline (for comparison)
  ansible.builtin.set_fact:
    interface_baseline:
      timestamp: "{{ lookup('pipe', 'date -u +%Y-%m-%dT%H:%M:%SZ') }}"
      total_interfaces: "{{ all_interfaces | length }}"
      up_interfaces: "{{ up_interfaces | length }}"
      down_interfaces: "{{ down_interfaces | length }}"
      interface_list: "{{ up_interfaces | map(attribute='name') | list }}"
  when:
    - not ansible_check_mode

- name: Store interface baseline for check mode
  ansible.builtin.set_fact:
    interface_baseline:
      timestamp: "{{ lookup('pipe', 'date -u +%Y-%m-%dT%H:%M:%SZ') }}"
      total_interfaces: 0
      up_interfaces: 0
      down_interfaces: 0
      interface_list: []
  when:
    - ansible_check_mode

- name: Interface validation summary
  ansible.builtin.debug:
    msg: |
      Interface Validation Results:
      - Total Interfaces: {{ interface_baseline.total_interfaces }}
      - Operational (Up): {{ interface_baseline.up_interfaces }}
      - Down: {{ interface_baseline.down_interfaces }}
      - >-
        Critical Interfaces Up: {{ 'PASS' if
          interface_baseline.up_interfaces | int > 0 else 'FAIL' }}
      - >-
        Validation Status: {{ 'COMPLETE' if
          interface_baseline.total_interfaces | int > 0 else 'NO DATA' }}
