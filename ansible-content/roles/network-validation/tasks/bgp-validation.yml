---
# BGP State Validation Tasks
# Comprehensive BGP neighbor and routing validation as per requirements

- name: Initialize BGP validation results
  ansible.builtin.set_fact:
    bgp_validation:
      device: "{{ inventory_hostname }}"
      timestamp: "{{ lookup('pipe', 'date -u +%Y-%m-%dT%H:%M:%SZ') }}"
      validation_type: "bgp"
      baseline: {}
      current: {}
      comparison: {}
      passed: false
      errors: []
      warnings: []

- name: Gather BGP summary information
  block:
    - name: Get BGP summary (Cisco)
      cisco.nxos.nxos_command:
        commands:
          - show bgp all summary
      register: bgp_summary_raw
      when: ansible_network_os in ['cisco.nxos.nxos', 'cisco.ios.ios']

    - name: Get BGP summary (Arista)
      arista.eos.eos_command:
        commands:
          - show bgp summary
      register: bgp_summary_raw
      when: ansible_network_os == 'arista.eos.eos'

    - name: Parse BGP neighbor states
      ansible.builtin.set_fact:
        bgp_neighbors: "{{ bgp_summary_raw.stdout[0] | bgp_neighbors_parser }}"
      vars:
        bgp_neighbors_parser: >-
          {%- set neighbors = [] -%}
          {%- for line in bgp_summary_raw.stdout[0].split('\n') -%}
            {%- if line | regex_search('^\d+\.\d+\.\d+\.\d+') -%}
              {%- set parts = line.split() -%}
              {%- if parts | length >= 6 -%}
                {%- set neighbor = {
                  'neighbor_ip': parts[0],
                  'version': parts[1] | default('4'),
                  'as_number': parts[2],
                  'msg_received':
                    parts[3] | int if parts[3] | regex_search('^\d+$') else 0,
                  'msg_sent':
                    parts[4] | int if parts[4] | regex_search('^\d+$') else 0,
                  'state': parts[5],
                  'uptime': parts[6] if parts | length > 6 else 'unknown',
                  'received_prefixes':
                    parts[7] | int if parts | length > 7
                      and parts[7] | regex_search('^\d+$') else 0
                } -%}
                {%- set _ = neighbors.append(neighbor) -%}
              {%- endif -%}
            {%- endif -%}
          {%- endfor -%}
          {{ neighbors }}

  rescue:
    - name: Handle BGP command failure
      ansible.builtin.set_fact:
        bgp_validation: "{{ bgp_validation | combine({
          'errors': >
            bgp_validation.errors + ['Failed to retrieve BGP summary: ' +
              ansible_failed_result.msg | default('Unknown error')]
        }) }}"

- name: Collect detailed BGP statistics
  block:
    - name: Get BGP neighbor received routes
      cisco.nxos.nxos_command:
        commands:
          - >
            "show bgp all neighbors {{ item.neighbor_ip }} received-routes summary"
      register: bgp_received_routes
      loop: "{{ bgp_neighbors | default([]) }}"
      when:
        - ansible_network_os in ['cisco.nxos.nxos', 'cisco.ios.ios']
        - bgp_neighbors is defined
      failed_when: false

    - name: Get BGP neighbor advertised routes
      cisco.nxos.nxos_command:
        commands:
          - >
            "show bgp all neighbors {{ item.neighbor_ip }} advertised-routes summary"
      register: bgp_advertised_routes
      loop: "{{ bgp_neighbors | default([]) }}"
      when:
        - ansible_network_os in ['cisco.nxos.nxos', 'cisco.ios.ios']
        - bgp_neighbors is defined
      failed_when: false

  rescue:
    - name: Log BGP detailed statistics failure
      ansible.builtin.set_fact:
        bgp_validation: "{{ bgp_validation | combine({
          'warnings': >
            bgp_validation.warnings + ['Could
              not retrieve detailed BGP statistics']
        }) }}"

- name: Analyze BGP neighbor states
  ansible.builtin.set_fact:
    bgp_analysis:
      total_neighbors: "{{ bgp_neighbors | length }}"
      established_neighbors: >
        "{{ bgp_neighbors | selectattr('state',
          'equalto', 'Established') | list | length }}"
      idle_neighbors: >
        "{{ bgp_neighbors | selectattr('state',
          'equalto', 'Idle') | list | length }}"
      connecting_neighbors: >
        "{{ bgp_neighbors | selectattr('state',
          'equalto', 'Connect') | list | length }}"
      active_neighbors: >
        "{{ bgp_neighbors | selectattr('state',
          'equalto', 'Active') | list | length }}"
      total_received_prefixes: >
        "{{ bgp_neighbors | sum(attribute='received_prefixes') }}"
      down_neighbors: >
        "{{ bgp_neighbors | rejectattr('state',
          'equalto', 'Established') | list }}"
  when: bgp_neighbors is defined

- name: Store current BGP state
  ansible.builtin.set_fact:
    bgp_validation: "{{ bgp_validation | combine({
      'current': {
        'neighbors': bgp_neighbors | default([]),
        'analysis': bgp_analysis | default({}),
        'collection_time': lookup('pipe', 'date -u +%Y-%m-%dT%H:%M:%SZ')
      }
    }) }}"

- name: Load baseline BGP state if available
  block:
    - name: Check for existing baseline
      ansible.builtin.stat:
        path: >
          "/var/log/network-upgrade/baselines/{{ inventory_hostname }}_bgp_baseline.json"
      register: baseline_file
      delegate_to: localhost

    - name: Load baseline data
      ansible.builtin.set_fact:
        bgp_baseline: >-
          {{ lookup('file', '/var/log/network-upgrade/baselines/' + inventory_hostname + '_bgp_baseline.json') |
            from_json }}
      when:
        - baseline_file.stat.exists
        - validation_mode == 'post_upgrade'

    - name: Store baseline in validation results
      ansible.builtin.set_fact:
        bgp_validation: "{{ bgp_validation | combine({
          'baseline': bgp_baseline | default({})
        }) }}"
      when: bgp_baseline is defined

  rescue:
    - name: Handle baseline loading failure
      ansible.builtin.set_fact:
        bgp_validation: "{{ bgp_validation | combine({
          'warnings': >
            bgp_validation.warnings + ['Could
              not load BGP baseline for comparison']
        }) }}"

- name: Save baseline BGP state (pre-upgrade only)
  ansible.builtin.copy:
    content: "{{ bgp_validation.current | to_nice_json }}"
    dest: >
      "/var/log/network-upgrade/baselines/{{ inventory_hostname }}_bgp_baseline.json"
    mode: '0644'
  delegate_to: localhost
  when: validation_mode == 'pre_upgrade'

- name: Compare BGP states (post-upgrade validation)
  block:
    - name: Perform BGP state comparison
      ansible.builtin.set_fact:
        bgp_comparison:
          neighbor_count_match: "
      {{ bgp_validation.baseline.analysis.total_neighbors |
              default(0) == bgp_validation.current.analysis.total_neighbors | default(0) }}
            "
          established_count_match: "
      {{ bgp_validation.baseline.analysis.established_neighbors |
              default(0) == bgp_validation.current.analysis.established_neighbors | default(0) }}
            "
          prefix_count_variance: "
      {{ ((bgp_validation.current.analysis.total_received_prefixes |
              default(0) - bgp_validation.baseline.analysis.total_received_prefixes | default(0)) | abs) }}
            "
          prefix_variance_percentage: "
      {{ ((bgp_validation.current.analysis.total_received_prefixes |
              default(1) - bgp_validation.baseline.analysis.total_received_prefixes | default(1)) / (bgp_validation.baseline.analysis.total_received_prefixes | default(1)) * 100) | abs }}
            "
          new_down_neighbors: []
          recovered_neighbors: []

    - name: Identify neighbor state changes
      ansible.builtin.set_fact:
        bgp_comparison: "{{ bgp_comparison | combine({
          'new_down_neighbors': >
            current_down_neighbors |
              difference(baseline_down_neighbors | default([])),
          'recovered_neighbors': >
            baseline_down_neighbors | default([]) | difference(current_down_neighbors)
        }) }}"
      vars:
        current_down_neighbors: >-
          {{ bgp_validation.current.neighbors |
            rejectattr('state', 'equalto', 'Established') | map(attribute='neighbor_ip') | list }}
        baseline_down_neighbors: >-
          {{ bgp_validation.baseline.neighbors |
            default([]) | rejectattr('state', 'equalto', 'Established') | map(attribute='neighbor_ip') | list }}

    - name: Store comparison results
      ansible.builtin.set_fact:
        bgp_validation: "{{ bgp_validation | combine({
          'comparison': bgp_comparison
        }) }}"

  when:
    - validation_mode == 'post_upgrade'
    - bgp_validation.baseline != {}

- name: Evaluate BGP validation results
  ansible.builtin.set_fact:
    bgp_validation_passed: "{{
      bgp_validation.current.analysis.established_neighbors | default(0) > 0 and
      (validation_mode == 'pre_upgrade' or
       (bgp_validation.comparison.neighbor_count_match | default(true) and
        bgp_validation.comparison.established_count_match | default(true) and
        bgp_validation.comparison.prefix_variance_percentage
          | default(0) <= 10 and
        bgp_validation.comparison.new_down_neighbors
          | default([]) | length == 0))
    }}"

- name: Add validation errors for failures
  ansible.builtin.set_fact:
    bgp_validation: "{{ bgp_validation | combine({
      'errors': bgp_validation.errors + validation_errors
    }) }}"
  vars:
    validation_errors: |
      {%- set errors = [] -%}
      {%- if bgp_validation.current.analysis.established_neighbors
        | default(0) == 0 -%}
        {%- set _ = errors.append('No BGP neighbors in Established state') -%}
      {%- endif -%}
      {%- if validation_mode == 'post_upgrade'
        and bgp_validation.baseline != {} -%}
        {%- if not bgp_validation.comparison.neighbor_count_match
          | default(true) -%}
          {%- set _ = errors.append('BGP neighbor count mismatch: >
            baseline=' + (bgp_validation.baseline.analysis.total_neighbors | default(0) | string) +
              ', current=' + (bgp_validation.current.analysis.total_neighbors | default(0) | string)) -%}
        {%- endif -%}
        {%- if not bgp_validation.comparison.established_count_match
          | default(true) -%}
          {%- set _ = errors.append('Established BGP neighbor count mismatch: >
            baseline=' + (bgp_validation.baseline.analysis.established_neighbors | default(0) | string) +
              ', current=' + (bgp_validation.current.analysis.established_neighbors | default(0) | string)) -%}
        {%- endif -%}
        {%- if bgp_validation.comparison.prefix_variance_percentage
          | default(0) > 10 -%}
          {%- set _ = errors.append('BGP prefix count variance exceeds 10%: >
            ' + (bgp_validation.comparison.prefix_variance_percentage
              | default(0) | round(2) | string) + '%') -%}
        {%- endif -%}
        {%- for neighbor in bgp_validation.comparison.new_down_neighbors
          | default([]) -%}
          {%- set _ = errors.append('BGP neighbor
            down after upgrade: ' + neighbor) -%}
        {%- endfor -%}
      {%- endif -%}
        {{ errors }}

- name: Set final BGP validation status
  ansible.builtin.set_fact:
    bgp_validation: "{{ bgp_validation | combine({
      'passed': bgp_validation_passed,
      'summary': {
        'total_neighbors': >
          bgp_validation.current.analysis.total_neighbors | default(0),
        'established_neighbors': >
          bgp_validation.current.analysis.established_neighbors | default(0),
        'total_prefixes': >
          bgp_validation.current.analysis.total_received_prefixes | default(0),
        'validation_passed': bgp_validation_passed
      }
    }) }}"

- name: Log BGP validation to InfluxDB
  ansible.builtin.uri:
    url: >
      "{{ influxdb_url }}/api/v2/write?bucket={{
        influxdb_bucket }}&org={{ influxdb_org }}"
    method: POST
    headers:
      Authorization: "Token {{ influxdb_token }}"
    body: >-
      network_validation,device_id={{ inventory_hostname }},validation_type=bgp,protocol=bgp baseline_count={{ bgp_validation.baseline.analysis.total_neighbors | default(0) }},current_count={{ bgp_validation.current.analysis.established_neighbors | default(0) }},validation_success={{ bgp_validation.passed | lower }},convergence_time=0 {{ ansible_play_batch | hash('md5') }}000000000
  when:
    - influxdb_url is defined
    - send_metrics | default(true)
  failed_when: false

- name: Display BGP validation results
  ansible.builtin.debug:
    msg: |
      BGP Validation Results for {{ inventory_hostname }}:
      Status: {{ 'PASSED' if bgp_validation.passed else 'FAILED' }}
      Total Neighbors: {{ bgp_validation.current.analysis.total_neighbors | default(0) }}
      Established Neighbors: {{ bgp_validation.current.analysis.established_neighbors | default(0) }}
      Total Prefixes: {{ bgp_validation.current.analysis.total_received_prefixes | default(0) }}
      {% if validation_mode == 'post_upgrade' and bgp_validation.baseline != {} %}
      Baseline Comparison:
      - Neighbor Count Match: {{ bgp_validation.comparison.neighbor_count_match | default('N/A') }}
      - Established Count Match: {{ bgp_validation.comparison.established_count_match | default('N/A') }}
      - Prefix Variance: {{ bgp_validation.comparison.prefix_variance_percentage | default(0) | round(2) }}%
      {% if bgp_validation.comparison.new_down_neighbors | default([]) | length > 0 %}
      - New Down Neighbors: {{ bgp_validation.comparison.new_down_neighbors | join(', ') }}
      {% endif %}
      {% if bgp_validation.comparison.recovered_neighbors | default([]) | length > 0 %}
      - Recovered Neighbors: {{ bgp_validation.comparison.recovered_neighbors | join(', ') }}
      {% endif %}
      {% endif %}
      {% if bgp_validation.errors | length > 0 %}
      Errors:
      {% for error in bgp_validation.errors %}
      - {{ error }}
      {% endfor %}
      {% endif %}
      {% if bgp_validation.warnings | length > 0 %}
      Warnings:
      {% for warning in bgp_validation.warnings %}
      - {{ warning }}
      {% endfor %}
      {% endif %}
