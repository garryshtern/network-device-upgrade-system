---
# BGP State Validation Tasks
# UPDATED: Only validates if BGP is configured on device
# Skips validation if BGP is not in use

- name: Initialize BGP validation results
  ansible.builtin.set_fact:
    bgp_validation:
      device: "{{ inventory_hostname }}"
      timestamp: "{{ lookup('pipe', 'date -u +%Y-%m-%dT%H:%M:%SZ') }}"
      validation_type: "bgp"
      baseline: {}
      current: {}
      comparison: {}
      passed: true
      errors: []
      warnings: []
      bgp_configured: false

- name: Set validation mode defaults
  ansible.builtin.set_fact:
    validation_mode: >-
      {{
        validation_mode | default(
          capture_mode | default(
            validation_type | default(
              check_type | default('baseline')
            )
          )
        )
      }}

- name: Check if BGP is configured on device
  block:
    - name: Check BGP configuration (Cisco)
      cisco.nxos.nxos_command:
        commands:
          - show running-config bgp
      register: bgp_config_check
      when:
        - ansible_network_os is defined
        - ansible_network_os in ['cisco.nxos.nxos', 'cisco.ios.ios']
        - not ansible_check_mode
      failed_when: false

    - name: Determine if BGP is configured
      ansible.builtin.set_fact:
        bgp_validation: "{{ bgp_validation | combine({'bgp_configured': bgp_is_configured}) }}"
      vars:
        bgp_is_configured: >-
          {{
            (bgp_config_check is defined and
             bgp_config_check.stdout is defined and
             bgp_config_check.stdout | length > 0 and
             'router bgp' in bgp_config_check.stdout[0])
          }}
      when:
        - bgp_config_check is defined
        - not ansible_check_mode

    - name: Set BGP configured for check mode
      ansible.builtin.set_fact:
        bgp_validation: "{{ bgp_validation | combine({'bgp_configured': true}) }}"
      when: ansible_check_mode

  rescue:
    - name: Handle BGP configuration check failure
      ansible.builtin.set_fact:
        bgp_validation: "{{ bgp_validation | combine({'warnings': bgp_validation.warnings + ['Could not determine BGP configuration status - skipping BGP validation'], 'bgp_configured': false}) }}"

- name: Skip BGP validation if not configured
  ansible.builtin.debug:
    msg: "BGP is not configured on {{ inventory_hostname }} - skipping BGP validation"
  when: not bgp_validation.bgp_configured

- name: Gather BGP summary information
  when: bgp_validation.bgp_configured
  block:
    - name: Gather BGP facts using nxos_facts module
      cisco.nxos.nxos_facts:
        gather_subset:
          - '!all'
          - '!min'
        gather_network_resources:
          - bgp_global
          - bgp_address_family
      register: bgp_facts
      when:
        - ansible_network_os == 'cisco.nxos.nxos'
        - not ansible_check_mode

    - name: Extract BGP configuration from facts
      ansible.builtin.set_fact:
        bgp_asn: "{{ ansible_net_resources.bgp_global.as_number | default('') }}"
        bgp_router_id: "{{ ansible_net_resources.bgp_global.router_id | default('') }}"
        bgp_neighbors: "{{ ansible_net_resources.bgp_global.neighbors | default([]) }}"
      when:
        - bgp_facts is defined
        - ansible_net_resources is defined
        - ansible_net_resources.bgp_global is defined
        - not ansible_check_mode

  rescue:
    - name: Handle BGP command failure
      ansible.builtin.set_fact:
        bgp_validation: "{{ bgp_validation | combine({'errors': bgp_validation.errors + ['Failed to retrieve BGP summary: ' + (ansible_failed_result.msg | default('Unknown error'))]}) }}"

- name: Analyze BGP neighbor states
  when: bgp_validation.bgp_configured
  block:
    - name: Count BGP neighbor states
      ansible.builtin.set_fact:
        bgp_neighbors_established: >-
          {{ bgp_neighbors |
             selectattr('neighbor_state', 'defined') |
             selectattr('neighbor_state', 'equalto', 'Established') |
             list | length }}
        bgp_neighbors_total: "{{ bgp_neighbors | length }}"
      when:
        - bgp_neighbors is defined
        - not ansible_check_mode

  rescue:
    - name: Log BGP detailed statistics failure
      ansible.builtin.set_fact:
        bgp_validation: "{{ bgp_validation | combine({'warnings': bgp_validation.warnings + ['Could not retrieve detailed BGP statistics']}) }}"

- name: Analyze BGP neighbor states
  ansible.builtin.set_fact:
    bgp_analysis:
      total_neighbors: "{{ bgp_neighbors | length }}"
      established_neighbors: "{{ bgp_neighbors | selectattr('state', 'equalto', 'Established') | list | length }}"
      idle_neighbors: "{{ bgp_neighbors | selectattr('state', 'equalto', 'Idle') | list | length }}"
      connecting_neighbors: "{{ bgp_neighbors | selectattr('state', 'equalto', 'Connect') | list | length }}"
      active_neighbors: "{{ bgp_neighbors | selectattr('state', 'equalto', 'Active') | list | length }}"
      total_received_prefixes: "{{ bgp_neighbors | sum(attribute='received_prefixes') }}"
      down_neighbors: "{{ bgp_neighbors | rejectattr('state', 'equalto', 'Established') | list }}"
  when:
    - bgp_validation.bgp_configured
    - bgp_neighbors is defined

- name: Store current BGP state
  ansible.builtin.set_fact:
    bgp_validation: "{{ bgp_validation | combine({'current': {'neighbors': bgp_neighbors | default([]), 'analysis': bgp_analysis | default({}), 'collection_time': lookup('pipe', 'date -u +%Y-%m-%dT%H:%M:%SZ')}}) }}"
  when:
    - bgp_validation.bgp_configured

- name: Load baseline BGP state if available
  when: bgp_validation.bgp_configured
  block:
    - name: Check for existing baseline
      ansible.builtin.stat:
        path: "/var/log/network-upgrade/baselines/{{ inventory_hostname }}_bgp_baseline.json"
      register: baseline_file
      delegate_to: localhost

    - name: Load baseline data
      ansible.builtin.set_fact:
        bgp_baseline: >-
          {{ lookup('file', '/var/log/network-upgrade/baselines/' +
             inventory_hostname + '_bgp_baseline.json') | from_json }}
      when:
        - baseline_file.stat.exists
        - validation_mode == 'post_upgrade'

    - name: Store baseline in validation results
      ansible.builtin.set_fact:
        bgp_validation: "{{ bgp_validation | combine({'baseline': bgp_baseline | default({})}) }}"
      when: bgp_baseline is defined

  rescue:
    - name: Handle baseline loading failure
      ansible.builtin.set_fact:
        bgp_validation: "{{ bgp_validation | combine({'warnings': bgp_validation.warnings + ['Could not load BGP baseline for comparison']}) }}"

- name: Save baseline BGP state (pre-upgrade only)
  when:
    - bgp_validation.bgp_configured
    - validation_mode == 'pre_upgrade'
  ansible.builtin.copy:
    content: "{{ bgp_validation.current | to_nice_json }}"
    dest: "/var/log/network-upgrade/baselines/{{ inventory_hostname }}_bgp_baseline.json"
    mode: '0644'
  delegate_to: localhost

- name: Compare BGP states (post-upgrade validation)
  when:
    - bgp_validation.bgp_configured
    - validation_mode == 'post_upgrade'
    - bgp_validation.baseline != {}
  block:
    - name: Perform BGP state comparison
      ansible.builtin.set_fact:
        bgp_comparison:
          neighbor_count_match: "{{ bgp_validation.baseline.analysis.total_neighbors | default(0) == bgp_validation.current.analysis.total_neighbors | default(0) }}"
          established_count_match: "{{ bgp_validation.baseline.analysis.established_neighbors | default(0) == bgp_validation.current.analysis.established_neighbors | default(0) }}"
          prefix_count_variance: "{{ ((bgp_validation.current.analysis.total_received_prefixes | default(0) - bgp_validation.baseline.analysis.total_received_prefixes | default(0)) | abs) }}"
          prefix_variance_percentage: "{{ ((bgp_validation.current.analysis.total_received_prefixes | default(1) - bgp_validation.baseline.analysis.total_received_prefixes | default(1)) / (bgp_validation.baseline.analysis.total_received_prefixes | default(1)) * 100) | abs }}"
          new_down_neighbors: []
          recovered_neighbors: []

    - name: Identify neighbor state changes
      ansible.builtin.set_fact:
        bgp_comparison: "{{ bgp_comparison | combine({'new_down_neighbors': current_down_neighbors | difference(baseline_down_neighbors | default([])), 'recovered_neighbors': baseline_down_neighbors | default([]) | difference(current_down_neighbors)}) }}"
      vars:
        current_down_neighbors: >-
          {{ bgp_validation.current.neighbors |
            rejectattr('state', 'equalto', 'Established') |
            map(attribute='neighbor_ip') | list }}
        baseline_down_neighbors: >-
          {{ bgp_validation.baseline.neighbors |
            default([]) | rejectattr('state', 'equalto', 'Established') |
            map(attribute='neighbor_ip') | list }}

    - name: Store comparison results
      ansible.builtin.set_fact:
        bgp_validation: "{{ bgp_validation | combine({'comparison': bgp_comparison}) }}"

- name: Evaluate BGP validation results
  when:
    - bgp_validation.bgp_configured
    - not ansible_check_mode
  ansible.builtin.set_fact:
    bgp_validation_passed: "{{
      bgp_validation.current.analysis.established_neighbors | int > 0 and
      (validation_mode == 'pre_upgrade' or
       (bgp_validation.comparison.neighbor_count_match and
        bgp_validation.comparison.established_count_match and
        bgp_validation.comparison.prefix_variance_percentage | int <= 10 and
        bgp_validation.comparison.new_down_neighbors | length == 0))
    }}"

- name: Set BGP validation passed for check mode or when not configured
  ansible.builtin.set_fact:
    bgp_validation_passed: true
  when:
    - ansible_check_mode or not bgp_validation.bgp_configured

- name: Add validation errors for failures
  when: bgp_validation.bgp_configured
  ansible.builtin.set_fact:
    bgp_validation: "{{ bgp_validation | combine({'errors': bgp_validation.errors + validation_errors}) }}"
  vars:
    validation_errors: |
      {%- set errors = [] -%}
      {%- if bgp_validation.current.analysis.established_neighbors
        | default(0) == 0 -%}
        {%- set _ = errors.append('No BGP neighbors in Established state') -%}
      {%- endif -%}
      {%- if validation_mode == 'post_upgrade'
        and bgp_validation.baseline != {} -%}
        {%- if not bgp_validation.comparison.neighbor_count_match
          | default(true) -%}
          {%- set _ = errors.append('BGP neighbor count mismatch: >
            baseline=' +
              (bgp_validation.baseline.analysis.total_neighbors |
               default(0) | string) +
              ', current=' +
              (bgp_validation.current.analysis.total_neighbors |
               default(0) | string)) -%}
        {%- endif -%}
        {%- if not bgp_validation.comparison.established_count_match
          | default(true) -%}
          {%- set _ = errors.append(
              'Established BGP neighbor count mismatch: >
            baseline=' +
              (bgp_validation.baseline.analysis.established_neighbors |
               default(0) | string) +
              ', current=' +
              (bgp_validation.current.analysis.established_neighbors |
               default(0) | string)) -%}
        {%- endif -%}
        {%- if bgp_validation.comparison.prefix_variance_percentage
          | default(0) > 10 -%}
          {%- set _ = errors.append(
              'BGP prefix count variance exceeds 10%: >
            ' +
              (bgp_validation.comparison.prefix_variance_percentage |
               default(0) | round(2) | string) + '%') -%}
        {%- endif -%}
        {%- for neighbor in bgp_validation.comparison.new_down_neighbors
          | default([]) -%}
          {%- set _ = errors.append(
              'BGP neighbor down after upgrade: ' + neighbor) -%}
        {%- endfor -%}
      {%- endif -%}
        {{ errors }}

- name: Set final BGP validation status
  ansible.builtin.set_fact:
    bgp_validation: >-
      {{
        bgp_validation | combine({
          'passed': bgp_validation_passed,
          'summary': {
            'total_neighbors': bgp_validation.current.analysis.total_neighbors | default(0),
            'established_neighbors': bgp_validation.current.analysis.established_neighbors | default(0),
            'total_prefixes': bgp_validation.current.analysis.total_received_prefixes | default(0)
          }
        })
      }}

- name: Log BGP validation to InfluxDB
  ansible.builtin.uri:
    url: >
      "{{ influxdb_url }}/api/v2/write?bucket={{
        influxdb_bucket }}&org={{ influxdb_org }}"
    method: POST
    headers:
      Authorization: "Token {{ influxdb_token }}"
    body: >-
      network_validation,device_id={{ inventory_hostname }},
      validation_type=bgp,protocol=bgp
      baseline_count={{
        bgp_validation.baseline.analysis.total_neighbors | default(0)
      }},current_count={{
        bgp_validation.current.analysis.established_neighbors | default(0)
      }},validation_success={{
        bgp_validation.passed | lower
      }},convergence_time=0
      {{ ansible_play_batch | hash('md5') }}000000000
  when:
    - influxdb_url is defined
    - send_metrics | default(true)
  failed_when: false

- name: Display BGP validation results
  ansible.builtin.debug:
    msg: |
      BGP Validation Results for {{ inventory_hostname }}:
      Status: {{ 'PASSED' if bgp_validation.passed else 'FAILED' }}
      Total Neighbors: {{
        bgp_validation.current.analysis.total_neighbors | default(0) }}
      Established Neighbors: {{
        bgp_validation.current.analysis.established_neighbors |
        default(0) }}
      Total Prefixes: {{
        bgp_validation.current.analysis.total_received_prefixes |
        default(0) }}
      {% if validation_mode == 'post_upgrade' and
            bgp_validation.baseline != {} %}
      Baseline Comparison:
      - Neighbor Count Match: {{
          bgp_validation.comparison.neighbor_count_match |
          default('N/A') }}
      - Established Count Match: {{
          bgp_validation.comparison.established_count_match |
          default('N/A') }}
      - Prefix Variance: {{
          bgp_validation.comparison.prefix_variance_percentage |
          default(0) | round(2) }}%
      {% if bgp_validation.comparison.new_down_neighbors |
              default([]) | length > 0 %}
      - New Down Neighbors: {{
          bgp_validation.comparison.new_down_neighbors | join(', ') }}
      {% endif %}
      {% if bgp_validation.comparison.recovered_neighbors |
              default([]) | length > 0 %}
      - Recovered Neighbors: {{
          bgp_validation.comparison.recovered_neighbors | join(', ') }}
      {% endif %}
      {% endif %}
      {% if bgp_validation.errors | length > 0 %}
      Errors:
      {% for error in bgp_validation.errors %}
      - {{ error }}
      {% endfor %}
      {% endif %}
      {% if bgp_validation.warnings | length > 0 %}
      Warnings:
      {% for warning in bgp_validation.warnings %}
      - {{ warning }}
      {% endfor %}
      {% endif %}
