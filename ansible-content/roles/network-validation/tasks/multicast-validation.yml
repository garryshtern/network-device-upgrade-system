---
# Multicast Protocol Validation
# UPDATED: Only validates if PIM/IGMP is configured on device
# Skips validation if multicast protocols are not in use

- name: Check if PIM is configured on device
  block:
    - name: Check PIM configuration (Cisco)
      cisco.nxos.nxos_command:
        commands:
          - show running-config pim
      register: pim_config_check
      when:
        - ansible_network_os is defined
        - ansible_network_os in ['cisco.nxos.nxos', 'cisco.ios.ios']
        - not ansible_check_mode
      failed_when: false

    - name: Determine if PIM is configured
      ansible.builtin.set_fact:
        pim_configured: >-
          {{
            (pim_config_check is defined and
             pim_config_check.stdout is defined and
             pim_config_check.stdout | length > 0 and
             'ip pim' in pim_config_check.stdout[0])
          }}
      when:
        - pim_config_check is defined
        - not ansible_check_mode

    - name: Set PIM configured for check mode
      ansible.builtin.set_fact:
        pim_configured: true
      when: ansible_check_mode

  rescue:
    - name: Handle PIM configuration check failure
      ansible.builtin.set_fact:
        pim_configured: false

- name: Skip multicast validation if PIM not configured
  ansible.builtin.debug:
    msg: "PIM/IGMP not configured on {{ inventory_hostname }} - skipping multicast validation"
  when: not (pim_configured | default(false))

- name: Gather PIM neighbor information
  when: pim_configured | default(false)
  block:
    - name: Get PIM neighbor status (NX-OS)
      cisco.nxos.nxos_command:
        commands:
          - show ip pim neighbor | json
          - show ip pim interface | json
          - show ip pim rp | json
      register: nxos_pim_info
      when:
        - ansible_network_os == "cisco.nxos.nxos"
        - not ansible_check_mode
      failed_when: false

    - name: Get PIM neighbor status (IOS-XE)
      cisco.ios.ios_command:
        commands:
          - show ip pim neighbor
          - show ip pim interface
          - show ip pim rp mapping
      register: ios_pim_info
      when:
        - ansible_network_os == "cisco.ios.ios"
        - not ansible_check_mode
      failed_when: false

- name: Parse PIM information for NX-OS
  when: pim_configured | default(false)
  block:
    - name: Extract PIM data
      ansible.builtin.set_fact:
        pim_neighbors: >
          "{{ nxos_pim_info.stdout[0] | from_json |
            json_query('TABLE_neighbor.ROW_neighbor') | default([]) }}"
        pim_interfaces: >
          "{{ nxos_pim_info.stdout[1] | from_json |
            json_query('TABLE_intf.ROW_intf') | default([]) }}"
        pim_rp_info: >
          "{{ nxos_pim_info.stdout[2] | from_json |
            json_query('TABLE_rp.ROW_rp') | default([]) }}"
      when:
        - not ansible_check_mode
        - ansible_network_os == "cisco.nxos.nxos"
        - nxos_pim_info.rc == 0

    - name: Classify PIM neighbor states
      ansible.builtin.set_fact:
        pim_neighbors_up: >
          "{{ pim_neighbors | selectattr('neighbor_state',
            'equalto', 'up') | list }}"
        pim_neighbors_down: >
          "{{ pim_neighbors | selectattr('neighbor_state',
            'equalto', 'down') | list }}"
        pim_sparse_mode: >
          "{{ pim_interfaces | selectattr('mode',
            'equalto', 'sparse') | list }}"
        pim_dense_mode: >
          "{{ pim_interfaces | selectattr('mode', 'equalto', 'dense') | list }}"
      when: pim_neighbors is defined and pim_interfaces is defined

- name: PIM neighbor validation
  when: pim_configured | default(false)
  block:
    - name: Check PIM neighbor adjacencies
      ansible.builtin.debug:
        msg: |
          PIM Neighbor Status:
          Total Neighbors: {{ pim_neighbors | length }}
          Neighbors Up: {{ pim_neighbors_up | length }}
          Neighbors Down: {{ pim_neighbors_down | length }}
          {% for neighbor in pim_neighbors_up %}
          - >: >-
              {{ neighbor.neighbor_addr }}: {{
              neighbor.neighbor_state }} ({{ neighbor.interface }})
          {% endfor %}
      when: pim_neighbors is defined

    - name: Validate PIM interface modes
      ansible.builtin.debug:
        msg: |
          PIM Interface Modes:
          Sparse Mode Interfaces: {{ pim_sparse_mode | length }}
          Dense Mode Interfaces: {{ pim_dense_mode | length }}
          {% for intf in pim_sparse_mode %}
          - >: >-
              {{ intf.interface }}: {{ intf.mode }} mode, DR:
              {{ intf.dr_address }}
          {% endfor %}
      when: pim_interfaces is defined

- name: IGMP group validation
  when: pim_configured | default(false)
  block:
    - name: Get IGMP group memberships
      cisco.nxos.nxos_command:
        commands:
          - show ip igmp groups | json
          - show ip igmp interface | json
      register: igmp_info
      when:
        - ansible_network_os == "cisco.nxos.nxos"
        - not ansible_check_mode
      failed_when: false

    - name: Parse IGMP information
      ansible.builtin.set_fact:
        igmp_groups: >
          "{{ igmp_info.stdout[0] | from_json |
            json_query('TABLE_group.ROW_group') | default([]) }}"
        igmp_interfaces: >
          "{{ igmp_info.stdout[1] | from_json |
            json_query('TABLE_intf.ROW_intf') | default([]) }}"
      when:
        - not ansible_check_mode
        - igmp_info is defined
        - igmp_info.rc == 0

    - name: Validate IGMP groups
      ansible.builtin.debug:
        msg: |
          IGMP Group Status:
          Total Groups: {{ igmp_groups | length }}
          IGMP Interfaces: {{ igmp_interfaces | length }}
          {% for group in igmp_groups[:10] %}
          - >
            Group {{ group.group_addr }}: {{ group.uptime }}
            ({{ group.interface }})
          {% endfor %}
      when: igmp_groups is defined

- name: Rendezvous Point (RP) validation
  when: pim_configured | default(false)
  block:
    - name: Validate RP configuration
      ansible.builtin.debug:
        msg: |
          Rendezvous Point Status:
          Total RPs: {{ pim_rp_info | length }}
          {% for rp in pim_rp_info %}
          - RP {{ rp.rp_addr }}: Groups {{ rp.group_range }} ({{ rp.rp_type }})
          {% endfor %}
      when: pim_rp_info is defined

    - name: Test RP reachability
      cisco.nxos.nxos_command:
        commands:
          - "ping {{ item.rp_addr }} count 3 timeout 5"
      register: rp_reachability
      loop: "{{ pim_rp_info[:5] }}"
      when:
        - ansible_network_os == "cisco.nxos.nxos"
        - pim_rp_info is defined and pim_rp_info | length > 0
        - not ansible_check_mode
      failed_when: false

    - name: Report RP reachability results
      ansible.builtin.debug:
        msg: |
          RP Reachability Test Results:
          {% for result in rp_reachability.results | default([]) %}
          - >-
            RP {{ loop.index }}: {{ 'REACHABLE' if result.stdout[0] |
              regex_search('Success rate is [^0]') else 'UNREACHABLE' }}
          {% endfor %}
      when: rp_reachability is defined

- name: Anycast RP validation
  when: pim_configured | default(false)
  block:
    - name: Check for Anycast RP configuration
      cisco.nxos.nxos_command:
        commands:
          - show ip pim anycast-rp | json
      register: anycast_rp_info
      when:
        - ansible_network_os == "cisco.nxos.nxos"
        - not ansible_check_mode
      failed_when: false

    - name: Parse Anycast RP information
      ansible.builtin.set_fact:
        anycast_rp_sets: >
          "{{ anycast_rp_info.stdout[0] | from_json |
            json_query('TABLE_anycast_rp.ROW_anycast_rp') | default([]) }}"
      when:
        - not ansible_check_mode
        - anycast_rp_info is defined
        - anycast_rp_info.rc == 0

    - name: Validate Anycast RP consistency
      ansible.builtin.debug:
        msg: |
          Anycast RP Configuration:
          {% if anycast_rp_sets | length > 0 %}
          Total Anycast RP Sets: {{ anycast_rp_sets | length }}
          {% for rp_set in anycast_rp_sets %}
          - >
            Set {{ rp_set.anycast_addr }}: Members
            {{ rp_set.rp_members | length }}
          {% endfor %}
          {% else %}
          No Anycast RP configuration found
          {% endif %}
      when: anycast_rp_sets is defined

- name: Multicast routing table validation
  when: pim_configured | default(false)
  block:
    - name: Get multicast routing table
      cisco.nxos.nxos_command:
        commands:
          - show ip mroute summary | json
          - show ip mroute | json
      register: mroute_info
      when:
        - ansible_network_os == "cisco.nxos.nxos"
        - not ansible_check_mode
      failed_when: false

    - name: Parse multicast routes
      ansible.builtin.set_fact:
        mroute_summary: "{{ mroute_info.stdout[0] | from_json }}"
        mroute_entries: >
          "{{ mroute_info.stdout[1] | from_json |
            json_query('TABLE_mroute.ROW_mroute') | default([]) }}"
      when:
        - not ansible_check_mode
        - mroute_info is defined
        - mroute_info.rc == 0

    - name: Validate multicast forwarding
      ansible.builtin.debug:
        msg: |
          Multicast Routing Status:
          {% if mroute_summary is defined %}
          Total Entries: {{ mroute_summary.total_entries | default(0) }}
          Active Entries: {{ mroute_entries | length }}
          {% for route in mroute_entries[:5] %}
          - >-
            ({{ route.source }}, {{ route.group }}):
            {{ route.incoming_intf }} -> {{ route.outgoing_intf_list |
              join(', ') }}
          {% endfor %}
          {% else %}
          No multicast routing information available
          {% endif %}
      when: mroute_info is defined

- name: Store multicast baseline
  ansible.builtin.set_fact:
    multicast_baseline:
      timestamp: "{{ lookup('pipe', 'date -u +%Y-%m-%dT%H:%M:%SZ') }}"
      pim_configured: "{{ pim_configured | default(false) }}"
      pim_neighbors_total: >
        "{{ pim_neighbors | length if pim_neighbors is defined else 0 }}"
      pim_neighbors_up: >
        "{{ pim_neighbors_up | length if pim_neighbors_up is defined else 0 }}"
      pim_sparse_interfaces: >
        "{{ pim_sparse_mode | length if pim_sparse_mode is defined else 0 }}"
      igmp_groups_total: >
        "{{ igmp_groups | length if igmp_groups is defined else 0 }}"
      rp_count: "{{ pim_rp_info | length if pim_rp_info is defined else 0 }}"
      anycast_rp_sets: >
        "{{ anycast_rp_sets | length if anycast_rp_sets is defined else 0 }}"
      mroute_entries: >
        "{{ mroute_entries | length if mroute_entries is defined else 0 }}"

- name: Multicast validation summary
  ansible.builtin.debug:
    msg: |
      Multicast Protocol Validation Results:
      {% if pim_configured | default(false) %}
      - >
        PIM Neighbors: {{ multicast_baseline.pim_neighbors_up
          }}/{{ multicast_baseline.pim_neighbors_total }}
      - >
        PIM Sparse Mode Interfaces:
        {{ multicast_baseline.pim_sparse_interfaces }}
      - IGMP Groups: {{ multicast_baseline.igmp_groups_total }}
      - Configured RPs: {{ multicast_baseline.rp_count }}
      - Anycast RP Sets: {{ multicast_baseline.anycast_rp_sets }}
      - Active Multicast Routes: {{ multicast_baseline.mroute_entries }}
      - >-
        Overall Status: {{ 'CONFIGURED' if
          multicast_baseline.pim_neighbors_total | int > 0 or
          multicast_baseline.igmp_groups_total | int > 0 else 'NOT CONFIGURED' }}
      {% else %}
      - Multicast protocols (PIM/IGMP) not configured - validation skipped
      {% endif %}
