---
# Routing Protocol Validation
# Validates static routes, default routes, and next-hop verification
# UPDATED: Removed generic device support
# UPDATED: Made OSPF/EIGRP conditional on configuration

- name: Gather routing table information (NX-OS)
  block:
    - name: Get routing table (NX-OS)
      cisco.nxos.nxos_command:
        commands:
          - show ip route summary | json
          - show ip route | json
          - show ip route 0.0.0.0/0 | json
      register: nxos_routing_info
  when:
    - ansible_network_os is defined
    - ansible_network_os == "cisco.nxos.nxos"
    - not ansible_check_mode

- name: Gather routing table information (IOS-XE)
  block:
    - name: Get routing table (IOS-XE)
      cisco.ios.ios_command:
        commands:
          - show ip route summary
          - show ip route
          - show ip route 0.0.0.0
      register: ios_routing_info
  when:
    - ansible_network_os is defined
    - ansible_network_os == "cisco.ios.ios"
    - not ansible_check_mode

- name: Parse routing information for NX-OS
  block:
    - name: Extract NX-OS routing data
      ansible.builtin.set_fact:
        routing_summary: "{{ nxos_routing_info.stdout[0] | from_json }}"
        routing_table: "{{ nxos_routing_info.stdout[1] | from_json }}"
        default_route: "{{ nxos_routing_info.stdout[2] | from_json }}"

    - name: Parse route counts
      ansible.builtin.set_fact:
        total_routes: "{{ routing_summary.total_routes | default(0) }}"
        static_routes: >
          {{ routing_table.TABLE_vrf.ROW_vrf[0].TABLE_addrf.ROW_addrf.
             TABLE_prefix.ROW_prefix |
             selectattr('ucast_nhops.TABLE_path.ROW_path.clientname',
                        'equalto', 'static') | list | default([]) }}
        connected_routes: >
          {{ routing_table.TABLE_vrf.ROW_vrf[0].TABLE_addrf.ROW_addrf.
             TABLE_prefix.ROW_prefix |
             selectattr('ucast_nhops.TABLE_path.ROW_path.clientname',
                        'equalto', 'direct') | list | default([]) }}
      when:
        - routing_table.TABLE_vrf is defined
  when:
    - ansible_network_os is defined
    - ansible_network_os == "cisco.nxos.nxos"
    - not ansible_check_mode
    - nxos_routing_info is defined
    - nxos_routing_info.stdout is defined

- name: Static route validation (NX-OS)
  block:
    - name: Verify static routes presence
      ansible.builtin.debug:
        msg: |
          Static Routes Found: {{ static_routes | length }}
          {% for route in static_routes %}
          - >-
            {{ route.ipprefix }}: via
            {{ route.ucast_nhops.TABLE_path.ROW_path.ipnexthop |
               default('N/A') }}
          {% endfor %}
      when:
        - static_routes is defined

    - name: Check static route reachability
      cisco.nxos.nxos_command:
        commands:
          - >
            ping {{ item.ucast_nhops.TABLE_path.ROW_path.ipnexthop }}
            count 3 timeout 5
      register: static_route_ping
      loop: "{{ static_routes[:5] }}"  # Test first 5 static routes
      when:
        - static_routes is defined
        - static_routes | length > 0
      failed_when: false

    - name: Validate static route reachability
      ansible.builtin.debug:
        msg: |
          Static Route Reachability:
          {% for result in static_route_ping.results | default([]) %}
          - >-
            Route {{ loop.index }}: {{ 'REACHABLE' if result.stdout[0] |
              regex_search('Success rate is [^0]') else 'UNREACHABLE' }}
          {% endfor %}
      when:
        - static_route_ping is defined
  when:
    - ansible_network_os is defined
    - ansible_network_os == "cisco.nxos.nxos"
    - not ansible_check_mode

- name: Default route validation (NX-OS)
  block:
    - name: Check for default route presence
      ansible.builtin.set_fact:
        has_default_route: >
          {{ default_route.TABLE_vrf is defined and
             default_route.TABLE_vrf.ROW_vrf | length > 0 }}
      when:
        - default_route is defined

    - name: Extract default route information
      ansible.builtin.set_fact:
        default_route_info:
          present: "{{ has_default_route | default(false) }}"
          next_hop: >
            {{ default_route.TABLE_vrf.ROW_vrf[0].TABLE_addrf.
               ROW_addrf.TABLE_prefix.ROW_prefix.ucast_nhops.
               TABLE_path.ROW_path.ipnexthop | default('None') }}
          interface: >
            {{ default_route.TABLE_vrf.ROW_vrf[0].TABLE_addrf.
               ROW_addrf.TABLE_prefix.ROW_prefix.ucast_nhops.
               TABLE_path.ROW_path.ifname | default('None') }}
      when:
        - has_default_route | default(false)

    - name: Validate default route next-hop
      cisco.nxos.nxos_command:
        commands:
          - "ping {{ default_route_info.next_hop }} count 3 timeout 5"
      register: default_route_ping
      when:
        - default_route_info.next_hop is defined
        - default_route_info.next_hop != 'None'
      failed_when: false
  when:
    - ansible_network_os is defined
    - ansible_network_os == "cisco.nxos.nxos"
    - not ansible_check_mode

- name: Route table health validation (NX-OS)
  block:
    - name: Check route table size
      ansible.builtin.assert:
        that:
          - total_routes | int > 0
        fail_msg: "Routing table appears to be empty"
      when:
        - total_routes is defined

    - name: Validate connected routes
      ansible.builtin.debug:
        msg: |
          Connected Routes: {{ connected_routes | length }}
          {% for route in connected_routes[:10] %}
          - >
            {{ route.ipprefix }} via
            {{ route.ucast_nhops.TABLE_path.ROW_path.ifname }}
          {% endfor %}
      when:
        - connected_routes is defined

    - name: Check for routing loops (basic)
      cisco.nxos.nxos_command:
        commands:
          - show ip route summary vrf all
      register: vrf_routing_summary
      failed_when: false
  when:
    - ansible_network_os is defined
    - ansible_network_os == "cisco.nxos.nxos"
    - not ansible_check_mode

- name: Check if OSPF is configured
  block:
    - name: Check OSPF configuration (Cisco)
      cisco.nxos.nxos_command:
        commands:
          - show running-config ospf
      register: ospf_config_check
      when:
        - ansible_network_os is defined
        - ansible_network_os in ['cisco.nxos.nxos', 'cisco.ios.ios']
        - not ansible_check_mode
      failed_when: false

    - name: Determine if OSPF is configured
      ansible.builtin.set_fact:
        ospf_configured: >-
          {{
            (ospf_config_check is defined and
             ospf_config_check.stdout is defined and
             ospf_config_check.stdout | length > 0 and
             'router ospf' in ospf_config_check.stdout[0])
          }}
      when:
        - ospf_config_check is defined
        - not ansible_check_mode

    - name: Set OSPF configured for check mode
      ansible.builtin.set_fact:
        ospf_configured: false
      when:
        - ansible_check_mode

  rescue:
    - name: Handle OSPF configuration check failure
      ansible.builtin.set_fact:
        ospf_configured: false

- name: Skip OSPF validation if not configured
  ansible.builtin.debug:
    msg: "OSPF not configured on {{ inventory_hostname }} - skipping OSPF validation"
  when:
    - not (ospf_configured | default(false))

- name: OSPF validation
  block:
    - name: Check OSPF neighbor status
      cisco.nxos.nxos_command:
        commands:
          - show ip ospf neighbor | json
      register: ospf_neighbors
      failed_when: false

    - name: Validate OSPF adjacencies
      ansible.builtin.debug:
        msg: |
          OSPF Neighbor Status:
          {% for neighbor in ospf_neighbors.stdout[0] | from_json |
            json_query('TABLE_neighbor.ROW_neighbor') | default([]) %}
          - {{ neighbor.rid }}: {{ neighbor.state }} ({{ neighbor.interface }})
          {% endfor %}
      when:
        - ospf_neighbors is defined
        - ospf_neighbors.rc == 0
  when:
    - ospf_configured | default(false)
    - ansible_network_os is defined
    - ansible_network_os == "cisco.nxos.nxos"
    - not ansible_check_mode

- name: Check if EIGRP is configured
  block:
    - name: Check EIGRP configuration (Cisco)
      cisco.nxos.nxos_command:
        commands:
          - show running-config eigrp
      register: eigrp_config_check
      when:
        - ansible_network_os is defined
        - ansible_network_os in ['cisco.nxos.nxos', 'cisco.ios.ios']
        - not ansible_check_mode
      failed_when: false

    - name: Determine if EIGRP is configured
      ansible.builtin.set_fact:
        eigrp_configured: >-
          {{
            (eigrp_config_check is defined and
             eigrp_config_check.stdout is defined and
             eigrp_config_check.stdout | length > 0 and
             'router eigrp' in eigrp_config_check.stdout[0])
          }}
      when:
        - eigrp_config_check is defined
        - not ansible_check_mode

    - name: Set EIGRP configured for check mode
      ansible.builtin.set_fact:
        eigrp_configured: false
      when:
        - ansible_check_mode

  rescue:
    - name: Handle EIGRP configuration check failure
      ansible.builtin.set_fact:
        eigrp_configured: false

- name: Skip EIGRP validation if not configured
  ansible.builtin.debug:
    msg: "EIGRP not configured on {{ inventory_hostname }} - skipping EIGRP validation"
  when:
    - not (eigrp_configured | default(false))

- name: EIGRP validation
  block:
    - name: Check EIGRP neighbor status
      cisco.nxos.nxos_command:
        commands:
          - show ip eigrp neighbors | json
      register: eigrp_neighbors
      failed_when: false

    - name: Validate EIGRP adjacencies
      ansible.builtin.debug:
        msg: |
          EIGRP Neighbor Status:
          {% for neighbor in eigrp_neighbors.stdout[0] | from_json |
            json_query('TABLE_neighbor.ROW_neighbor') | default([]) %}
          - {{ neighbor.ipaddr }}: {{ neighbor.state }} AS {{ neighbor.as }}
          {% endfor %}
      when:
        - eigrp_neighbors is defined
        - eigrp_neighbors.rc == 0
  when:
    - eigrp_configured | default(false)
    - ansible_network_os is defined
    - ansible_network_os == "cisco.nxos.nxos"
    - not ansible_check_mode

- name: Store routing baseline
  ansible.builtin.set_fact:
    routing_baseline:
      timestamp: "{{ lookup('pipe', 'date -u +%Y-%m-%dT%H:%M:%SZ') }}"
      total_routes: "{{ total_routes | default(0) }}"
      static_routes_count: >
        "{{ static_routes | length if static_routes is defined else 0 }}"
      connected_routes_count: >
        "{{ connected_routes | length if connected_routes is defined else 0 }}"
      default_route_present: "{{ default_route_info.present | default(false) }}"
      default_route_next_hop: >
        "{{ default_route_info.next_hop | default('None') }}"
      ospf_configured: "{{ ospf_configured | default(false) }}"
      ospf_neighbors: >
        {{ ospf_neighbors.stdout[0] | from_json |
           json_query('TABLE_neighbor.ROW_neighbor') | length
           if (ospf_configured | default(false)) and ospf_neighbors is defined and ospf_neighbors.rc == 0
           else 0 }}
      eigrp_configured: "{{ eigrp_configured | default(false) }}"
      eigrp_neighbors: >
        {{ eigrp_neighbors.stdout[0] | from_json |
           json_query('TABLE_neighbor.ROW_neighbor') | length
           if (eigrp_configured | default(false)) and eigrp_neighbors is defined and eigrp_neighbors.rc == 0
           else 0 }}
  when:
    - not ansible_check_mode

- name: Store routing baseline for check mode
  ansible.builtin.set_fact:
    routing_baseline:
      timestamp: "{{ lookup('pipe', 'date -u +%Y-%m-%dT%H:%M:%SZ') }}"
      total_routes: 0
      static_routes_count: 0
      connected_routes_count: 0
      default_route_present: false
      default_route_next_hop: "None"
      ospf_configured: false
      ospf_neighbors: 0
      eigrp_configured: false
      eigrp_neighbors: 0
  when:
    - ansible_check_mode

- name: Routing validation summary
  ansible.builtin.debug:
    msg: |
      Routing Validation Results:
      - Total Routes: {{ routing_baseline.total_routes }}
      - Static Routes: {{ routing_baseline.static_routes_count }}
      - Connected Routes: {{ routing_baseline.connected_routes_count }}
      - >-
        Default Route: >
        {{ 'Present' if routing_baseline.default_route_present
           else 'Missing' }}
      - Default Next-Hop: {{ routing_baseline.default_route_next_hop }}
      - Default Route Reachable:
        {{ 'YES' if (default_route_ping is defined and
           default_route_ping is succeeded and
           default_route_ping.stdout is defined and
           default_route_ping.stdout[0] |
           regex_search('Success rate is [^0]')) else 'UNTESTED' }}
      - OSPF Neighbors: {{ routing_baseline.ospf_neighbors }}
      - EIGRP Neighbors: {{ routing_baseline.eigrp_neighbors }}
      - >-
        Status: {{ 'HEALTHY' if routing_baseline.total_routes > 0 else
          'CHECK REQUIRED' }}
