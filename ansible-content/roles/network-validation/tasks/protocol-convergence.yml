---
# Protocol Convergence Validation
# Measures and validates protocol convergence times after network changes

- name: Initialize convergence monitoring
  ansible.builtin.set_fact:
    convergence_start_time: "{{ ansible_play_batch | hash('md5') }}"
    convergence_tests: []
    convergence_results: {}

- name: BGP convergence monitoring
  block:
    - name: Check initial BGP state
      cisco.nxos.nxos_command:
        commands:
          - show ip bgp summary | json
      register: bgp_initial_state
      when: ansible_network_os == "cisco.nxos.nxos"
      failed_when: false

    - name: Monitor BGP convergence
      cisco.nxos.nxos_command:
        commands:
          - show ip bgp summary | json
      register: bgp_convergence_check
      until: >
        bgp_convergence_check.stdout[0] | from_json | json_query('TABLE_vrf.ROW_vrf[0].TABLE_saf.ROW_saf[0].TABLE_neighbor.ROW_neighbor[?state==`Established`]') | length ==
        bgp_initial_state.stdout[0] | from_json | json_query('TABLE_vrf.ROW_vrf[0].TABLE_saf.ROW_saf[0].TABLE_neighbor.ROW_neighbor') | length
      retries: 30
      delay: 10
      when: bgp_initial_state is defined and bgp_initial_state.rc == 0
      failed_when: false

    - name: Calculate BGP convergence time
      set_fact:
        bgp_convergence_time: "{{ ansible_play_batch | hash('md5') | int - convergence_start_time | int }}"
      when: bgp_convergence_check is defined

    - name: Store BGP convergence results
      set_fact:
        convergence_results: "{{ convergence_results | combine({'bgp': {
          'converged': bgp_convergence_check is defined and bgp_convergence_check is not failed,
          'time_seconds': bgp_convergence_time | default(-1) | int,
          'neighbors_established': bgp_convergence_check.stdout[0] | from_json | json_query('TABLE_vrf.ROW_vrf[0].TABLE_saf.ROW_saf[0].TABLE_neighbor.ROW_neighbor[?state==`Established`]') | length if bgp_convergence_check is defined else 0
        }}) }}"
      when: bgp_initial_state is defined

- name: OSPF convergence monitoring
  block:
    - name: Check OSPF neighbor state
      cisco.nxos.nxos_command:
        commands:
          - show ip ospf neighbor | json
      register: ospf_initial_state
      when: ansible_network_os == "cisco.nxos.nxos"
      failed_when: false

    - name: Monitor OSPF convergence
      cisco.nxos.nxos_command:
        commands:
          - show ip ospf neighbor | json
      register: ospf_convergence_check
      until: >
        ospf_convergence_check.stdout[0] | from_json | json_query('TABLE_neighbor.ROW_neighbor[?state==`Full`]') | length ==
        ospf_initial_state.stdout[0] | from_json | json_query('TABLE_neighbor.ROW_neighbor') | length
      retries: 20
      delay: 5
      when: ospf_initial_state is defined and ospf_initial_state.rc == 0
      failed_when: false

    - name: Calculate OSPF convergence time
      set_fact:
        ospf_convergence_time: "{{ ansible_play_batch | hash('md5') | int - convergence_start_time | int }}"
      when: ospf_convergence_check is defined

    - name: Store OSPF convergence results
      set_fact:
        convergence_results: "{{ convergence_results | combine({'ospf': {
          'converged': ospf_convergence_check is defined and ospf_convergence_check is not failed,
          'time_seconds': ospf_convergence_time | default(-1) | int,
          'neighbors_full': ospf_convergence_check.stdout[0] | from_json | json_query('TABLE_neighbor.ROW_neighbor[?state==`Full`]') | length if ospf_convergence_check is defined else 0
        }}) }}"
      when: ospf_initial_state is defined

- name: EIGRP convergence monitoring
  block:
    - name: Check EIGRP neighbor state
      cisco.nxos.nxos_command:
        commands:
          - show ip eigrp neighbors | json
      register: eigrp_initial_state
      when: ansible_network_os == "cisco.nxos.nxos"
      failed_when: false

    - name: Monitor EIGRP convergence
      cisco.nxos.nxos_command:
        commands:
          - show ip eigrp neighbors | json
      register: eigrp_convergence_check
      until: >
        eigrp_convergence_check.stdout[0] | from_json | json_query('TABLE_neighbor.ROW_neighbor') | length ==
        eigrp_initial_state.stdout[0] | from_json | json_query('TABLE_neighbor.ROW_neighbor') | length
      retries: 15
      delay: 5
      when: eigrp_initial_state is defined and eigrp_initial_state.rc == 0
      failed_when: false

    - name: Calculate EIGRP convergence time
      set_fact:
        eigrp_convergence_time: "{{ ansible_play_batch | hash('md5') | int - convergence_start_time | int }}"
      when: eigrp_convergence_check is defined

    - name: Store EIGRP convergence results
      set_fact:
        convergence_results: "{{ convergence_results | combine({'eigrp': {
          'converged': eigrp_convergence_check is defined and eigrp_convergence_check is not failed,
          'time_seconds': eigrp_convergence_time | default(-1) | int,
          'neighbors_up': eigrp_convergence_check.stdout[0] | from_json | json_query('TABLE_neighbor.ROW_neighbor') | length if eigrp_convergence_check is defined else 0
        }}) }}"
      when: eigrp_initial_state is defined

- name: Interface convergence monitoring
  block:
    - name: Check interface recovery
      cisco.nxos.nxos_command:
        commands:
          - show interface brief | json
      register: interface_recovery_check

    - name: Monitor interface state stabilization
      cisco.nxos.nxos_command:
        commands:
          - show interface brief | json
      register: interface_stability_check
      until: >
        interface_stability_check.stdout[0] | from_json | json_query('TABLE_interface.ROW_interface[?state==`up`]') | length ==
        (interface_baseline.up_interfaces | default(0) | int)
      retries: 20
      delay: 5
      when: interface_baseline is defined
      failed_when: false

    - name: Calculate interface convergence time
      set_fact:
        interface_convergence_time: "{{ ansible_play_batch | hash('md5') | int - convergence_start_time | int }}"
      when: interface_stability_check is defined

    - name: Store interface convergence results
      set_fact:
        convergence_results: "{{ convergence_results | combine({'interfaces': {
          'converged': interface_stability_check is defined and interface_stability_check is not failed,
          'time_seconds': interface_convergence_time | default(-1) | int,
          'interfaces_up': interface_stability_check.stdout[0] | from_json | json_query('TABLE_interface.ROW_interface[?state==`up`]') | length if interface_stability_check is defined else 0,
          'expected_up': interface_baseline.up_interfaces | default(0)
        }}) }}"

- name: Route table convergence monitoring
  block:
    - name: Check route table convergence
      cisco.nxos.nxos_command:
        commands:
          - show ip route summary | json
      register: route_convergence_check

    - name: Monitor route count stabilization
      cisco.nxos.nxos_command:
        commands:
          - show ip route summary | json
      register: route_stability_check
      until: >
        (route_stability_check.stdout[0] | from_json).total_routes | int >=
        (routing_baseline.total_routes | default(0) | int * 0.95)
      retries: 25
      delay: 10
      when: routing_baseline is defined
      failed_when: false

    - name: Calculate routing convergence time
      set_fact:
        routing_convergence_time: "{{ ansible_play_batch | hash('md5') | int - convergence_start_time | int }}"
      when: route_stability_check is defined

    - name: Store routing convergence results
      set_fact:
        convergence_results: "{{ convergence_results | combine({'routing': {
          'converged': route_stability_check is defined and route_stability_check is not failed,
          'time_seconds': routing_convergence_time | default(-1) | int,
          'current_routes': (route_stability_check.stdout[0] | from_json).total_routes | default(0) if route_stability_check is defined else 0,
          'expected_routes': routing_baseline.total_routes | default(0)
        }}) }}"

- name: Overall convergence assessment
  block:
    - name: Calculate total convergence time
      set_fact:
        total_convergence_time: "{{ ansible_play_batch | hash('md5') | int - convergence_start_time | int }}"

    - name: Determine convergence success
      set_fact:
        overall_convergence_success: >-
          {{
            (convergence_results.bgp.converged | default(true)) and
            (convergence_results.ospf.converged | default(true)) and
            (convergence_results.eigrp.converged | default(true)) and
            (convergence_results.interfaces.converged | default(true)) and
            (convergence_results.routing.converged | default(true))
          }}

- name: Protocol convergence summary
  ansible.builtin.debug:
    msg: |
      Protocol Convergence Validation Results:

      Overall Status: {{ 'CONVERGED' if overall_convergence_success else 'PARTIAL/FAILED' }}
      Total Time: {{ total_convergence_time }} seconds

      Per-Protocol Results:
      {% if 'bgp' in convergence_results %}
      - BGP:
        {{ 'CONVERGED' if convergence_results.bgp.converged else 'FAILED' }}
         (
        {{ convergence_results.bgp.time_seconds }}
        s,
        {{ convergence_results.bgp.neighbors_established }}
         neighbors)
      {% endif %}
      {% if 'ospf' in convergence_results %}
      - OSPF:
        {{ 'CONVERGED' if convergence_results.ospf.converged else 'FAILED' }}
         (
        {{ convergence_results.ospf.time_seconds }}
        s,
        {{ convergence_results.ospf.neighbors_full }}
         neighbors)
      {% endif %}
      {% if 'eigrp' in convergence_results %}
      - EIGRP:
        {{ 'CONVERGED' if convergence_results.eigrp.converged else 'FAILED' }}
         (
        {{ convergence_results.eigrp.time_seconds }}
        s,
        {{ convergence_results.eigrp.neighbors_up }}
         neighbors)
      {% endif %}
      {% if 'interfaces' in convergence_results %}
      - Interfaces:
        {{ 'CONVERGED' if convergence_results.interfaces.converged else 'FAILED' }}
         (
        {{ convergence_results.interfaces.time_seconds }}
        s,
        {{ convergence_results.interfaces.interfaces_up }}
        /
        {{ convergence_results.interfaces.expected_up }}
        )
      {% endif %}
      {% if 'routing' in convergence_results %}
      - Routing Table:
        {{ 'CONVERGED' if convergence_results.routing.converged else 'FAILED' }}
         (
        {{ convergence_results.routing.time_seconds }}
        s,
        {{ convergence_results.routing.current_routes }}
        /
        {{ convergence_results.routing.expected_routes }}
         routes)
      {% endif %}

- name: Store convergence baseline for comparison
  ansible.builtin.set_fact:
    convergence_baseline:
      timestamp: "{{ lookup('pipe', 'date -u +%Y-%m-%dT%H:%M:%SZ') }}"
      total_time: "{{ total_convergence_time }}"
      success: "{{ overall_convergence_success }}"
      protocols: "{{ convergence_results }}"
