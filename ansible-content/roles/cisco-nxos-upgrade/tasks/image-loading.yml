---
# Cisco NX-OS Image Loading Tasks
# Securely transfers firmware images from server to device
# SECURITY: Uses server-initiated PUSH transfers (not device-initiated PULL)

- name: Get current storage information
  cisco.nxos.nxos_command:
    commands:
      - "dir bootflash: | json"
  register: nxos_storage_info

- name: Parse storage information
  ansible.builtin.set_fact:
    nxos_storage_data: "{{ nxos_storage_info.stdout[0] | from_json }}"

- name: Calculate free space
  ansible.builtin.set_fact:
    available_space_mb: >
      "{{ (nxos_storage_data.dir_size.free | int / 1024 / 1024) | int }}"
    required_space_mb: >
      "{{ firmware_size_mb | default(nxos_minimum_free_space_mb) }}"

- name: Verify sufficient storage space
  ansible.builtin.assert:
    that:
      - available_space_mb | int >= required_space_mb | int
    fail_msg: >
      "Insufficient storage space. Available: {{
        available_space_mb }}MB, Required: {{ required_space_mb }}MB"

- name: Check if target firmware already exists
  cisco.nxos.nxos_command:
    commands:
      - dir bootflash:{{ target_firmware_version }}
  register: firmware_exists_check
  failed_when: false

- name: Set firmware exists flag
  ansible.builtin.set_fact:
    target_firmware_exists: >
      "{{ 'No such file' not in firmware_exists_check.stdout[0] }}"

- name: Skip download if firmware already exists
  ansible.builtin.debug:
    msg: >
      "Target firmware {{ target_firmware_version }} already exists on device"
  when: target_firmware_exists

- name: Transfer firmware image to device (Server-Initiated PUSH)
  when: not target_firmware_exists

  block:
    - name: Enable SCP server on NX-OS device
      cisco.nxos.nxos_config:
        lines:
          - feature scp-server
      failed_when: false \t# May already be enabled

    - name: Push firmware image from server to device via SCP
      cisco.nxos.nxos_file_copy:
        file_system: "bootflash:"
        local_file: "{{ local_firmware_path }}"
        remote_file: "{{ target_firmware_version }}"
        file_pull: false \t# Server pushes to device
        connect_ssh_port: "{{ ansible_ssh_port | default(22) }}"
        vrf: "{{ management_vrf | default('management') }}"
      register: nxos_file_copy_result
      delegate_to: localhost
      vars:
        ansible_connection: local

    - name: Verify secure file transfer completed successfully
      ansible.builtin.assert:
        that:
          - nxos_file_copy_result is succeeded
          - nxos_file_copy_result.transfer_status == 'Received'
        fail_msg: >-
          Secure firmware file transfer failed: {{ nxos_file_copy_result.msg |
            default('Unknown error') }}

- name: Verify firmware file on device
  cisco.nxos.nxos_command:
    commands:
      - dir bootflash:{{ target_firmware_version }} | json
  register: firmware_verification

- name: Parse firmware file information
  ansible.builtin.set_fact:
    firmware_file_info: "{{ firmware_verification.stdout[0] | from_json }}"

- name: Validate firmware file integrity
  ansible.builtin.assert:
    that:
      - firmware_file_info.file_list | length > 0
      - firmware_file_info.file_list[0].size > 1024000 \t# Minimum 1MB
    fail_msg: "Firmware file validation failed"

- name: Calculate MD5 hash of firmware file on device
  cisco.nxos.nxos_command:
    commands:
      - show file bootflash:{{ target_firmware_version }} md5sum
  register: nxos_firmware_hash
  when: firmware_md5_hash is defined

- name: Verify firmware MD5 hash
  ansible.builtin.assert:
    that:
      - firmware_md5_hash in nxos_firmware_hash.stdout[0]
    fail_msg: |
      Firmware MD5 hash mismatch!
      Expected: {{ firmware_md5_hash }}
      Device hash output: {{ nxos_firmware_hash.stdout[0] }}
  when: firmware_md5_hash is defined

- name: Set image loading results
  ansible.builtin.set_fact:
    nxos_image_loading_results:
      firmware_file: "{{ target_firmware_version }}"
      file_size_bytes: "{{ firmware_file_info.file_list[0].size }}"
      loading_successful: true
      hash_verified: "{{ firmware_md5_hash is defined }}"
      loading_timestamp: "{{ lookup('pipe', 'date -u +%Y-%m-%dT%H:%M:%SZ') }}"

- name: Display image loading results
  ansible.builtin.debug:
    msg:
      - >
        "Secure firmware image transfer completed
          successfully (Server-Initiated PUSH)"
      - "Local Source: {{ local_firmware_path }}"
      - >
        "Remote Destination: {{ ansible_host }}:bootflash:{{
          nxos_image_loading_results.firmware_file }}"
      - >-
        File Size: {{ (nxos_image_loading_results.file_size_bytes |
          int / 1024 / 1024) | round(2) }}MB
      - "Transfer Method: SCP (server-initiated)"
      - "Hash Verified: {{ nxos_image_loading_results.hash_verified }}"
