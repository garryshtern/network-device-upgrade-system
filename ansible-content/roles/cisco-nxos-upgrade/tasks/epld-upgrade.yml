---
# EPLD (Embedded Programmable Logic Device) Upgrade for Cisco NX-OS
# Handles EPLD firmware upgrades which require special procedures

- name: Pre-EPLD upgrade validation
  block:
    - name: Check current EPLD versions
      cisco.nxos.nxos_command:
        commands:
          - show version epld
      register: current_epld_versions

    - name: Parse EPLD information
      ansible.builtin.set_fact:
        epld_modules: >-
          {{ current_epld_versions.stdout[0] |
            regex_findall('Module\\s+(\\d+).*?EPLD.*?Version\\s+(\\S+)', multiline=True) }}

    - name: Display current EPLD status
      ansible.builtin.debug:
        msg: |
          Current EPLD Versions:
          {% for module_info in epld_modules %}
          - Module {{ module_info[0] }}: Version {{ module_info[1] }}
          {% endfor %}
      when: epld_modules | length > 0

    - name: Check EPLD upgrade requirements
      cisco.nxos.nxos_command:
        commands:
          - show install all impact epld {{ target_epld_image }}
      register: epld_impact_check
      failed_when: false
      when: target_epld_image is defined

- name: EPLD compatibility validation
  block:
    - name: Verify system compatibility for EPLD upgrade
      cisco.nxos.nxos_command:
        commands:
          - show module
          - show system resources
      register: system_compatibility

    - name: Check for dual supervisor setup
      ansible.builtin.set_fact:
        has_dual_sup_for_epld: >
"{{ 'Supervisor' in system_compatibility.stdout[0] and
            system_compatibility.stdout[0].count('Supervisor') >= 2 }}"

    - name: Validate EPLD upgrade feasibility
      ansible.builtin.assert:
        that:
          - has_dual_sup_for_epld or allow_disruptive_epld | default(false)
        fail_msg: >
          "EPLD upgrade requires dual supervisors or
            explicit approval for disruptive upgrade"

- name: EPLD upgrade execution
  block:
    - name: Stage EPLD image (Server-Initiated Transfer)
      cisco.nxos.nxos_file_copy:
        file_system: "bootflash:"
        local_file: "{{ epld_image_source }}"
        remote_file: "{{ target_epld_image }}"
        file_pull: false \t# Server pushes to device
        connect_ssh_port: "{{ ansible_ssh_port | default(22) }}"
        vrf: "{{ management_vrf | default('management') }}"
      register: epld_stage_result
      delegate_to: localhost
      when: target_epld_image is defined
      vars:
        ansible_connection: local

    - name: Verify EPLD image staging
      cisco.nxos.nxos_command:
        commands:
          - "dir bootflash:{{ target_epld_image }}"
      register: epld_image_verification
      when: target_epld_image is defined

    - name: Execute EPLD upgrade
      cisco.nxos.nxos_command:
        commands:
          - "install all epld {{ target_epld_image }} module {{ item }}"
      register: epld_upgrade_result
      loop: "{{ epld_modules_to_upgrade | default(['all']) }}"
      when: target_epld_image is defined

- name: EPLD upgrade monitoring
  block:
    - name: Monitor EPLD upgrade progress
      cisco.nxos.nxos_command:
        commands:
          - show install all status
      register: epld_upgrade_status
      until: >
        "'Success' in epld_upgrade_status.stdout[0]
          or 'Failed' in epld_upgrade_status.stdout[0]"
      retries: 60
      delay: 30
      when: epld_upgrade_result is defined

    - name: Validate EPLD upgrade completion
      ansible.builtin.assert:
        that:
          - "'Success' in epld_upgrade_status.stdout[0]"
        fail_msg: "EPLD upgrade failed: {{ epld_upgrade_status.stdout[0] }}"
      when: epld_upgrade_status is defined

- name: Post-EPLD upgrade validation
  block:
    - name: Check updated EPLD versions
      cisco.nxos.nxos_command:
        commands:
          - show version epld
      register: updated_epld_versions

    - name: Parse updated EPLD information
      ansible.builtin.set_fact:
        updated_epld_modules: >
"{{ updated_epld_versions.stdout[0] |
            regex_findall('Module\\s+(\\d+).*?EPLD.*?Version\\s+(\\S+)', multiline=True) }}"

    - name: Verify EPLD version updates
      ansible.builtin.debug:
        msg: |
          EPLD Upgrade Results:
          {% for module_info in updated_epld_modules %}
          - Module: >-
              {{ module_info[0] }}
            :
      {{ 'UPDATED' if module_info[1] != (epld_modules |
              selectattr('0', 'equalto', module_info[0]) | map(attribute='1') | first | default('unknown')) else 'UNCHANGED' }}
             (: >-
              {{ module_info[1] }}
            )
          {% endfor %}
      when: updated_epld_modules | length > 0

    - name: Check system stability after EPLD upgrade
      cisco.nxos.nxos_command:
        commands:
          - show system resources
          - show module
          - show logging last 20
      register: post_epld_stability

- name: EPLD upgrade cleanup
  block:
    - name: Remove staged EPLD image (optional)
      cisco.nxos.nxos_command:
        commands:
          - "delete bootflash:{{ target_epld_image }}"
      when: >
        cleanup_epld_images | default(false) and target_epld_image is defined
      failed_when: false

    - name: Document EPLD upgrade completion
      ansible.builtin.set_fact:
        epld_upgrade_summary:
          timestamp: "{{ lookup('pipe', 'date -u +%Y-%m-%dT%H:%M:%SZ') }}"
          modules_upgraded: "{{ epld_modules_to_upgrade | default(['all']) }}"
          upgrade_method: >
            "{{ 'Non-disruptive' if has_dual_sup_for_epld else 'Disruptive' }}"
          success: >
"{{ epld_upgrade_status is defined and
              'Success' in epld_upgrade_status.stdout[0] }}"

- name: EPLD upgrade completion log
  ansible.builtin.debug:
    msg: |
      EPLD Upgrade Completion Summary:
      - >
        Modules Processed: {{ epld_upgrade_summary.modules_upgraded | join(', ') }}
      - Upgrade Method: {{ epld_upgrade_summary.upgrade_method }}
      - Success: {{ epld_upgrade_summary.success }}
      - Pre-upgrade Modules: {{ epld_modules | length }}
      - >
Post-upgrade Modules: {{ updated_epld_modules |
          length if updated_epld_modules is defined else 'Unknown' }}
      - >
System Stable: {{ 'YES' if post_epld_stability is defined else
          'CHECK REQUIRED' }}
      - Timestamp: {{ epld_upgrade_summary.timestamp }}

  when: epld_upgrade_summary is defined
