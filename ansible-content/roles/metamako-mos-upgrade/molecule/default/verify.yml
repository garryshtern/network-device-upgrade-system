---
# Metamako MOS Upgrade Verification Tests
# Validates HFT-specific requirements and upgrade success
- name: Verify - Metamako MOS Upgrade Results
  hosts: all
  gather_facts: false
  tasks:
    - name: Verify upgrade state was initialized
      ansible.builtin.assert:
        that:
          - metamako_upgrade_state is defined
          - metamako_upgrade_state.device is defined
          - metamako_upgrade_state.current_version is defined
          - metamako_upgrade_state.target_version is defined
        fail_msg: "Metamako upgrade state not properly initialized"

    - name: Verify device type detection
      ansible.builtin.assert:
        that:
          - metamako_upgrade_state.device_type is defined
          - metamako_upgrade_state.device_type != ""
        fail_msg: "Device type not detected during upgrade process"

    - name: Verify target version format
      ansible.builtin.assert:
        that:
          - metamako_upgrade_state.target_version is match("^[0-9]+\.[0-9]+\.[0-9]+")
        fail_msg: "Target version format invalid (expected: x.y.z)"

    - name: Verify MetaWatch/MetaMux detection
      ansible.builtin.assert:
        that:
          - metamako_upgrade_state.metawatch_enabled is defined
          - metamako_upgrade_state.metamux_enabled is defined
        fail_msg: "MetaWatch/MetaMux components not properly detected"

    - name: Verify HFT-specific variables are set
      ansible.builtin.assert:
        that:
          - metamako_maintain_latency is defined
          - metamako_max_latency_deviation_ns is defined
          - metamako_latency_baseline_required is defined
          - max_acceptable_latency_ns is defined
          - max_jitter_ns is defined
        fail_msg: "HFT-specific latency variables not properly configured"

    - name: Verify timing and synchronization requirements
      ansible.builtin.assert:
        that:
          - metamako_time_sync_required is defined
          - metamako_ptp_validation is defined
          - metamako_clock_tolerance_us is defined
        fail_msg: "Timing synchronization requirements not configured"

    - name: Verify performance thresholds for HFT
      ansible.builtin.assert:
        that:
          - max_acceptable_latency_ns | int <= 1000
          - max_jitter_ns | int <= 50
          - max_packet_loss_ppm | float <= 1.0
          - min_throughput_gbps | float >= 1.0
        fail_msg: "Performance thresholds not suitable for HFT requirements"

    - name: Verify temperature monitoring configuration
      ansible.builtin.assert:
        that:
          - max_device_temperature is defined
          - max_optics_temperature is defined
          - validate_temperature_sensors is defined
        fail_msg: "Temperature monitoring not properly configured"

    - name: Verify rollback capabilities
      ansible.builtin.assert:
        that:
          - metamako_enable_rollback is defined
          - metamako_rollback_timeout is defined
        fail_msg: "Rollback capabilities not configured"

    - name: Verify storage management
      ansible.builtin.assert:
        that:
          - metamako_minimum_free_space_mb is defined
          - metamako_cleanup_old_images is defined
          - metamako_preserve_current_image is defined
        fail_msg: "Storage management not properly configured"

    # Test critical paths and error handling
    - name: Test version comparison logic
      ansible.builtin.set_fact:
        version_test_results:
          same_version: "{{ '2.0.8' == '2.0.8' }}"
          different_version: "{{ '2.0.8' != '2.1.3' }}"
          valid_format: "{{ '2.1.3' is match('^[0-9]+\\.[0-9]+\\.[0-9]+') }}"

    - name: Verify version comparison works correctly
      ansible.builtin.assert:
        that:
          - version_test_results.same_version | bool
          - version_test_results.different_version | bool
          - version_test_results.valid_format | bool
        fail_msg: "Version comparison logic failed"

    # Validate task file references exist
    - name: Verify required task files exist
      ansible.builtin.stat:
        path: "{{ item }}"
      register: task_files
      loop:
        - "{{ role_path }}/tasks/main.yml"
        - "{{ role_path }}/tasks/check-metawatch-metamux.yml"
        - "{{ role_path }}/tasks/latency-validation.yml"
        - "{{ role_path }}/tasks/post-upgrade-service-validation.yml"
        - "{{ role_path }}/tasks/application-management.yml"

    - name: Assert all required task files exist
      ansible.builtin.assert:
        that:
          - item.stat.exists
        fail_msg: "Required task file {{ item.item }} not found"
      loop: "{{ task_files.results }}"

    # Success message
    - name: Display verification success
      ansible.builtin.debug:
        msg: |
          ✅ Metamako MOS Upgrade Role Verification PASSED

          HFT Requirements Validated:
          - Ultra-low latency configuration: ✅
          - Timing synchronization: ✅
          - Performance thresholds: ✅
          - Temperature monitoring: ✅
          - Rollback capabilities: ✅
          - Storage management: ✅

          Role Structure Validated:
          - Required task files: ✅
          - Variable definitions: ✅
          - Version handling: ✅
          - Component detection: ✅

          Status: Ready for HFT production deployment
