---
# MOS Application Management Tasks
# Handles application installation, removal, and state management
# IMPORTANT: This runs AFTER MOS upgrade completion for stability

- name: Gather current application status
  ansible.netcommon.cli_command:
    ansible.builtin.command: show application
  register: current_applications
  
- name: Parse application information
  ansible.builtin.set_fact:
    mos_applications: "{{ current_applications.stdout_lines | select('match', '^\\s*\\w+') | list }}"
    
- name: Display current applications
  ansible.builtin.debug:
    msg: |
      Current MOS Applications:
      {{ current_applications.stdout }}

- name: Application upload and installation
  block:
    - name: Check storage space for application
      ansible.netcommon.cli_command:
        ansible.builtin.command: show system storage
      register: app_storage_check
      when: application_action == 'install'
      
    - name: Upload application to device (Server-Initiated Transfer)
      ansible.builtin.command:
        cmd: >
          scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null
          {{ '-i ' + ansible_ssh_private_key_file if ansible_ssh_private_key_file is defined else '' }}
          "{{ application_source }}"
          "{{ ansible_user }}@{{ ansible_host }}:/flash/{{ application_filename | default(application_source | basename) }}"
        timeout: 1800
      delegate_to: localhost
      register: app_upload_result
      vars:
        ansible_connection: local
      when: 
        - application_action == 'install'
        - application_source is defined
        
    - name: Verify application file exists
      ansible.netcommon.cli_command:
        ansible.builtin.command: "dir flash:{{ application_filename | default(application_source | basename) }}"
      register: app_file_check
      when: application_action == 'install'
      
    - name: Install application from flash
      ansible.netcommon.cli_config:
        config: |
          install application flash:{{ application_filename | default(application_source | basename) }}
      register: app_install_result
      when: 
        - application_action == 'install'
        - application_filename is defined or application_source is defined
      
    - name: Verify application installation
      ansible.netcommon.cli_command:
        ansible.builtin.command: show application {{ application_name }}
      register: app_verify
      when: application_name is defined and application_action == 'install'
      
    - name: Enable installed application
      ansible.netcommon.cli_config:
        config: |
          app {{ application_name }}
          no shutdown
      when: application_name is defined and application_action == 'install'
      
  when: application_action is defined and application_action == 'install'

- name: Remove application (if specified)
  block:
    - name: Shutdown application before removal
      ansible.netcommon.cli_config:
        config: |
          app {{ application_name }}
          shutdown force
      when: application_name is defined
      
    - name: Remove application state
      ansible.netcommon.cli_config:
        config: |
          app {{ application_name }}
          default app state
      when: application_name is defined
      
    - name: Uninstall application
      ansible.netcommon.cli_config:
        config: |
          remove application {{ application_name }}
      register: app_remove_result
      when: application_name is defined
      
  when: application_action is defined and application_action == 'remove'

- name: EOS extension management
  block:
    - name: Upload EOS extension (Server-Initiated Transfer)
      ansible.builtin.command:
        cmd: >
          scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null
          {{ '-i ' + ansible_ssh_private_key_file if ansible_ssh_private_key_file is defined else '' }}
          "{{ eos_extension_source }}"
          "{{ ansible_user }}@{{ ansible_host }}:/flash/{{ eos_extension_filename | default(eos_extension_source | basename) }}"
        timeout: 1800
      delegate_to: localhost
      register: eos_upload_result
      vars:
        ansible_connection: local
      when:
        - eos_extension_action == 'install'
        - eos_extension_source is defined
        
    - name: Verify EOS extension file exists
      ansible.netcommon.cli_command:
        ansible.builtin.command: "dir flash:{{ eos_extension_filename | default(eos_extension_source | basename) }}"
      register: eos_file_check
      when: eos_extension_action == 'install'
        
    - name: Install EOS extension from flash
      ansible.netcommon.cli_config:
        config: |
          install eos-extension flash:{{ eos_extension_filename | default(eos_extension_source | basename) }}
      register: eos_install_result
      when: 
        - eos_extension_source is defined 
        - eos_extension_action == 'install'
      
    - name: Remove EOS extension
      ansible.netcommon.cli_config:
        config: |
          remove eos-extension {{ eos_extension_name }}
      register: eos_remove_result
      when: eos_extension_name is defined and eos_extension_action == 'remove'
      
  when: eos_extension_action is defined

- name: Application state management
  block:
    - name: Enable application
      ansible.netcommon.cli_config:
        config: |
          app {{ item }}
          no shutdown
      loop: "{{ applications_to_enable | default([]) }}"
      
    - name: Disable application
      ansible.netcommon.cli_config:
        config: |
          app {{ item }}
          shutdown
      loop: "{{ applications_to_disable | default([]) }}"
      
    - name: Force shutdown application
      ansible.netcommon.cli_config:
        config: |
          app {{ item }}
          shutdown force
      loop: "{{ applications_to_force_shutdown | default([]) }}"

- name: Final application status check
  ansible.netcommon.cli_command:
    ansible.builtin.command: show application
  register: final_applications
  
- name: Display final application status
  ansible.builtin.debug:
    msg: |
      Final MOS Application Status:
      {{ final_applications.stdout }}