---
# Metamako MOS Storage Cleanup Tasks
# Safely removes obsolete firmware images and files

- name: Get current MOS version and storage information
  ansible.builtin.raw: "df -h /flash && echo '---VERSION---' && cat /etc/version"
  register: mos_storage_version
  changed_when: false

- name: Parse storage and version information
  ansible.builtin.set_fact:
    mos_storage_info: "{{ mos_storage_version.stdout.split('---VERSION---')[0] }}"
    mos_current_version: "{{ mos_storage_version.stdout.split('---VERSION---')[1] | trim }}"

- name: Extract storage metrics from df output
  ansible.builtin.set_fact:
    flash_total_size: "{{ mos_storage_info | regex_search('/flash\\s+(\\S+)', '\\1') | first }}"
    flash_used_size: "{{ mos_storage_info | regex_search('/flash\\s+\\S+\\s+(\\S+)', '\\1') | first }}"
    flash_available_size: "{{ mos_storage_info | regex_search('/flash\\s+\\S+\\s+\\S+\\s+(\\S+)', '\\1') | first }}"
    flash_usage_percent: "{{ mos_storage_info | regex_search('/flash\\s+\\S+\\s+\\S+\\s+\\S+\\s+(\\d+)%', '\\1') | first }}"

- name: Convert storage sizes to GB
  ansible.builtin.set_fact:
    current_free_gb: "{{ (flash_available_size | regex_replace('[GM]', '') | float * (1 if 'G' in flash_available_size else 0.001)) | round(2) }}"
    total_storage_gb: "{{ (flash_total_size | regex_replace('[GM]', '') | float * (1 if 'G' in flash_total_size else 0.001)) | round(2) }}"

- name: List MOS image files in /flash
  ansible.builtin.raw: "ls -la /flash/*.mos 2>/dev/null || echo 'No MOS files found'"
  register: mos_files_list
  changed_when: false

- name: Get application images
  ansible.builtin.raw: "ls -la /flash/*.tgz /flash/*.tar.gz 2>/dev/null || echo 'No application files found'"
  register: app_files_list
  changed_when: false

- name: Parse image file information
  ansible.builtin.set_fact:
    mos_images: "{{ mos_files_list.stdout_lines | select('match', '.*\\.mos$') | map('regex_replace', '.* ([^/]+\\.mos)$', '\\1') | list }}"
    app_images: "{{ app_files_list.stdout_lines | select('match', '.*(tgz|tar\\.gz)$') | map('regex_replace', '.* ([^/]+\\.(tgz|tar\\.gz))$', '\\1') | list }}"

- name: Identify current running image
  ansible.builtin.set_fact:
    running_image: "mos-{{ mos_current_version }}.mos"

- name: Identify cleanup candidates (excluding running image)
  ansible.builtin.set_fact:
    cleanup_candidates: "{{ (mos_images + app_images) | difference([running_image]) | list }}"

- name: Check if cleanup is needed
  ansible.builtin.set_fact:
    cleanup_needed: "{{ current_free_gb < (target_free_space | default(4)) }}"

- name: Remove obsolete image files (if cleanup needed and safe)
  ansible.builtin.raw: "rm -f /flash/{{ item }}"
  loop: "{{ cleanup_candidates }}"
  when:
    - cleanup_needed
    - item != running_image
    - cleanup_candidates | length > 0
  register: cleanup_result
  ignore_errors: true

- name: Verify storage space after cleanup
  ansible.builtin.raw: "df -h /flash"
  register: post_cleanup_storage
  changed_when: false

- name: Parse post-cleanup storage information
  ansible.builtin.set_fact:
    post_cleanup_available: "{{ post_cleanup_storage.stdout | regex_search('/flash\\s+\\S+\\s+\\S+\\s+(\\S+)', '\\1') | first }}"
    post_cleanup_free_gb: "{{ (post_cleanup_available | regex_replace('[GM]', '') | float * (1 if 'G' in post_cleanup_available else 0.001)) | round(2) }}"

- name: Set storage cleanup results
  ansible.builtin.set_fact:
    storage_cleanup_results:
      platform: "mos"
      files_removed: "{{ cleanup_result.results | selectattr('changed', 'equalto', true) | list | length }}"
      space_freed_gb: "{{ (post_cleanup_free_gb - current_free_gb) | round(2) }}"
      final_free_space_gb: "{{ post_cleanup_free_gb }}"
      cleanup_successful: "{{ post_cleanup_free_gb >= (target_free_space | default(4)) }}"
