---
# Latency Validation for Metamako MOS
# Critical latency measurements and validation

- name: Measure current latency baseline
  ansible.netcommon.cli_command:
    command: show latency statistics
  changed_when: false
  register: pre_upgrade_latency
- name: Get interface latency stats
  ansible.netcommon.cli_command:
    command: show interface latency
  changed_when: false
  register: pre_interface_latency
- name: Store baseline latency metrics
  ansible.builtin.set_fact:
    baseline_latency:
      system_latency: >
        '{{ pre_upgrade_latency.stdout | regex_search(''Average: ([\d\.]+)'',
        ''\1'') | first | default(''0'') }}'
      max_latency: >
        '{{ pre_upgrade_latency.stdout | regex_search(''Maximum: ([\d\.]+)'',
        ''\1'') | first | default(''0'') }}'
      interface_metrics: '{{ pre_interface_latency.stdout }}'
- name: Enable latency monitoring
  ansible.netcommon.cli_command:
    ansible.builtin.command: latency monitor enable
  failed_when: false
- name: Set low-latency mode for upgrade
  ansible.netcommon.cli_command:
    ansible.builtin.command: system upgrade-mode low-latency
  failed_when: false
- name: Verify system is in optimal state
  ansible.netcommon.cli_command:
    command: show system performance
  changed_when: false
  register: system_performance
- name: Start continuous latency monitoring
  ansible.netcommon.cli_command:
    ansible.builtin.command: latency monitor start continuous
  failed_when: false
- name: Perform the actual upgrade
  ansible.builtin.include_tasks: image-installation.yml
- name: Monitor latency during upgrade
  ansible.netcommon.cli_command:
    command: show latency monitor real-time
  changed_when: false
  register: upgrade_latency_monitor
  failed_when: false
- name: Measure post-upgrade latency
  ansible.netcommon.cli_command:
    command: show latency statistics
  changed_when: false
  register: post_upgrade_latency
- name: Get updated interface latency stats
  ansible.netcommon.cli_command:
    command: show interface latency
  changed_when: false
  register: post_interface_latency
- name: Parse post-upgrade metrics
  ansible.builtin.set_fact:
    post_latency:
      system_latency: >
        '{{ post_upgrade_latency.stdout | regex_search(''Average: ([\d\.]+)'',
        ''\1'') | first | default(''0'') }}'
      max_latency: >
        '{{ post_upgrade_latency.stdout | regex_search(''Maximum: ([\d\.]+)'',
        ''\1'') | first | default(''0'') }}'
      interface_metrics: '{{ post_interface_latency.stdout }}'
- name: Validate latency performance
  ansible.builtin.assert:
    that:
      - >
        post_latency.system_latency | float <=
          (baseline_latency.system_latency | float
        * 1.1)
      - post_latency.max_latency | float <=
        (baseline_latency.max_latency | float *
        1.2)
    fail_msg: Latency degradation detected after upgrade
- name: Latency validation report
  ansible.builtin.debug:
    msg: >
      "Metamako Latency Validation Results:\nPre-Upgrade
        Average: {{ baseline_latency.system_latency\
      \ }}ns\nPost-Upgrade Average: >
        {{ post_latency.system_latency }}ns\nPre-Upgrade\
      \ Maximum: >
        {{ baseline_latency.max_latency }}ns\nPost-Upgrade
          Maximum: {{ post_latency.max_latency\
      \ }}ns\nLatency Change: >
        \n {{ ((post_latency.system_latency |
          float - baseline_latency.system_latency\
      \ | float) / baseline_latency.system_latency | float
        * 100) | round(2) }}\n\
      \  %\nStatus: >
        {{ 'PASS' if post_latency.system_latency
          | float <= baseline_latency.system_latency\
      \ | float * 1.1 else 'DEGRADED' }}"
