---
# Image Validation Test Playbook
# Tests security and integrity validation for firmware images
- name: Converge - Test Image Validation Role
  hosts: all
  gather_facts: false
  vars:
    firmware_base_path: "/tmp/firmware-test"
    target_firmware: "test-firmware.bin"

  pre_tasks:
    - name: Install required packages for image validation testing
      ansible.builtin.pip:
        name:
          - cryptography
          - hashlib
        state: present
      failed_when: false

    - name: Create firmware test directory structure
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
      loop:
        - "{{ firmware_base_path }}"
        - "{{ firmware_base_path }}/cisco"
        - "{{ firmware_base_path }}/fortinet"
        - "{{ firmware_base_path }}/signatures"
        - "{{ firmware_base_path }}/checksums"

    - name: Create test firmware images with different characteristics
      ansible.builtin.copy:
        content: "{{ item.content }}"
        dest: "{{ firmware_base_path }}/{{ item.filename }}"
        mode: '0644'
      loop:
        - filename: "cisco/nxos.10.1.2.bin"
          content: |
            # Mock Cisco NX-OS firmware image v10.1.2
            # This is a test image for validation testing
            # Size: 2GB (simulated)
            # Platform: Cisco Nexus 9000
            CISCO_NXOS_IMAGE_SIGNATURE_START
            Valid firmware content would be here
            CISCO_NXOS_IMAGE_SIGNATURE_END

        - filename: "fortinet/fortios.7.4.1.out"
          content: |
            # Mock FortiOS firmware image v7.4.1
            # This is a test image for validation testing
            # Size: 512MB (simulated)
            # Platform: FortiGate
            FORTINET_SIGNATURE_START
            Valid FortiOS firmware content
            FORTINET_SIGNATURE_END

        - filename: "corrupted.bin"
          content: |
            # Corrupted firmware image for negative testing
            # This should fail validation checks
            CORRUPTED_DATA_INVALID_SIGNATURE

    - name: Create mock hash files for validation
      ansible.builtin.copy:
        content: "{{ item.content }}"
        dest: "{{ firmware_base_path }}/checksums/{{ item.filename }}"
        mode: '0644'
      loop:
        - filename: "nxos.10.1.2.bin.sha512"
          content: >-
            a1b2c3d4e5f6789012345678901234567890abcdef1234567890abcdef
            123456789012345678901234567890abcdef1234567890abcdef
            nxos.10.1.2.bin
        - filename: "fortios.7.4.1.out.sha512"
          content: >-
            f9e8d7c6b5a4321098765432109876543210fedcba0987654321fedcba
            098765432109876543210fedcba0987654321fedcba098765  fortios.7.4.1.out

    - name: Create mock digital signature files
      ansible.builtin.copy:
        content: "{{ item.content }}"
        dest: "{{ firmware_base_path }}/signatures/{{ item.filename }}"
        mode: '0644'
      loop:
        - filename: "nxos.10.1.2.bin.sig"
          content: |
            -----BEGIN CISCO SIGNATURE-----
            MockCiscoDigitalSignatureForTesting
            This would be a real cryptographic signature
            -----END CISCO SIGNATURE-----
        - filename: "fortios.7.4.1.out.sig"
          content: |
            -----BEGIN FORTINET SIGNATURE-----
            MockFortinetDigitalSignatureForTesting
            This would be a real cryptographic signature
            -----END FORTINET SIGNATURE-----

    - name: Create test CA certificates for signature verification
      ansible.builtin.copy:
        content: |
          -----BEGIN CERTIFICATE-----
          MockRootCAForTestingPurposes
          This would be a real CA certificate in production
          -----END CERTIFICATE-----
        dest: "{{ firmware_base_path }}/root-ca.pem"
        mode: '0644'

  tasks:
    # Test image validation role
    - name: Test image validation role with various scenarios
      ansible.builtin.include_role:
        name: image-validation
      vars:
        test_mode: true
        firmware_path: "{{ firmware_base_path }}"

    # Additional validation tests
    - name: Test hash verification manually
      ansible.builtin.shell: |
        cd {{ firmware_base_path }}
        if [ -f "cisco/nxos.10.1.2.bin" ]; then
          echo "File exists for hash verification"
          sha512sum cisco/nxos.10.1.2.bin > calculated_hash.txt
          echo "Hash calculation completed"
        fi
      register: hash_test_result
      changed_when: false

    - name: Test file size validation
      ansible.builtin.stat:
        path: "{{ firmware_base_path }}/cisco/nxos.10.1.2.bin"
      register: firmware_stat

    - name: Validate file was created and has content
      ansible.builtin.assert:
        that:
          - firmware_stat.stat.exists
          - firmware_stat.stat.size > 0
        fail_msg: "Test firmware file validation failed"

  post_tasks:
    - name: Cleanup test firmware files
      ansible.builtin.file:
        path: "{{ firmware_base_path }}"
        state: absent
      failed_when: false
