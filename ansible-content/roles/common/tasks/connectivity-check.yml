---
# Common Connectivity Check Tasks
# Platform-specific basic connectivity validation
# REDESIGNED: Uses platform-appropriate commands (not generic "show version")

- name: Override connection type for FortiOS in check mode
  ansible.builtin.set_fact:
    ansible_connection: local
  when:
    - ansible_check_mode
    - ansible_network_os is defined
    - ansible_network_os == 'fortinet.fortios.fortios'

- name: Test basic connectivity to device
  ansible.builtin.wait_for_connection:
    timeout: 60
    delay: 5
  register: connectivity_test
  when: not ansible_check_mode

- name: Simulate connectivity test in check mode
  ansible.builtin.set_fact:
    connectivity_test: {"changed": false, "failed": false}
  when: ansible_check_mode

- name: Perform ping test to device
  ansible.builtin.ping:
  register: ping_result
  when: not ansible_check_mode

- name: Simulate ping test in check mode
  ansible.builtin.set_fact:
    ping_result: {"changed": false, "failed": false}
  when: ansible_check_mode

# Platform-specific CLI tests
# Each platform uses appropriate module and command

- name: Cisco NX-OS CLI connectivity test
  block:
    - name: Execute basic NX-OS command
      cisco.nxos.nxos_command:
        commands:
          - show clock
      register: nxos_cli_test
      changed_when: false

    - name: Set NX-OS CLI connectivity status
      ansible.builtin.set_fact:
        cli_connectivity: true

  rescue:
    - name: NX-OS CLI connectivity failed
      ansible.builtin.set_fact:
        cli_connectivity: false
  when:
    - ansible_network_os is defined
    - ansible_network_os == 'cisco.nxos.nxos'
    - not ansible_check_mode

- name: Cisco IOS-XE CLI connectivity test
  block:
    - name: Execute basic IOS-XE command
      cisco.ios.ios_command:
        commands:
          - show clock
      register: ios_cli_test
      changed_when: false

    - name: Set IOS-XE CLI connectivity status
      ansible.builtin.set_fact:
        cli_connectivity: true

  rescue:
    - name: IOS-XE CLI connectivity failed
      ansible.builtin.set_fact:
        cli_connectivity: false
  when:
    - ansible_network_os is defined
    - ansible_network_os == 'cisco.ios.ios'
    - not ansible_check_mode

- name: FortiOS API connectivity test
  block:
    - name: Test FortiOS API connection
      fortinet.fortios.fortios_monitor_fact:
        vdom: "root"
        selector: "system_status"
      register: fortios_api_test

    - name: Set FortiOS API connectivity status
      ansible.builtin.set_fact:
        cli_connectivity: true

  rescue:
    - name: FortiOS API connectivity failed
      ansible.builtin.set_fact:
        cli_connectivity: false
  when:
    - ansible_network_os is defined
    - ansible_network_os == 'fortinet.fortios.fortios'
    - not ansible_check_mode

- name: Metamako MOS CLI connectivity test
  block:
    - name: Execute basic Metamako command
      ansible.netcommon.cli_command:
        command: show system info
      register: mos_cli_test
      changed_when: false

    - name: Set Metamako CLI connectivity status
      ansible.builtin.set_fact:
        cli_connectivity: true

  rescue:
    - name: Metamako CLI connectivity failed
      ansible.builtin.set_fact:
        cli_connectivity: false
  when:
    - platform_type is defined
    - platform_type == 'metamako_mos'
    - not ansible_check_mode

- name: Opengear connectivity test
  block:
    - name: Execute basic Opengear command
      ansible.builtin.raw: config -g config.version
      register: opengear_cli_test
      changed_when: false

    - name: Set Opengear CLI connectivity status
      ansible.builtin.set_fact:
        cli_connectivity: true

  rescue:
    - name: Opengear CLI connectivity failed
      ansible.builtin.set_fact:
        cli_connectivity: false
  when:
    - platform_type is defined
    - platform_type == 'opengear'
    - not ansible_check_mode

- name: Set CLI connectivity for check mode
  ansible.builtin.set_fact:
    cli_connectivity: true
  when: ansible_check_mode

- name: Set overall connectivity status
  ansible.builtin.set_fact:
    device_connectivity:
      device: "{{ inventory_hostname }}"
      platform: "{{ platform_type | default(ansible_network_os) | default('unknown') }}"
      timestamp: "{{ lookup('pipe', 'date -u +%Y-%m-%dT%H:%M:%SZ') }}"
      basic_connectivity: "{{ connectivity_test is succeeded }}"
      ping_successful: "{{ ping_result is succeeded }}"
      cli_connectivity: "{{ cli_connectivity | default(false) }}"
      overall_status: >-
        {{
          (connectivity_test is succeeded) and
          (ping_result is succeeded) and
          (cli_connectivity | default(false))
        }}

- name: Display connectivity results
  ansible.builtin.debug:
    msg:
      - "=== Connectivity Check Results ==="
      - "Device: {{ inventory_hostname }}"
      - "Platform: {{ device_connectivity.platform }}"
      - "Basic Connectivity: {{ 'PASS' if device_connectivity.basic_connectivity else 'FAIL' }}"
      - "Ping Test: {{ 'PASS' if device_connectivity.ping_successful else 'FAIL' }}"
      - "CLI Connectivity: {{ 'PASS' if device_connectivity.cli_connectivity else 'FAIL' }}"
      - "Overall Status: {{ 'CONNECTED' if device_connectivity.overall_status else 'CONNECTION FAILED' }}"
      - "================================="

- name: Fail if device is not reachable
  ansible.builtin.fail:
    msg: "Device {{ inventory_hostname }} is not reachable - connectivity check failed"
  when: not device_connectivity.overall_status
