---
# Network Validation Tasks
# Comprehensive network state validation and comparison
# Validates BGP, interfaces, routing, multicast, and ARP states

# Initialize variables if not already set
- name: Set validation variables
  ansible.builtin.set_fact:
    validation_timestamp: "{{ validation_timestamp | default(ansible_date_time.iso8601) }}"
    validation_type: >
      {{ validation_type | default('post_upgrade') }}
    baseline_data_path: >
      {{ baseline_data_path | default('/var/lib/network-upgrade/baselines') }}
    validation_results_path: >
      {{ validation_results_path | default('/var/lib/network-upgrade/validation') }}
    compare_with_baseline: >
      {{ compare_with_baseline | default(network_state_comparison | default(true)) }}
    validation_timeout: "{{ validation_timeout | default(300) }}"

# Pre-validation setup
- name: Create validation results directory
  ansible.builtin.file:
    path: "{{ validation_results_path }}/{{ inventory_hostname }}"
    state: directory
    mode: '0755'
  delegate_to: localhost

- name: Initialize validation state
  ansible.builtin.set_fact:
    validation_results:
      device_name: "{{ inventory_hostname }}"
      platform: "{{ ansible_network_os }}"
      validation_type: "{{ validation_type }}"
      timestamp: "{{ validation_timestamp }}"
      tests_passed: []
      tests_failed: []
      tests_skipped: []

# BGP Validation
- name: BGP State Validation
  block:
    - name: Capture current BGP state
      ansible.builtin.include_role:
        name: network-validation
        tasks_from: bgp-validation
      vars:
        capture_mode: "validation"
        output_file: >
          {{ validation_results_path }}/{{ inventory_hostname }}/bgp_current_{{ validation_timestamp }}.json

    - name: Compare BGP with baseline
      ansible.builtin.include_role:
        name: network-validation
        tasks_from: bgp-comparison
      vars:
        baseline_file: >
          {{ baseline_data_path }}/{{ inventory_hostname }}/bgp_baseline_*.json
        current_file: >
          {{ validation_results_path }}/{{ inventory_hostname }}/bgp_current_{{ validation_timestamp }}.json
      when: compare_with_baseline

    - name: Mark BGP validation as passed
      ansible.builtin.set_fact:
        validation_results: >
          {{ validation_results | combine({
            tests_passed: validation_results.tests_passed + [validation_name]
          }) }}"

  rescue:
    - name: Mark BGP validation as failed
      ansible.builtin.set_fact:
        validation_results: >
          {{ validation_results | combine({
            tests_passed: validation_results.tests_passed + [validation_name]
          }) }}"

# Interface Validation
- name: Interface State Validation
  block:
    - name: Capture current interface states
      ansible.builtin.include_role:
        name: network-validation
        tasks_from: interface-validation
      vars:
        capture_mode: "validation"
        output_file: "{{ validation_results_path }}/{{ inventory_hostname }}/interfaces_current_{{ validation_timestamp }}.json"

    - name: Compare interfaces with baseline
      ansible.builtin.include_role:
        name: network-validation
        tasks_from: interface-comparison
      vars:
        baseline_file: "{{ baseline_data_path }}/{{ inventory_hostname }}/interfaces_baseline_*.json"
        current_file: "{{ validation_results_path }}/{{ inventory_hostname }}/interfaces_current_{{ validation_timestamp }}.json"
      when: compare_with_baseline

    - name: Mark interface validation as passed
      ansible.builtin.set_fact:
        validation_results: >
          {{ validation_results | combine({
            tests_passed: validation_results.tests_passed + [validation_name]
          }) }}"

  rescue:
    - name: Mark interface validation as failed
      ansible.builtin.set_fact:
        validation_results: >
          {{ validation_results | combine({
            tests_passed: validation_results.tests_passed + [validation_name]
          }) }}"

# Routing Validation
- name: Routing State Validation
  block:
    - name: Capture current routing information
      ansible.builtin.include_role:
        name: network-validation
        tasks_from: routing-validation
      vars:
        capture_mode: "validation"
        output_file: "{{ validation_results_path }}/{{ inventory_hostname }}/routing_current_{{ validation_timestamp }}.json"

    - name: Compare routing with baseline
      ansible.builtin.include_role:
        name: network-validation
        tasks_from: routing-comparison
      vars:
        baseline_file: "{{ baseline_data_path }}/{{ inventory_hostname }}/routing_baseline_*.json"
        current_file: "{{ validation_results_path }}/{{ inventory_hostname }}/routing_current_{{ validation_timestamp }}.json"
      when: compare_with_baseline

    - name: Mark routing validation as passed
      ansible.builtin.set_fact:
        validation_results: >
          {{ validation_results | combine({
            tests_passed: validation_results.tests_passed + [validation_name]
          }) }}"

  rescue:
    - name: Mark routing validation as failed
      ansible.builtin.set_fact:
        validation_results: >
          {{ validation_results | combine({
            tests_passed: validation_results.tests_passed + [validation_name]
          }) }}"

# Multicast Validation (if applicable)
- name: Multicast State Validation
  block:
    - name: Capture current multicast state
      ansible.builtin.include_role:
        name: network-validation
        tasks_from: multicast-validation
      vars:
        capture_mode: "validation"
        output_file: "{{ validation_results_path }}/{{ inventory_hostname }}/multicast_current_{{ validation_timestamp }}.json"
      when:
        - ansible_network_os in ['nxos', 'ios']
        - multicast_enabled | default(true) | bool

    - name: Compare multicast with baseline
      ansible.builtin.include_role:
        name: network-validation
        tasks_from: multicast-comparison
      vars:
        baseline_file: "{{ baseline_data_path }}/{{ inventory_hostname }}/multicast_baseline_*.json"
        current_file: "{{ validation_results_path }}/{{ inventory_hostname }}/multicast_current_{{ validation_timestamp }}.json"
      when:
        - ansible_network_os in ['nxos', 'ios']
        - multicast_enabled | default(true) | bool
        - compare_with_baseline

    - name: Mark multicast validation as passed
      ansible.builtin.set_fact:
        validation_results: >
          {{ validation_results | combine({
            tests_passed: validation_results.tests_passed + [validation_name]
          }) }}"
      when:
        - ansible_network_os in ['nxos', 'ios']
        - multicast_enabled | default(true) | bool

    - name: Mark multicast validation as skipped
      ansible.builtin.set_fact:
        validation_results: >
          {{ validation_results | combine({
            tests_passed: validation_results.tests_passed + [validation_name]
          }) }}"
      when: not (ansible_network_os in ['nxos', 'ios'] and multicast_enabled | default(true) | bool)

  rescue:
    - name: Mark multicast validation as failed
      ansible.builtin.set_fact:
        validation_results: >
          {{ validation_results | combine({
            tests_passed: validation_results.tests_passed + [validation_name]
          }) }}"

# ARP Table Validation
- name: ARP Table Validation
  block:
    - name: Capture current ARP tables
      ansible.builtin.include_role:
        name: network-validation
        tasks_from: arp-validation
      vars:
        capture_mode: "validation"
        output_file: "{{ validation_results_path }}/{{ inventory_hostname }}/arp_current_{{ validation_timestamp }}.json"

    - name: Compare ARP with baseline
      ansible.builtin.include_role:
        name: network-validation
        tasks_from: arp-comparison
      vars:
        baseline_file: "{{ baseline_data_path }}/{{ inventory_hostname }}/arp_baseline_*.json"
        current_file: "{{ validation_results_path }}/{{ inventory_hostname }}/arp_current_{{ validation_timestamp }}.json"
      when: compare_with_baseline

    - name: Mark ARP validation as passed
      ansible.builtin.set_fact:
        validation_results: >
          {{ validation_results | combine({
            tests_passed: validation_results.tests_passed + [validation_name]
          }) }}"

  rescue:
    - name: Mark ARP validation as failed
      ansible.builtin.set_fact:
        validation_results: >
          {{ validation_results | combine({
            tests_passed: validation_results.tests_passed + [validation_name]
          }) }}"

# Protocol Convergence Check
- name: Protocol Convergence Validation
  block:
    - name: Check protocol convergence
      ansible.builtin.include_role:
        name: network-validation
        tasks_from: protocol-convergence
      vars:
        convergence_timeout: "{{ validation_timeout }}"

    - name: Mark convergence validation as passed
      ansible.builtin.set_fact:
        validation_results: >
          {{ validation_results | combine({
            tests_passed: validation_results.tests_passed + [validation_name]
          }) }}"

  rescue:
    - name: Mark convergence validation as failed
      ansible.builtin.set_fact:
        validation_results: >
          {{ validation_results | combine({
            tests_passed: validation_results.tests_passed + [validation_name]
          }) }}"

# Post-validation reporting
- name: Generate validation summary
  ansible.builtin.template:
    src: ../templates/validation-summary.j2
    dest: "{{ validation_results_path }}/{{ inventory_hostname }}/validation_summary_{{ validation_timestamp }}.json"
  vars:
    summary_data: "{{ validation_results }}"
  delegate_to: localhost

- name: Calculate validation score
  ansible.builtin.set_fact:
    validation_score: "{{ (validation_results.tests_passed | length / (validation_results.tests_passed | length + validation_results.tests_failed | length) * 100) | round(2) }}"
  when: (validation_results.tests_passed | length + validation_results.tests_failed | length) > 0

- name: Record validation metrics
  ansible.builtin.include_tasks: ../roles/common/tasks/metrics-export.yml
  vars:
    metric_type: "network_validation"
    metric_data:
      device_id: "{{ inventory_hostname }}"
      platform: "{{ ansible_network_os }}"
      validation_type: "{{ validation_type }}"
      validation_score: "{{ validation_score | default(0) }}"
      tests_passed: "{{ validation_results.tests_passed | length }}"
      tests_failed: "{{ validation_results.tests_failed | length }}"
      tests_skipped: "{{ validation_results.tests_skipped | length }}"

- name: Determine validation outcome
  ansible.builtin.set_fact:
    validation_passed: "{{ validation_results.tests_failed | length == 0 }}"

- name: Display validation results
  ansible.builtin.debug:
    msg:
      - "=== Network Validation Results ==="
      - "Device: {{ inventory_hostname }}"
      - "Platform: {{ ansible_network_os }}"
      - "Validation Type: {{ validation_type }}"
      - "Timestamp: {{ validation_timestamp }}"
      - "Tests Passed: {{ validation_results.tests_passed | length }}"
      - "Tests Failed: {{ validation_results.tests_failed | length }}"
      - "Tests Skipped: {{ validation_results.tests_skipped | length }}"
      - "Validation Score: {{ validation_score | default('N/A') }}%"
      - "Overall Status: {{ 'PASS' if validation_passed else 'FAIL' }}"
      - "Results Location: {{ validation_results_path }}/{{ inventory_hostname }}/"
      - "=================================="

- name: Fail if validation failed
  ansible.builtin.fail:
    msg: |
      Network validation failed for {{ inventory_hostname }}
      Failed tests: {{ validation_results.tests_failed | join(', ') }}
  when: not validation_passed and validation_type == 'post_upgrade'
