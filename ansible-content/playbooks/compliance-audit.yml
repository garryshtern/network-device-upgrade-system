---
# Compliance Audit Playbook
# Post-upgrade compliance verification and reporting
# Validates security configurations and regulatory requirements

- name: Compliance Audit and Verification
  hosts: "{{ target_hosts | default('all') }}"
  gather_facts: false
  connection: network_cli
  vars:
    audit_timestamp: "{{ ansible_date_time.iso8601 }}"
    audit_results_path: "/var/lib/network-upgrade/compliance"
    compliance_standards: >
      {{ compliance_standards | default(['security_baseline', 'network_hardening']) }}
    generate_report: "{{ generate_report | default(true) }}"
  pre_tasks:
    - name: Create compliance audit directory
      ansible.builtin.file:
        path: "{{ audit_results_path }}/{{ inventory_hostname }}"
        state: directory
        mode: "0755"
      delegate_to: localhost

  tasks:
    - name: Initialize compliance audit state
      ansible.builtin.set_fact:
        compliance_results:
          device_name: "{{ inventory_hostname }}"
          platform: "{{ ansible_network_os }}"
          audit_timestamp: "{{ audit_timestamp }}"
          firmware_version: >
            {{ current_firmware_version | default('unknown') }}
          standards_tested: []
          compliance_checks:
            passed: []
            failed: []
            skipped: []
            warnings: []

    # Security Baseline Compliance
    - name: Security Baseline Compliance Check
      when: "'security_baseline' in compliance_standards"
      block:
        - name: Run security baseline audit
          ansible.builtin.include_role:
            name: compliance-validation
            tasks_from: security-baseline
          vars:
            audit_output: >
              {{ audit_results_path }}/{{ inventory_hostname }}/security_baseline_{{ audit_timestamp }}.json

        - name: Update compliance results - security baseline
          ansible.builtin.set_fact:
            compliance_results: >-
              {{
                compliance_results | combine({
                  'standards_tested': 
                    compliance_results.standards_tested + ['security_baseline'],
                  'compliance_checks': {
                    'passed': 
                      compliance_results.compliance_checks.passed +
                      security_baseline_results.passed,
                    'failed': 
                      compliance_results.compliance_checks.failed +
                      security_baseline_results.failed,
                    'skipped': 
                      compliance_results.compliance_checks.skipped +
                      security_baseline_results.skipped,
                    'warnings': 
                      compliance_results.compliance_checks.warnings +
                      security_baseline_results.warnings
                  }
                })
              }}

      rescue:
        - name: Handle security baseline audit failure
          ansible.builtin.set_fact:
            compliance_results: >
              {{
                compliance_results | combine({
                  'compliance_checks': {
                    'failed': compliance_results.compliance_checks.failed + ['security_baseline_audit_error']
                  }
                })
              }}
    - name: Network Hardening Compliance Check
      when: "'network_hardening' in compliance_standards"
      block:
        - name: Run network hardening audit
          ansible.builtin.include_role:
            name: compliance-validation
            tasks_from: network-hardening
          vars:
            audit_output: "{{ audit_results_path }}/{{ inventory_hostname }}/network_hardening_{{ audit_timestamp }}.json"

        - name: Update compliance results - network hardening
          ansible.builtin.set_fact:
            compliance_results: >
              {{
                compliance_results | combine({
                  'standards_tested': compliance_results.standards_tested + ['network_hardening'],
                  'compliance_checks': {
                    'passed': compliance_results.compliance_checks.passed + network_hardening_results.passed,
                    'failed': compliance_results.compliance_checks.failed + network_hardening_results.failed,
                    'skipped': compliance_results.compliance_checks.skipped + network_hardening_results.skipped,
                    'warnings': compliance_results.compliance_checks.warnings + network_hardening_results.warnings
                  }
                })
              }}

      rescue:
        - name: Handle network hardening audit failure
          ansible.builtin.set_fact:
            compliance_results: >
              {{
                compliance_results | combine({
                  'compliance_checks': {
                    'failed': compliance_results.compliance_checks.failed + ['network_hardening_audit_error']
                  }
                })
              }}
    - name: Platform-Specific Compliance Checks
      block:
        # Cisco NX-OS Compliance
        - name: Cisco NX-OS compliance validation
          ansible.builtin.include_role:
            name: cisco-nxos-upgrade
            tasks_from: compliance-audit
          vars:
            audit_output: "{{ audit_results_path }}/{{ inventory_hostname }}/nxos_compliance_{{ audit_timestamp }}.json"
          when: ansible_network_os == 'nxos'

        # Cisco IOS-XE Compliance
        - name: Cisco IOS-XE compliance validation
          ansible.builtin.include_role:
            name: cisco-iosxe-upgrade
            tasks_from: compliance-audit
          vars:
            audit_output: "{{ audit_results_path }}/{{ inventory_hostname }}/iosxe_compliance_{{ audit_timestamp }}.json"
          when: ansible_network_os == 'ios'

        # Metamako MOS Compliance
        - name: Metamako MOS compliance validation
          ansible.builtin.include_role:
            name: metamako-mos-upgrade
            tasks_from: compliance-audit
          vars:
            audit_output: "{{ audit_results_path }}/{{ inventory_hostname }}/mos_compliance_{{ audit_timestamp }}.json"
          when: ansible_network_os == 'mos'

        # Opengear Compliance
        - name: Opengear compliance validation
          ansible.builtin.include_role:
            name: opengear-upgrade
            tasks_from: compliance-audit
          vars:
            audit_output: "{{ audit_results_path }}/{{ inventory_hostname }}/opengear_compliance_{{ audit_timestamp }}.json"
          when: ansible_network_os == 'opengear'

        # FortiOS Compliance
        - name: FortiOS compliance validation
          ansible.builtin.include_role:
            name: fortios-upgrade
            tasks_from: compliance-audit
          vars:
            audit_output: "{{ audit_results_path }}/{{ inventory_hostname }}/fortios_compliance_{{ audit_timestamp }}.json"
          when: ansible_network_os == 'fortios'

        - name: Update compliance results - platform specific
          ansible.builtin.set_fact:
            compliance_results: >
              {{
                compliance_results | combine({
                  'standards_tested': compliance_results.standards_tested + ['platform_specific'],
                  'compliance_checks': {
                    'passed': compliance_results.compliance_checks.passed + platform_compliance_results.passed,
                    'failed': compliance_results.compliance_checks.failed + platform_compliance_results.failed,
                    'skipped': compliance_results.compliance_checks.skipped + platform_compliance_results.skipped,
                    'warnings': compliance_results.compliance_checks.warnings + platform_compliance_results.warnings
                  }
                })
              }}
          when: platform_compliance_results is defined

      rescue:
        - name: Handle platform compliance audit failure
          ansible.builtin.set_fact:
            compliance_results: >
              {{
                compliance_results | combine({
                  'compliance_checks': {
                    'failed': compliance_results.compliance_checks.failed + ['platform_compliance_audit_error']
                  }
                })
              }}

  post_tasks:
    - name: Calculate compliance metrics
      ansible.builtin.set_fact:
        total_checks: "{{ (compliance_results.compliance_checks.passed | length + compliance_results.compliance_checks.failed | length) }}"
        compliance_percentage: "{{ (compliance_results.compliance_checks.passed | length / total_checks * 100) | round(2) if total_checks | int > 0 else 0 }}"

    - name: Generate compliance report
      ansible.builtin.template:
        src: "templates/compliance-report.j2"
        dest: "{{ audit_results_path }}/{{ inventory_hostname }}/compliance_report_{{ audit_timestamp }}.json"
        mode: "0644"
      vars:
        report_data: "{{ compliance_results }}"
        compliance_score: "{{ compliance_percentage }}"
        total_checks_run: "{{ total_checks }}"
      delegate_to: localhost
      when: generate_report

    - name: Generate human-readable compliance report
      ansible.builtin.template:
        src: "templates/compliance-report.html.j2"
        dest: "{{ audit_results_path }}/{{ inventory_hostname }}/compliance_report_{{ audit_timestamp }}.html"
        mode: "0644"
      vars:
        report_data: "{{ compliance_results }}"
        compliance_score: "{{ compliance_percentage }}"
        total_checks_run: "{{ total_checks }}"
      delegate_to: localhost
      when: generate_report

    - name: Record compliance metrics to InfluxDB
      ansible.builtin.uri:
        url: "{{ influxdb_url }}/api/v2/write?bucket={{ influxdb_bucket }}&org={{ influxdb_org }}"
        method: POST
        headers:
          Authorization: "Token {{ influxdb_token }}"
        body: >
          compliance_audit,device_id={{ inventory_hostname }},device_type={{ ansible_network_os }},
          site_location={{ site_name | default('unknown') }},vendor={{ vendor | default('unknown') }},
          platform={{ ansible_network_os }}
          compliance_score={{ compliance_percentage }},
          checks_passed={{ compliance_results.compliance_checks.passed | length }},
          checks_failed={{ compliance_results.compliance_checks.failed | length }},
          checks_total={{ total_checks }},
          warnings={{ compliance_results.compliance_checks.warnings | length }}
          {{ ansible_date_time.epoch }}000000000
      when:
        - influxdb_url is defined
        - send_metrics | default(true)
      failed_when: false

    - name: Update NetBox with compliance status
      ansible.builtin.uri:
        url: "{{ netbox_url }}/api/dcim/devices/"
        method: PATCH
        headers:
          Authorization: "Token {{ netbox_token }}"
          Content-Type: "application/json"
        body_format: json
        body:
          name: "{{ inventory_hostname }}"
          custom_fields:
            compliance_score: "{{ compliance_percentage }}"
            last_compliance_audit: "{{ audit_timestamp }}"
            compliance_status: "{{ 'compliant' if compliance_percentage >= 90 else 'non_compliant' }}"
      when:
        - netbox_url is defined
        - netbox_token is defined
      failed_when: false

    - name: Display compliance audit results
      ansible.builtin.debug:
        msg:
          - "=== Compliance Audit Results ==="
          - "Device: {{ inventory_hostname }}"
          - "Platform: {{ ansible_network_os }}"
          - "Firmware Version: {{ compliance_results.firmware_version }}"
          - "Audit Timestamp: {{ audit_timestamp }}"
          - "Standards Tested: {{ compliance_results.standards_tested | join(', ') }}"
          - "Checks Passed: {{ compliance_results.compliance_checks.passed | length }}"
          - "Checks Failed: {{ compliance_results.compliance_checks.failed | length }}"
          - "Warnings: {{ compliance_results.compliance_checks.warnings | length }}"
          - "Compliance Score: {{ compliance_percentage }}%"
          - "Overall Status: {{ 'COMPLIANT' if compliance_percentage >= 90 else 'NON-COMPLIANT' }}"
          - "Report Location: {{ audit_results_path }}/{{ inventory_hostname }}/"
          - "==============================="

    - name: Compliance audit completion
      ansible.builtin.debug:
        msg: "Compliance audit completed for {{ inventory_hostname }} - Score: {{ compliance_percentage }}%"
