---
# Individual concurrent scenario test tasks
# Called by concurrent_upgrade_tests.yml for each scenario

- name: "Setup mock devices for scenario: {{ scenario.name }}"
  ansible.builtin.shell: |
    cd {{ playbook_dir }}/../mock-devices
    python3 mock_device_engine.py --platform {{ item.platform }} --name {{ item.name }} --port {{ item.port }} --daemon
  loop: "{{ scenario.devices }}"
  async: 600
  poll: 0

- name: Wait for all mock devices to start
  ansible.builtin.wait_for:
    port: "{{ item.port }}"
    host: localhost
    timeout: 30
  loop: "{{ scenario.devices }}"

- name: "Execute concurrent scenario: {{ scenario.name }}"
  block:
    - name: Record scenario start time
      ansible.builtin.set_fact:
        scenario_start_time: "{{ ansible_date_time.epoch }}"

    - name: Run concurrent upgrade simulation
      ansible.builtin.shell: |
        cd {{ playbook_dir }}/../mock-devices
        python3 -c '
        from mock_device_engine import MockDeviceManager, ConcurrentUpgradeSimulator
        import json
        import sys'
        
        manager = MockDeviceManager()
        simulator = ConcurrentUpgradeSimulator(manager)
        
        # Create devices
        devices = []
        {% for device in scenario.devices %}
        device_id = manager.create_device('{{ device.platform }}', '{{ device.name }}')
        devices.append({'id': device_id, 'name': '{{ device.name }}', 'platform': '{{ device.platform }}'})
        {% endfor %}
        
        # Configure scenario
        scenario_config = {
            'name': '{{ scenario.name }}',
            'coordination': '{{ scenario.coordination }}',
            'devices': devices
        }
        
        {% if scenario.resource_limits is defined %}
        scenario_config['resource_limits'] = {{ scenario.resource_limits | to_json }}
        {% endif %}
        
        {% if scenario.failure_injection is defined %}
        scenario_config['failure_injection'] = {{ scenario.failure_injection | to_json }}
        {% endif %}
        
        # Execute scenario
        result = simulator.run_concurrent_scenario(scenario_config)
        
        print(f'Scenario: {{ scenario.name }}')
        print(f'Expected: {{ scenario.expected_outcome }}')
        print(f'Actual: {result[\"outcome\"]}')
        
        if result['outcome'] == '{{ scenario.expected_outcome }}':
            print('PASS')
            sys.exit(0)
        else:
            print('FAIL')
            sys.exit(1)
        '
      register: concurrent_test_result
      failed_when: false

    - name: Record scenario completion time
      ansible.builtin.set_fact:
        scenario_end_time: "{{ ansible_date_time.epoch }}"
        scenario_duration: "{{ ansible_date_time.epoch | int - scenario_start_time | int }}"

    - name: Record test result
      ansible.builtin.set_fact:
        test_results: "{{ test_results | combine({scenario.name: {
          'status': 'PASS' if concurrent_test_result.rc == 0 else 'FAIL',
          'duration': scenario_duration,
          'device_count': scenario.devices | length,
          'errors': concurrent_test_result.stderr_lines | default([])
        }}) }}"

  always:
    - name: Cleanup mock devices for this scenario
      ansible.builtin.shell: |
        {% for device in scenario.devices %}
        pkill -f "port {{ device.port }}" > /dev/null 2>&1 || true
        {% endfor %}
      failed_when: false
      changed_when: false