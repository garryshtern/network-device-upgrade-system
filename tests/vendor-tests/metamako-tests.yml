---
# Metamako MOS Vendor-Specific Tests
# Tests Metamako MOS role functionality, ultra-low latency operations, and latency validation

- name: Metamako MOS Platform Tests
  hosts: localhost
  gather_facts: false
  vars:
    role_path: "{{ playbook_dir }}/../../ansible-content/roles/metamako-mos-upgrade"
    test_scenarios:
      - name: "Latency Critical MetaConnect-48"
        device_vars:
          platform_type: "metamako_mos"
          device_model: "MetaConnect-48"
          firmware_version: "0.39.1"
          target_version: "0.39.11"
          latency_critical: true
          metawatch_enabled: true
          metamux_enabled: false
          latency_threshold_ns: 50
        expected_results:
          latency_sensitive_upgrade: true
          validation_required: true
          metawatch_check: true
          metamux_check: false

      - name: "Standard MetaConnect-24"
        device_vars:
          platform_type: "metamako_mos"
          device_model: "MetaConnect-24"
          firmware_version: "0.39.5"
          target_version: "0.39.11"
          latency_critical: false
          metawatch_enabled: false
          metamux_enabled: true
          latency_threshold_ns: 100
        expected_results:
          latency_sensitive_upgrade: false
          validation_required: true
          metawatch_check: false
          metamux_check: true

      - name: "Basic MetaConnect-12"
        device_vars:
          platform_type: "metamako_mos"
          device_model: "MetaConnect-12"
          firmware_version: "0.39.8"
          target_version: "0.39.11"
          latency_critical: false
          metawatch_enabled: false
          metamux_enabled: false
          latency_threshold_ns: 500
        expected_results:
          latency_sensitive_upgrade: false
          validation_required: false
          metawatch_check: false
          metamux_check: false

      - name: "MetaConnect-48 with Application Management"
        device_vars:
          platform_type: "metamako_mos"
          device_model: "MetaConnect-48"
          firmware_version: "0.39.3"
          target_version: "0.39.11"
          latency_critical: true
          metawatch_enabled: true
          metamux_enabled: false
          latency_threshold_ns: 25
          manage_applications: true
          application_action: "install"
          application_source: "https://firmware.metamako.com/metawatch/metawatch-4.2.0.tar.gz"
          application_name: "metawatch"
        expected_results:
          latency_sensitive_upgrade: true
          validation_required: true
          metawatch_check: true
          metamux_check: false
          application_management: true

  tasks:
    - name: Validate Metamako MOS role structure
      stat:
        path: "{{ role_path }}"
      register: metamako_role_check

    - name: Assert Metamako MOS role exists
      assert:
        that:
          - metamako_role_check.stat.exists
          - metamako_role_check.stat.isdir
        fail_msg: "Metamako MOS role directory not found"
        success_msg: "✓ Metamako MOS role structure validated"

    - name: Validate required Metamako MOS role files
      stat:
        path: "{{ role_path }}/{{ item }}"
      register: metamako_file_checks
      loop:
        - "tasks/main.yml"
        - "tasks/image-loading.yml"
        - "tasks/image-installation.yml"
        - "tasks/latency-validation.yml"
        - "tasks/validation.yml"
        - "tasks/check-metawatch-metamux.yml"
        - "tasks/post-upgrade-service-validation.yml"
        - "tasks/application-management.yml"
        - "vars/main.yml"

    - name: Assert all required Metamako files exist
      assert:
        that:
          - item.stat.exists
        fail_msg: "Required Metamako file missing: {{ item.item }}"
        success_msg: "✓ Required Metamako file found: {{ item.item }}"
      loop: "{{ metamako_file_checks.results }}"

    - name: Test Metamako MOS latency scenarios
      include_tasks: validate_metamako_scenario.yml
      loop: "{{ test_scenarios }}"
      loop_control:
        loop_var: metamako_scenario
        label: "{{ metamako_scenario.name }}"

    - name: Test Metamako MOS latency validation capabilities
      block:
        - name: Validate latency validation task exists
          stat:
            path: "{{ role_path }}/tasks/latency-validation.yml"
          register: latency_validation_check

        - name: Read latency validation content
          slurp:
            src: "{{ role_path }}/tasks/latency-validation.yml"
          register: latency_content
          when: latency_validation_check.stat.exists

        - name: Assert latency validation capability
          assert:
            that:
              - latency_validation_check.stat.exists
              - "'latency' in latency_content.content | b64decode"
              - "'nanosecond' in latency_content.content | b64decode or 'ns' in latency_content.content | b64decode"
            fail_msg: "Latency validation missing or insufficient"
            success_msg: "✓ Latency validation capability confirmed"

    - name: Test Metamako MOS MetaWatch validation
      block:
        - name: Validate MetaWatch check task exists
          stat:
            path: "{{ role_path }}/tasks/check-metawatch-metamux.yml"
          register: metawatch_check_file

        - name: Read MetaWatch validation content
          slurp:
            src: "{{ role_path }}/tasks/check-metawatch-metamux.yml"
          register: metawatch_content
          when: metawatch_check_file.stat.exists

        - name: Assert MetaWatch validation capability
          assert:
            that:
              - metawatch_check_file.stat.exists
              - "'metawatch' in metawatch_content.content | b64decode"
            fail_msg: "MetaWatch validation missing"
            success_msg: "✓ MetaWatch validation capability confirmed"

    - name: Test Metamako MOS MetaMux validation
      block:
        - name: Assert MetaMux validation capability
          assert:
            that:
              - "'metamux' in metawatch_content.content | b64decode"
            fail_msg: "MetaMux validation missing"
            success_msg: "✓ MetaMux validation capability confirmed"
          when: metawatch_content is defined

    - name: Test Metamako MOS ultra-low latency handling
      block:
        - name: Check for latency-critical handling in main tasks
          slurp:
            src: "{{ role_path }}/tasks/main.yml"
          register: main_tasks_content
          when: metamako_role_check.stat.exists

        - name: Validate latency-critical logic exists
          assert:
            that:
              - "'latency_critical' in main_tasks_content.content | b64decode or 'latency' in main_tasks_content.content | b64decode"
            fail_msg: "Latency-critical handling logic missing from main tasks"
            success_msg: "✓ Latency-critical handling confirmed"
          when: main_tasks_content is defined

    - name: Test Metamako MOS custom CLI module compatibility
      block:
        - name: Check for custom CLI handling
          slurp:
            src: "{{ role_path }}/vars/main.yml"
          register: vars_content
          when: metamako_role_check.stat.exists

        - name: Validate MOS-specific variables
          assert:
            that:
              - "'mos' in vars_content.content | b64decode or 'metamako' in vars_content.content | b64decode"
            fail_msg: "MOS-specific variables missing"
            success_msg: "✓ MOS-specific configuration confirmed"
          when: vars_content is defined

    - name: Test Metamako MOS application management
      block:
        - name: Validate application management task exists
          stat:
            path: "{{ role_path }}/tasks/application-management.yml"
          register: app_mgmt_check

        - name: Read application management content
          slurp:
            src: "{{ role_path }}/tasks/application-management.yml"
          register: app_mgmt_content
          when: app_mgmt_check.stat.exists

        - name: Assert application management capabilities
          assert:
            that:
              - app_mgmt_check.stat.exists
              - "'install application' in app_mgmt_content.content | b64decode"
              - "'remove application' in app_mgmt_content.content | b64decode"
              - "'install eos-extension' in app_mgmt_content.content | b64decode"
              - "'copy' in app_mgmt_content.content | b64decode"
            fail_msg: "Application management capabilities missing"
            success_msg: "✓ Application management capabilities confirmed"

    - name: Test Metamako MOS application upload functionality
      block:
        - name: Validate upload logic in application management
          assert:
            that:
              - "'application_source' in app_mgmt_content.content | b64decode"
              - "'application_filename' in app_mgmt_content.content | b64decode"
              - "'flash:' in app_mgmt_content.content | b64decode"
              - "'timeout' in app_mgmt_content.content | b64decode"
            fail_msg: "Application upload functionality missing"
            success_msg: "✓ Application upload functionality confirmed"
          when: app_mgmt_content is defined

    - name: Test Metamako MOS service status validation
      block:
        - name: Validate post-upgrade service validation task exists
          stat:
            path: "{{ role_path }}/tasks/post-upgrade-service-validation.yml"
          register: service_validation_check

        - name: Read service validation content
          slurp:
            src: "{{ role_path }}/tasks/post-upgrade-service-validation.yml"
          register: service_validation_content
          when: service_validation_check.stat.exists

        - name: Assert service status validation capabilities
          assert:
            that:
              - service_validation_check.stat.exists
              - "'show metawatch running' in service_validation_content.content | b64decode"
              - "'show metamux running' in service_validation_content.content | b64decode"
              - "'show telemetry running' in service_validation_content.content | b64decode"
              - "'pre_upgrade_baseline' in service_validation_content.content | b64decode"
              - "'post_upgrade_services' in service_validation_content.content | b64decode"
            fail_msg: "Service status validation functionality missing"
            success_msg: "✓ Service status validation functionality confirmed"

    - name: Metamako MOS platform test summary
      debug:
        msg:
          - "=== Metamako MOS Platform Test Results ==="
          - "✓ Role structure validated"
          - "✓ Required files confirmed"
          - "✓ Latency scenarios tested"
          - "✓ Latency validation capability confirmed"
          - "✓ MetaWatch validation confirmed"
          - "✓ MetaMux validation confirmed"
          - "✓ Ultra-low latency handling confirmed"
          - "✓ Custom MOS CLI compatibility confirmed"
          - "✓ Application management capabilities confirmed"
          - "✓ Application upload functionality confirmed"
          - "✓ Service status validation functionality confirmed"
          - "✓ Metamako MOS platform testing: COMPLETE"
