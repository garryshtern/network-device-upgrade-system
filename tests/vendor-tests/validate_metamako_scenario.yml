---
# Metamako MOS Scenario Validation Task File  
# Called by metamako-tests.yml for each latency and device test scenario

- name: "Set Metamako scenario variables for: {{ metamako_scenario.name }}"
  set_fact:
    "{{ item.key }}": "{{ item.value }}"
  loop: "{{ metamako_scenario.device_vars | dict2items }}"

- name: "Test Metamako MOS scenario: {{ metamako_scenario.name }}"
  block:
    - name: Validate latency configuration detection
      set_fact:
        detected_latency_critical: "{{ latency_critical | default(false) | bool }}"
        detected_metawatch_enabled: "{{ metawatch_enabled | default(false) | bool }}"
        detected_metamux_enabled: "{{ metamux_enabled | default(false) | bool }}"
        detected_latency_threshold: "{{ latency_threshold_ns | default(1000) | int }}"
        
    - name: Determine upgrade approach based on latency requirements
      set_fact:
        latency_sensitive_approach: "{{ detected_latency_critical }}"
        validation_checks_required: "{{ detected_metawatch_enabled or detected_metamux_enabled }}"
        metawatch_validation: "{{ detected_metawatch_enabled }}"
        metamux_validation: "{{ detected_metamux_enabled }}"
        
    - name: Assert latency sensitivity detection accuracy
      assert:
        that:
          - latency_sensitive_approach == metamako_scenario.expected_results.latency_sensitive_upgrade
        fail_msg: "Latency sensitivity detection failed for {{ metamako_scenario.name }}"
        success_msg: "✓ Latency sensitivity detection correct for {{ metamako_scenario.name }}"
        
    - name: Assert validation requirements accuracy
      assert:
        that:
          - validation_checks_required == metamako_scenario.expected_results.validation_required
        fail_msg: "Validation requirements detection failed for {{ metamako_scenario.name }}"
        success_msg: "✓ Validation requirements correct for {{ metamako_scenario.name }}"
        
    - name: Assert MetaWatch validation logic
      assert:
        that:
          - metawatch_validation == metamako_scenario.expected_results.metawatch_check
        fail_msg: "MetaWatch validation logic failed for {{ metamako_scenario.name }}"
        success_msg: "✓ MetaWatch validation logic correct for {{ metamako_scenario.name }}"
        
    - name: Assert MetaMux validation logic
      assert:
        that:
          - metamux_validation == metamako_scenario.expected_results.metamux_check
        fail_msg: "MetaMux validation logic failed for {{ metamako_scenario.name }}"
        success_msg: "✓ MetaMux validation logic correct for {{ metamako_scenario.name }}"
        
    - name: Validate Metawatch/Metamux exclusivity
      assert:
        that:
          - not (detected_metawatch_enabled and detected_metamux_enabled)
        fail_msg: "Metawatch and Metamux cannot both be enabled on {{ metamako_scenario.name }}"
        success_msg: "✓ Metawatch/Metamux exclusivity validated for {{ metamako_scenario.name }}"

    - name: Validate device model and platform compatibility
      assert:
        that:
          - device_model is defined
          - device_model != ""
          - platform_type == "metamako_mos"
          - firmware_version is defined
          - target_version is defined
          - device_model is match("MetaConnect-.*")
        fail_msg: "Device model or platform validation failed"
        success_msg: "✓ Device compatibility validated for {{ metamako_scenario.name }}"

    - name: Validate latency threshold reasonableness
      assert:
        that:
          - detected_latency_threshold | int >= 25
          - detected_latency_threshold | int <= 10000
        fail_msg: "Latency threshold out of reasonable range (25-10000ns)"
        success_msg: "✓ Latency threshold validation passed"

    - name: Validate latency-critical device threshold
      assert:
        that:
          - detected_latency_threshold | int <= 200
        fail_msg: "Latency-critical device should have threshold <= 200ns"
        success_msg: "✓ Latency-critical threshold validation passed"
      when: detected_latency_critical

    - name: Validate MOS version compatibility
      assert:
        that:
          - firmware_version is version('0.30.0', '>=')
          - target_version is version(firmware_version, '>')
          - firmware_version is match("^[0-9]+\\.[0-9]+\\.[0-9]+$")
          - target_version is match("^[0-9]+\\.[0-9]+\\.[0-9]+$")
        fail_msg: "MOS version compatibility check failed - requires 0.30.0+ with x.y.z format"
        success_msg: "✓ MOS version compatibility validated"

    - name: Test application management variables (if enabled)
      block:
        - name: Validate application management configuration
          assert:
            that:
              - manage_applications is defined
              - application_action in ['install', 'remove', 'enable', 'disable', ''] or application_action is not defined
              - eos_extension_action is not defined or eos_extension_action in ['install', 'remove', '']
            fail_msg: "Application management configuration invalid"
            success_msg: "✓ Application management configuration validated"
          when: manage_applications is defined and manage_applications

        - name: Validate application source format (if installing)
          assert:
            that:
              - application_source is match("^/.*") or application_source is match("^flash:/.*") or application_source == ""
            fail_msg: "Application source format invalid - must be local file path or flash: path"
            success_msg: "✓ Application source format validated"
          when: 
            - manage_applications is defined and manage_applications
            - application_action is defined and application_action == 'install'
            - application_source is defined and application_source != ""

        - name: Validate EOS extension source format (if installing)
          assert:
            that:
              - eos_extension_source is match("^/.*") or eos_extension_source is match("^flash:/.*") or eos_extension_source == ""
            fail_msg: "EOS extension source format invalid - must be local file path or flash: path"
            success_msg: "✓ EOS extension source format validated"
          when: 
            - manage_applications is defined and manage_applications
            - eos_extension_action is defined and eos_extension_action == 'install'
            - eos_extension_source is defined and eos_extension_source != ""
            
      when: manage_applications is defined

    - name: "✓ {{ metamako_scenario.name }} - PASSED"
      debug:
        msg: 
          - "Metamako MOS scenario validation successful:"
          - "  Device: {{ device_model }}"
          - "  Latency Critical: {{ detected_latency_critical }}"
          - "  Latency Threshold: {{ detected_latency_threshold }}ns"
          - "  MetaWatch Enabled: {{ detected_metawatch_enabled }}"
          - "  MetaMux Enabled: {{ detected_metamux_enabled }}"
          - "  Validation Required: {{ validation_checks_required }}"
        
  rescue:
    - name: "✗ {{ metamako_scenario.name }} - FAILED"
      debug:
        msg: "Metamako MOS scenario validation failed for {{ metamako_scenario.name }}"
      
    - name: Fail the test
      fail:
        msg: "Metamako MOS scenario {{ metamako_scenario.name }} validation failed"