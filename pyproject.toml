[project]
name = "network-device-upgrade-system"
version = "1.0.0"
description = "AWX-based network device upgrade management system for enterprise environments"
authors = [
    {name = "Network Operations Team", email = "netops@company.com"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.9"
keywords = ["networking", "automation", "ansible", "awx", "firmware", "upgrade"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: System :: Networking",
    "Topic :: System :: Systems Administration",
]

dependencies = [
    # Core automation
    "ansible-core>=2.15.0",
    "ansible-runner>=2.3.0",
    
    # Network device libraries
    "netmiko>=4.3.0",
    "napalm>=5.0.0",
    "ncclient>=0.6.13",
    "paramiko>=3.4.0",
    "netaddr>=1.2.1",
    
    # NetBox integration
    "pynetbox>=7.3.0",
    "requests>=2.31.0",
    
    # Monitoring and metrics
    "influxdb-client>=1.40.0",
    "prometheus-client>=0.19.0",
    
    # Security and crypto
    "cryptography>=41.0.0",
    "pyjwt>=2.8.0",
    "passlib>=1.7.4",
    
    # Data processing
    "pydantic>=2.5.0",
    "pyyaml>=6.0.1",
    "jinja2>=3.1.2",
    
    # CLI and utilities
    "click>=8.1.0",
    "rich>=13.7.0",
    "tabulate>=0.9.0",
    
    # Database
    "psycopg2-binary>=2.9.9",
    "sqlalchemy>=2.0.0",
    
    # HTTP and API
    "fastapi>=0.104.0",
    "uvicorn>=0.24.0",
    "httpx>=0.25.0",
    
    # Testing utilities  
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.12.0",
]

[project.optional-dependencies]
dev = [
    "black>=23.11.0",
    "isort>=5.12.0",
    "flake8>=6.1.0",
    "mypy>=1.7.0",
    "pre-commit>=3.6.0",
    "bandit>=1.7.5",
]

test = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-xdist>=3.5.0",
    "factory-boy>=3.3.0",
    "responses>=0.24.0",
]

docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",
    "mkdocs-mermaid2-plugin>=1.1.0",
]

[project.urls]
Homepage = "https://github.com/company/network-device-upgrade-system"
Documentation = "https://docs.company.com/network-upgrade-system"
Repository = "https://github.com/company/network-device-upgrade-system"
Issues = "https://github.com/company/network-device-upgrade-system/issues"

[project.scripts]
netupgrade = "src.cli:main"
netupgrade-server = "src.api.server:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["src"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*", "*/test_*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]